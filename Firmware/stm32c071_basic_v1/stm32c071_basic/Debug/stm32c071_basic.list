
stm32c071_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d18  08002d18  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d18  08002d18  00003d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d20  08002d20  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d24  08002d24  00003d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002d28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08002d2c  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08002d2c  00004024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028f8  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010a9  00000000  00000000  00006924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  000079d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ca  00000000  00000000  00007df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d158  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007352  00000000  00000000  00015212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00043fc5  00000000  00000000  0001c564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c7c  00000000  00000000  0006056c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000611e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c80 	.word	0x08002c80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002c80 	.word	0x08002c80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f824 	bl	800029c <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_d2uiz>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	2200      	movs	r2, #0
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <__aeabi_d2uiz+0x38>)
 8000266:	0004      	movs	r4, r0
 8000268:	000d      	movs	r5, r1
 800026a:	f001 fb7f 	bl	800196c <__aeabi_dcmpge>
 800026e:	2800      	cmp	r0, #0
 8000270:	d104      	bne.n	800027c <__aeabi_d2uiz+0x1c>
 8000272:	0020      	movs	r0, r4
 8000274:	0029      	movs	r1, r5
 8000276:	f001 fae5 	bl	8001844 <__aeabi_d2iz>
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <__aeabi_d2uiz+0x38>)
 800027e:	2200      	movs	r2, #0
 8000280:	0020      	movs	r0, r4
 8000282:	0029      	movs	r1, r5
 8000284:	f000 fed4 	bl	8001030 <__aeabi_dsub>
 8000288:	f001 fadc 	bl	8001844 <__aeabi_d2iz>
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	061b      	lsls	r3, r3, #24
 8000290:	469c      	mov	ip, r3
 8000292:	4460      	add	r0, ip
 8000294:	e7f1      	b.n	800027a <__aeabi_d2uiz+0x1a>
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	41e00000 	.word	0x41e00000

0800029c <__udivmoddi4>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	4657      	mov	r7, sl
 80002a0:	464e      	mov	r6, r9
 80002a2:	4645      	mov	r5, r8
 80002a4:	46de      	mov	lr, fp
 80002a6:	b5e0      	push	{r5, r6, r7, lr}
 80002a8:	0004      	movs	r4, r0
 80002aa:	000d      	movs	r5, r1
 80002ac:	4692      	mov	sl, r2
 80002ae:	4699      	mov	r9, r3
 80002b0:	b083      	sub	sp, #12
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d830      	bhi.n	8000318 <__udivmoddi4+0x7c>
 80002b6:	d02d      	beq.n	8000314 <__udivmoddi4+0x78>
 80002b8:	4649      	mov	r1, r9
 80002ba:	4650      	mov	r0, sl
 80002bc:	f001 fb7e 	bl	80019bc <__clzdi2>
 80002c0:	0029      	movs	r1, r5
 80002c2:	0006      	movs	r6, r0
 80002c4:	0020      	movs	r0, r4
 80002c6:	f001 fb79 	bl	80019bc <__clzdi2>
 80002ca:	1a33      	subs	r3, r6, r0
 80002cc:	4698      	mov	r8, r3
 80002ce:	3b20      	subs	r3, #32
 80002d0:	d434      	bmi.n	800033c <__udivmoddi4+0xa0>
 80002d2:	469b      	mov	fp, r3
 80002d4:	4653      	mov	r3, sl
 80002d6:	465a      	mov	r2, fp
 80002d8:	4093      	lsls	r3, r2
 80002da:	4642      	mov	r2, r8
 80002dc:	001f      	movs	r7, r3
 80002de:	4653      	mov	r3, sl
 80002e0:	4093      	lsls	r3, r2
 80002e2:	001e      	movs	r6, r3
 80002e4:	42af      	cmp	r7, r5
 80002e6:	d83b      	bhi.n	8000360 <__udivmoddi4+0xc4>
 80002e8:	42af      	cmp	r7, r5
 80002ea:	d100      	bne.n	80002ee <__udivmoddi4+0x52>
 80002ec:	e079      	b.n	80003e2 <__udivmoddi4+0x146>
 80002ee:	465b      	mov	r3, fp
 80002f0:	1ba4      	subs	r4, r4, r6
 80002f2:	41bd      	sbcs	r5, r7
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da00      	bge.n	80002fa <__udivmoddi4+0x5e>
 80002f8:	e076      	b.n	80003e8 <__udivmoddi4+0x14c>
 80002fa:	2200      	movs	r2, #0
 80002fc:	2300      	movs	r3, #0
 80002fe:	9200      	str	r2, [sp, #0]
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2301      	movs	r3, #1
 8000304:	465a      	mov	r2, fp
 8000306:	4093      	lsls	r3, r2
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2301      	movs	r3, #1
 800030c:	4642      	mov	r2, r8
 800030e:	4093      	lsls	r3, r2
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	e029      	b.n	8000368 <__udivmoddi4+0xcc>
 8000314:	4282      	cmp	r2, r0
 8000316:	d9cf      	bls.n	80002b8 <__udivmoddi4+0x1c>
 8000318:	2200      	movs	r2, #0
 800031a:	2300      	movs	r3, #0
 800031c:	9200      	str	r2, [sp, #0]
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <__udivmoddi4+0x8e>
 8000326:	601c      	str	r4, [r3, #0]
 8000328:	605d      	str	r5, [r3, #4]
 800032a:	9800      	ldr	r0, [sp, #0]
 800032c:	9901      	ldr	r1, [sp, #4]
 800032e:	b003      	add	sp, #12
 8000330:	bcf0      	pop	{r4, r5, r6, r7}
 8000332:	46bb      	mov	fp, r7
 8000334:	46b2      	mov	sl, r6
 8000336:	46a9      	mov	r9, r5
 8000338:	46a0      	mov	r8, r4
 800033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033c:	4642      	mov	r2, r8
 800033e:	469b      	mov	fp, r3
 8000340:	2320      	movs	r3, #32
 8000342:	1a9b      	subs	r3, r3, r2
 8000344:	4652      	mov	r2, sl
 8000346:	40da      	lsrs	r2, r3
 8000348:	4641      	mov	r1, r8
 800034a:	0013      	movs	r3, r2
 800034c:	464a      	mov	r2, r9
 800034e:	408a      	lsls	r2, r1
 8000350:	0017      	movs	r7, r2
 8000352:	4642      	mov	r2, r8
 8000354:	431f      	orrs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	001e      	movs	r6, r3
 800035c:	42af      	cmp	r7, r5
 800035e:	d9c3      	bls.n	80002e8 <__udivmoddi4+0x4c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	4643      	mov	r3, r8
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0d8      	beq.n	8000320 <__udivmoddi4+0x84>
 800036e:	07fb      	lsls	r3, r7, #31
 8000370:	0872      	lsrs	r2, r6, #1
 8000372:	431a      	orrs	r2, r3
 8000374:	4646      	mov	r6, r8
 8000376:	087b      	lsrs	r3, r7, #1
 8000378:	e00e      	b.n	8000398 <__udivmoddi4+0xfc>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d101      	bne.n	8000382 <__udivmoddi4+0xe6>
 800037e:	42a2      	cmp	r2, r4
 8000380:	d80c      	bhi.n	800039c <__udivmoddi4+0x100>
 8000382:	1aa4      	subs	r4, r4, r2
 8000384:	419d      	sbcs	r5, r3
 8000386:	2001      	movs	r0, #1
 8000388:	1924      	adds	r4, r4, r4
 800038a:	416d      	adcs	r5, r5
 800038c:	2100      	movs	r1, #0
 800038e:	3e01      	subs	r6, #1
 8000390:	1824      	adds	r4, r4, r0
 8000392:	414d      	adcs	r5, r1
 8000394:	2e00      	cmp	r6, #0
 8000396:	d006      	beq.n	80003a6 <__udivmoddi4+0x10a>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d9ee      	bls.n	800037a <__udivmoddi4+0xde>
 800039c:	3e01      	subs	r6, #1
 800039e:	1924      	adds	r4, r4, r4
 80003a0:	416d      	adcs	r5, r5
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d1f8      	bne.n	8000398 <__udivmoddi4+0xfc>
 80003a6:	9800      	ldr	r0, [sp, #0]
 80003a8:	9901      	ldr	r1, [sp, #4]
 80003aa:	465b      	mov	r3, fp
 80003ac:	1900      	adds	r0, r0, r4
 80003ae:	4169      	adcs	r1, r5
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db24      	blt.n	80003fe <__udivmoddi4+0x162>
 80003b4:	002b      	movs	r3, r5
 80003b6:	465a      	mov	r2, fp
 80003b8:	4644      	mov	r4, r8
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	002a      	movs	r2, r5
 80003be:	40e2      	lsrs	r2, r4
 80003c0:	001c      	movs	r4, r3
 80003c2:	465b      	mov	r3, fp
 80003c4:	0015      	movs	r5, r2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db2a      	blt.n	8000420 <__udivmoddi4+0x184>
 80003ca:	0026      	movs	r6, r4
 80003cc:	409e      	lsls	r6, r3
 80003ce:	0033      	movs	r3, r6
 80003d0:	0026      	movs	r6, r4
 80003d2:	4647      	mov	r7, r8
 80003d4:	40be      	lsls	r6, r7
 80003d6:	0032      	movs	r2, r6
 80003d8:	1a80      	subs	r0, r0, r2
 80003da:	4199      	sbcs	r1, r3
 80003dc:	9000      	str	r0, [sp, #0]
 80003de:	9101      	str	r1, [sp, #4]
 80003e0:	e79e      	b.n	8000320 <__udivmoddi4+0x84>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d8bc      	bhi.n	8000360 <__udivmoddi4+0xc4>
 80003e6:	e782      	b.n	80002ee <__udivmoddi4+0x52>
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	9100      	str	r1, [sp, #0]
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	9201      	str	r2, [sp, #4]
 80003fc:	e785      	b.n	800030a <__udivmoddi4+0x6e>
 80003fe:	4642      	mov	r2, r8
 8000400:	2320      	movs	r3, #32
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	002a      	movs	r2, r5
 8000406:	4646      	mov	r6, r8
 8000408:	409a      	lsls	r2, r3
 800040a:	0023      	movs	r3, r4
 800040c:	40f3      	lsrs	r3, r6
 800040e:	4644      	mov	r4, r8
 8000410:	4313      	orrs	r3, r2
 8000412:	002a      	movs	r2, r5
 8000414:	40e2      	lsrs	r2, r4
 8000416:	001c      	movs	r4, r3
 8000418:	465b      	mov	r3, fp
 800041a:	0015      	movs	r5, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	dad4      	bge.n	80003ca <__udivmoddi4+0x12e>
 8000420:	4642      	mov	r2, r8
 8000422:	002f      	movs	r7, r5
 8000424:	2320      	movs	r3, #32
 8000426:	0026      	movs	r6, r4
 8000428:	4097      	lsls	r7, r2
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	40de      	lsrs	r6, r3
 800042e:	003b      	movs	r3, r7
 8000430:	4333      	orrs	r3, r6
 8000432:	e7cd      	b.n	80003d0 <__udivmoddi4+0x134>

08000434 <__aeabi_ddiv>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46de      	mov	lr, fp
 8000438:	4645      	mov	r5, r8
 800043a:	4657      	mov	r7, sl
 800043c:	464e      	mov	r6, r9
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	b087      	sub	sp, #28
 8000442:	9200      	str	r2, [sp, #0]
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	030b      	lsls	r3, r1, #12
 8000448:	0b1b      	lsrs	r3, r3, #12
 800044a:	469b      	mov	fp, r3
 800044c:	0fca      	lsrs	r2, r1, #31
 800044e:	004b      	lsls	r3, r1, #1
 8000450:	0004      	movs	r4, r0
 8000452:	4680      	mov	r8, r0
 8000454:	0d5b      	lsrs	r3, r3, #21
 8000456:	9202      	str	r2, [sp, #8]
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x28>
 800045a:	e098      	b.n	800058e <__aeabi_ddiv+0x15a>
 800045c:	4a7c      	ldr	r2, [pc, #496]	@ (8000650 <__aeabi_ddiv+0x21c>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d037      	beq.n	80004d2 <__aeabi_ddiv+0x9e>
 8000462:	4659      	mov	r1, fp
 8000464:	0f42      	lsrs	r2, r0, #29
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	430a      	orrs	r2, r1
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	0409      	lsls	r1, r1, #16
 800046e:	4311      	orrs	r1, r2
 8000470:	00c2      	lsls	r2, r0, #3
 8000472:	4690      	mov	r8, r2
 8000474:	4a77      	ldr	r2, [pc, #476]	@ (8000654 <__aeabi_ddiv+0x220>)
 8000476:	4689      	mov	r9, r1
 8000478:	4692      	mov	sl, r2
 800047a:	449a      	add	sl, r3
 800047c:	2300      	movs	r3, #0
 800047e:	2400      	movs	r4, #0
 8000480:	9303      	str	r3, [sp, #12]
 8000482:	9e00      	ldr	r6, [sp, #0]
 8000484:	9f01      	ldr	r7, [sp, #4]
 8000486:	033b      	lsls	r3, r7, #12
 8000488:	0b1b      	lsrs	r3, r3, #12
 800048a:	469b      	mov	fp, r3
 800048c:	007b      	lsls	r3, r7, #1
 800048e:	0030      	movs	r0, r6
 8000490:	0d5b      	lsrs	r3, r3, #21
 8000492:	0ffd      	lsrs	r5, r7, #31
 8000494:	2b00      	cmp	r3, #0
 8000496:	d059      	beq.n	800054c <__aeabi_ddiv+0x118>
 8000498:	4a6d      	ldr	r2, [pc, #436]	@ (8000650 <__aeabi_ddiv+0x21c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d048      	beq.n	8000530 <__aeabi_ddiv+0xfc>
 800049e:	4659      	mov	r1, fp
 80004a0:	0f72      	lsrs	r2, r6, #29
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	430a      	orrs	r2, r1
 80004a6:	2180      	movs	r1, #128	@ 0x80
 80004a8:	0409      	lsls	r1, r1, #16
 80004aa:	4311      	orrs	r1, r2
 80004ac:	468b      	mov	fp, r1
 80004ae:	4969      	ldr	r1, [pc, #420]	@ (8000654 <__aeabi_ddiv+0x220>)
 80004b0:	00f2      	lsls	r2, r6, #3
 80004b2:	468c      	mov	ip, r1
 80004b4:	4651      	mov	r1, sl
 80004b6:	4463      	add	r3, ip
 80004b8:	1acb      	subs	r3, r1, r3
 80004ba:	469a      	mov	sl, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	9e02      	ldr	r6, [sp, #8]
 80004c0:	406e      	eors	r6, r5
 80004c2:	b2f6      	uxtb	r6, r6
 80004c4:	2c0f      	cmp	r4, #15
 80004c6:	d900      	bls.n	80004ca <__aeabi_ddiv+0x96>
 80004c8:	e0ce      	b.n	8000668 <__aeabi_ddiv+0x234>
 80004ca:	4b63      	ldr	r3, [pc, #396]	@ (8000658 <__aeabi_ddiv+0x224>)
 80004cc:	00a4      	lsls	r4, r4, #2
 80004ce:	591b      	ldr	r3, [r3, r4]
 80004d0:	469f      	mov	pc, r3
 80004d2:	465a      	mov	r2, fp
 80004d4:	4302      	orrs	r2, r0
 80004d6:	4691      	mov	r9, r2
 80004d8:	d000      	beq.n	80004dc <__aeabi_ddiv+0xa8>
 80004da:	e090      	b.n	80005fe <__aeabi_ddiv+0x1ca>
 80004dc:	469a      	mov	sl, r3
 80004de:	2302      	movs	r3, #2
 80004e0:	4690      	mov	r8, r2
 80004e2:	2408      	movs	r4, #8
 80004e4:	9303      	str	r3, [sp, #12]
 80004e6:	e7cc      	b.n	8000482 <__aeabi_ddiv+0x4e>
 80004e8:	46cb      	mov	fp, r9
 80004ea:	4642      	mov	r2, r8
 80004ec:	9d02      	ldr	r5, [sp, #8]
 80004ee:	9903      	ldr	r1, [sp, #12]
 80004f0:	2902      	cmp	r1, #2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0xc2>
 80004f4:	e1de      	b.n	80008b4 <__aeabi_ddiv+0x480>
 80004f6:	2903      	cmp	r1, #3
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0xc8>
 80004fa:	e08d      	b.n	8000618 <__aeabi_ddiv+0x1e4>
 80004fc:	2901      	cmp	r1, #1
 80004fe:	d000      	beq.n	8000502 <__aeabi_ddiv+0xce>
 8000500:	e179      	b.n	80007f6 <__aeabi_ddiv+0x3c2>
 8000502:	002e      	movs	r6, r5
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	2400      	movs	r4, #0
 800050a:	4690      	mov	r8, r2
 800050c:	051b      	lsls	r3, r3, #20
 800050e:	4323      	orrs	r3, r4
 8000510:	07f6      	lsls	r6, r6, #31
 8000512:	4333      	orrs	r3, r6
 8000514:	4640      	mov	r0, r8
 8000516:	0019      	movs	r1, r3
 8000518:	b007      	add	sp, #28
 800051a:	bcf0      	pop	{r4, r5, r6, r7}
 800051c:	46bb      	mov	fp, r7
 800051e:	46b2      	mov	sl, r6
 8000520:	46a9      	mov	r9, r5
 8000522:	46a0      	mov	r8, r4
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	2200      	movs	r2, #0
 8000528:	2400      	movs	r4, #0
 800052a:	4690      	mov	r8, r2
 800052c:	4b48      	ldr	r3, [pc, #288]	@ (8000650 <__aeabi_ddiv+0x21c>)
 800052e:	e7ed      	b.n	800050c <__aeabi_ddiv+0xd8>
 8000530:	465a      	mov	r2, fp
 8000532:	9b00      	ldr	r3, [sp, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	4b49      	ldr	r3, [pc, #292]	@ (800065c <__aeabi_ddiv+0x228>)
 8000538:	469c      	mov	ip, r3
 800053a:	44e2      	add	sl, ip
 800053c:	2a00      	cmp	r2, #0
 800053e:	d159      	bne.n	80005f4 <__aeabi_ddiv+0x1c0>
 8000540:	2302      	movs	r3, #2
 8000542:	431c      	orrs	r4, r3
 8000544:	2300      	movs	r3, #0
 8000546:	2102      	movs	r1, #2
 8000548:	469b      	mov	fp, r3
 800054a:	e7b8      	b.n	80004be <__aeabi_ddiv+0x8a>
 800054c:	465a      	mov	r2, fp
 800054e:	9b00      	ldr	r3, [sp, #0]
 8000550:	431a      	orrs	r2, r3
 8000552:	d049      	beq.n	80005e8 <__aeabi_ddiv+0x1b4>
 8000554:	465b      	mov	r3, fp
 8000556:	2b00      	cmp	r3, #0
 8000558:	d100      	bne.n	800055c <__aeabi_ddiv+0x128>
 800055a:	e19c      	b.n	8000896 <__aeabi_ddiv+0x462>
 800055c:	4658      	mov	r0, fp
 800055e:	f001 fa0f 	bl	8001980 <__clzsi2>
 8000562:	0002      	movs	r2, r0
 8000564:	0003      	movs	r3, r0
 8000566:	3a0b      	subs	r2, #11
 8000568:	271d      	movs	r7, #29
 800056a:	9e00      	ldr	r6, [sp, #0]
 800056c:	1aba      	subs	r2, r7, r2
 800056e:	0019      	movs	r1, r3
 8000570:	4658      	mov	r0, fp
 8000572:	40d6      	lsrs	r6, r2
 8000574:	3908      	subs	r1, #8
 8000576:	4088      	lsls	r0, r1
 8000578:	0032      	movs	r2, r6
 800057a:	4302      	orrs	r2, r0
 800057c:	4693      	mov	fp, r2
 800057e:	9a00      	ldr	r2, [sp, #0]
 8000580:	408a      	lsls	r2, r1
 8000582:	4937      	ldr	r1, [pc, #220]	@ (8000660 <__aeabi_ddiv+0x22c>)
 8000584:	4453      	add	r3, sl
 8000586:	468a      	mov	sl, r1
 8000588:	2100      	movs	r1, #0
 800058a:	449a      	add	sl, r3
 800058c:	e797      	b.n	80004be <__aeabi_ddiv+0x8a>
 800058e:	465b      	mov	r3, fp
 8000590:	4303      	orrs	r3, r0
 8000592:	4699      	mov	r9, r3
 8000594:	d021      	beq.n	80005da <__aeabi_ddiv+0x1a6>
 8000596:	465b      	mov	r3, fp
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_ddiv+0x16a>
 800059c:	e169      	b.n	8000872 <__aeabi_ddiv+0x43e>
 800059e:	4658      	mov	r0, fp
 80005a0:	f001 f9ee 	bl	8001980 <__clzsi2>
 80005a4:	230b      	movs	r3, #11
 80005a6:	425b      	negs	r3, r3
 80005a8:	469c      	mov	ip, r3
 80005aa:	0002      	movs	r2, r0
 80005ac:	4484      	add	ip, r0
 80005ae:	4666      	mov	r6, ip
 80005b0:	231d      	movs	r3, #29
 80005b2:	1b9b      	subs	r3, r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	0011      	movs	r1, r2
 80005b8:	4658      	mov	r0, fp
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	3908      	subs	r1, #8
 80005be:	4088      	lsls	r0, r1
 80005c0:	0033      	movs	r3, r6
 80005c2:	4303      	orrs	r3, r0
 80005c4:	4699      	mov	r9, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	408b      	lsls	r3, r1
 80005ca:	4698      	mov	r8, r3
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <__aeabi_ddiv+0x230>)
 80005ce:	2400      	movs	r4, #0
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	469a      	mov	sl, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	9303      	str	r3, [sp, #12]
 80005d8:	e753      	b.n	8000482 <__aeabi_ddiv+0x4e>
 80005da:	2300      	movs	r3, #0
 80005dc:	4698      	mov	r8, r3
 80005de:	469a      	mov	sl, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	2404      	movs	r4, #4
 80005e4:	9303      	str	r3, [sp, #12]
 80005e6:	e74c      	b.n	8000482 <__aeabi_ddiv+0x4e>
 80005e8:	2301      	movs	r3, #1
 80005ea:	431c      	orrs	r4, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	469b      	mov	fp, r3
 80005f2:	e764      	b.n	80004be <__aeabi_ddiv+0x8a>
 80005f4:	2303      	movs	r3, #3
 80005f6:	0032      	movs	r2, r6
 80005f8:	2103      	movs	r1, #3
 80005fa:	431c      	orrs	r4, r3
 80005fc:	e75f      	b.n	80004be <__aeabi_ddiv+0x8a>
 80005fe:	469a      	mov	sl, r3
 8000600:	2303      	movs	r3, #3
 8000602:	46d9      	mov	r9, fp
 8000604:	240c      	movs	r4, #12
 8000606:	9303      	str	r3, [sp, #12]
 8000608:	e73b      	b.n	8000482 <__aeabi_ddiv+0x4e>
 800060a:	2300      	movs	r3, #0
 800060c:	2480      	movs	r4, #128	@ 0x80
 800060e:	4698      	mov	r8, r3
 8000610:	2600      	movs	r6, #0
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <__aeabi_ddiv+0x21c>)
 8000614:	0324      	lsls	r4, r4, #12
 8000616:	e779      	b.n	800050c <__aeabi_ddiv+0xd8>
 8000618:	2480      	movs	r4, #128	@ 0x80
 800061a:	465b      	mov	r3, fp
 800061c:	0324      	lsls	r4, r4, #12
 800061e:	431c      	orrs	r4, r3
 8000620:	0324      	lsls	r4, r4, #12
 8000622:	002e      	movs	r6, r5
 8000624:	4690      	mov	r8, r2
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <__aeabi_ddiv+0x21c>)
 8000628:	0b24      	lsrs	r4, r4, #12
 800062a:	e76f      	b.n	800050c <__aeabi_ddiv+0xd8>
 800062c:	2480      	movs	r4, #128	@ 0x80
 800062e:	464b      	mov	r3, r9
 8000630:	0324      	lsls	r4, r4, #12
 8000632:	4223      	tst	r3, r4
 8000634:	d002      	beq.n	800063c <__aeabi_ddiv+0x208>
 8000636:	465b      	mov	r3, fp
 8000638:	4223      	tst	r3, r4
 800063a:	d0f0      	beq.n	800061e <__aeabi_ddiv+0x1ea>
 800063c:	2480      	movs	r4, #128	@ 0x80
 800063e:	464b      	mov	r3, r9
 8000640:	0324      	lsls	r4, r4, #12
 8000642:	431c      	orrs	r4, r3
 8000644:	0324      	lsls	r4, r4, #12
 8000646:	9e02      	ldr	r6, [sp, #8]
 8000648:	4b01      	ldr	r3, [pc, #4]	@ (8000650 <__aeabi_ddiv+0x21c>)
 800064a:	0b24      	lsrs	r4, r4, #12
 800064c:	e75e      	b.n	800050c <__aeabi_ddiv+0xd8>
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	000007ff 	.word	0x000007ff
 8000654:	fffffc01 	.word	0xfffffc01
 8000658:	08002c98 	.word	0x08002c98
 800065c:	fffff801 	.word	0xfffff801
 8000660:	000003f3 	.word	0x000003f3
 8000664:	fffffc0d 	.word	0xfffffc0d
 8000668:	45cb      	cmp	fp, r9
 800066a:	d200      	bcs.n	800066e <__aeabi_ddiv+0x23a>
 800066c:	e0f8      	b.n	8000860 <__aeabi_ddiv+0x42c>
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x23e>
 8000670:	e0f3      	b.n	800085a <__aeabi_ddiv+0x426>
 8000672:	2301      	movs	r3, #1
 8000674:	425b      	negs	r3, r3
 8000676:	469c      	mov	ip, r3
 8000678:	4644      	mov	r4, r8
 800067a:	4648      	mov	r0, r9
 800067c:	2500      	movs	r5, #0
 800067e:	44e2      	add	sl, ip
 8000680:	465b      	mov	r3, fp
 8000682:	0e17      	lsrs	r7, r2, #24
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	431f      	orrs	r7, r3
 8000688:	0c19      	lsrs	r1, r3, #16
 800068a:	043b      	lsls	r3, r7, #16
 800068c:	0212      	lsls	r2, r2, #8
 800068e:	9700      	str	r7, [sp, #0]
 8000690:	0c1f      	lsrs	r7, r3, #16
 8000692:	4691      	mov	r9, r2
 8000694:	9102      	str	r1, [sp, #8]
 8000696:	9703      	str	r7, [sp, #12]
 8000698:	f7ff fdbc 	bl	8000214 <__aeabi_uidivmod>
 800069c:	0002      	movs	r2, r0
 800069e:	437a      	muls	r2, r7
 80006a0:	040b      	lsls	r3, r1, #16
 80006a2:	0c21      	lsrs	r1, r4, #16
 80006a4:	4680      	mov	r8, r0
 80006a6:	4319      	orrs	r1, r3
 80006a8:	428a      	cmp	r2, r1
 80006aa:	d909      	bls.n	80006c0 <__aeabi_ddiv+0x28c>
 80006ac:	9f00      	ldr	r7, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	46bc      	mov	ip, r7
 80006b2:	425b      	negs	r3, r3
 80006b4:	4461      	add	r1, ip
 80006b6:	469c      	mov	ip, r3
 80006b8:	44e0      	add	r8, ip
 80006ba:	428f      	cmp	r7, r1
 80006bc:	d800      	bhi.n	80006c0 <__aeabi_ddiv+0x28c>
 80006be:	e15c      	b.n	800097a <__aeabi_ddiv+0x546>
 80006c0:	1a88      	subs	r0, r1, r2
 80006c2:	9902      	ldr	r1, [sp, #8]
 80006c4:	f7ff fda6 	bl	8000214 <__aeabi_uidivmod>
 80006c8:	9a03      	ldr	r2, [sp, #12]
 80006ca:	0424      	lsls	r4, r4, #16
 80006cc:	4342      	muls	r2, r0
 80006ce:	0409      	lsls	r1, r1, #16
 80006d0:	0c24      	lsrs	r4, r4, #16
 80006d2:	0003      	movs	r3, r0
 80006d4:	430c      	orrs	r4, r1
 80006d6:	42a2      	cmp	r2, r4
 80006d8:	d906      	bls.n	80006e8 <__aeabi_ddiv+0x2b4>
 80006da:	9900      	ldr	r1, [sp, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	468c      	mov	ip, r1
 80006e0:	4464      	add	r4, ip
 80006e2:	42a1      	cmp	r1, r4
 80006e4:	d800      	bhi.n	80006e8 <__aeabi_ddiv+0x2b4>
 80006e6:	e142      	b.n	800096e <__aeabi_ddiv+0x53a>
 80006e8:	1aa0      	subs	r0, r4, r2
 80006ea:	4642      	mov	r2, r8
 80006ec:	0412      	lsls	r2, r2, #16
 80006ee:	431a      	orrs	r2, r3
 80006f0:	4693      	mov	fp, r2
 80006f2:	464b      	mov	r3, r9
 80006f4:	4659      	mov	r1, fp
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	001f      	movs	r7, r3
 80006fa:	9304      	str	r3, [sp, #16]
 80006fc:	040b      	lsls	r3, r1, #16
 80006fe:	4649      	mov	r1, r9
 8000700:	0409      	lsls	r1, r1, #16
 8000702:	0c09      	lsrs	r1, r1, #16
 8000704:	000c      	movs	r4, r1
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	435c      	muls	r4, r3
 800070a:	0c12      	lsrs	r2, r2, #16
 800070c:	437b      	muls	r3, r7
 800070e:	4688      	mov	r8, r1
 8000710:	4351      	muls	r1, r2
 8000712:	437a      	muls	r2, r7
 8000714:	0c27      	lsrs	r7, r4, #16
 8000716:	46bc      	mov	ip, r7
 8000718:	185b      	adds	r3, r3, r1
 800071a:	4463      	add	r3, ip
 800071c:	4299      	cmp	r1, r3
 800071e:	d903      	bls.n	8000728 <__aeabi_ddiv+0x2f4>
 8000720:	2180      	movs	r1, #128	@ 0x80
 8000722:	0249      	lsls	r1, r1, #9
 8000724:	468c      	mov	ip, r1
 8000726:	4462      	add	r2, ip
 8000728:	0c19      	lsrs	r1, r3, #16
 800072a:	0424      	lsls	r4, r4, #16
 800072c:	041b      	lsls	r3, r3, #16
 800072e:	0c24      	lsrs	r4, r4, #16
 8000730:	188a      	adds	r2, r1, r2
 8000732:	191c      	adds	r4, r3, r4
 8000734:	4290      	cmp	r0, r2
 8000736:	d302      	bcc.n	800073e <__aeabi_ddiv+0x30a>
 8000738:	d116      	bne.n	8000768 <__aeabi_ddiv+0x334>
 800073a:	42a5      	cmp	r5, r4
 800073c:	d214      	bcs.n	8000768 <__aeabi_ddiv+0x334>
 800073e:	465b      	mov	r3, fp
 8000740:	9f00      	ldr	r7, [sp, #0]
 8000742:	3b01      	subs	r3, #1
 8000744:	444d      	add	r5, r9
 8000746:	9305      	str	r3, [sp, #20]
 8000748:	454d      	cmp	r5, r9
 800074a:	419b      	sbcs	r3, r3
 800074c:	46bc      	mov	ip, r7
 800074e:	425b      	negs	r3, r3
 8000750:	4463      	add	r3, ip
 8000752:	18c0      	adds	r0, r0, r3
 8000754:	4287      	cmp	r7, r0
 8000756:	d300      	bcc.n	800075a <__aeabi_ddiv+0x326>
 8000758:	e102      	b.n	8000960 <__aeabi_ddiv+0x52c>
 800075a:	4282      	cmp	r2, r0
 800075c:	d900      	bls.n	8000760 <__aeabi_ddiv+0x32c>
 800075e:	e129      	b.n	80009b4 <__aeabi_ddiv+0x580>
 8000760:	d100      	bne.n	8000764 <__aeabi_ddiv+0x330>
 8000762:	e124      	b.n	80009ae <__aeabi_ddiv+0x57a>
 8000764:	9b05      	ldr	r3, [sp, #20]
 8000766:	469b      	mov	fp, r3
 8000768:	1b2c      	subs	r4, r5, r4
 800076a:	42a5      	cmp	r5, r4
 800076c:	41ad      	sbcs	r5, r5
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	1a80      	subs	r0, r0, r2
 8000772:	426d      	negs	r5, r5
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	4283      	cmp	r3, r0
 8000778:	d100      	bne.n	800077c <__aeabi_ddiv+0x348>
 800077a:	e10f      	b.n	800099c <__aeabi_ddiv+0x568>
 800077c:	9902      	ldr	r1, [sp, #8]
 800077e:	f7ff fd49 	bl	8000214 <__aeabi_uidivmod>
 8000782:	9a03      	ldr	r2, [sp, #12]
 8000784:	040b      	lsls	r3, r1, #16
 8000786:	4342      	muls	r2, r0
 8000788:	0c21      	lsrs	r1, r4, #16
 800078a:	0005      	movs	r5, r0
 800078c:	4319      	orrs	r1, r3
 800078e:	428a      	cmp	r2, r1
 8000790:	d900      	bls.n	8000794 <__aeabi_ddiv+0x360>
 8000792:	e0cb      	b.n	800092c <__aeabi_ddiv+0x4f8>
 8000794:	1a88      	subs	r0, r1, r2
 8000796:	9902      	ldr	r1, [sp, #8]
 8000798:	f7ff fd3c 	bl	8000214 <__aeabi_uidivmod>
 800079c:	9a03      	ldr	r2, [sp, #12]
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	4342      	muls	r2, r0
 80007a2:	0409      	lsls	r1, r1, #16
 80007a4:	0c24      	lsrs	r4, r4, #16
 80007a6:	0003      	movs	r3, r0
 80007a8:	430c      	orrs	r4, r1
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d900      	bls.n	80007b0 <__aeabi_ddiv+0x37c>
 80007ae:	e0ca      	b.n	8000946 <__aeabi_ddiv+0x512>
 80007b0:	4641      	mov	r1, r8
 80007b2:	1aa4      	subs	r4, r4, r2
 80007b4:	042a      	lsls	r2, r5, #16
 80007b6:	431a      	orrs	r2, r3
 80007b8:	9f04      	ldr	r7, [sp, #16]
 80007ba:	0413      	lsls	r3, r2, #16
 80007bc:	0c1b      	lsrs	r3, r3, #16
 80007be:	4359      	muls	r1, r3
 80007c0:	4640      	mov	r0, r8
 80007c2:	437b      	muls	r3, r7
 80007c4:	469c      	mov	ip, r3
 80007c6:	0c15      	lsrs	r5, r2, #16
 80007c8:	4368      	muls	r0, r5
 80007ca:	0c0b      	lsrs	r3, r1, #16
 80007cc:	4484      	add	ip, r0
 80007ce:	4463      	add	r3, ip
 80007d0:	437d      	muls	r5, r7
 80007d2:	4298      	cmp	r0, r3
 80007d4:	d903      	bls.n	80007de <__aeabi_ddiv+0x3aa>
 80007d6:	2080      	movs	r0, #128	@ 0x80
 80007d8:	0240      	lsls	r0, r0, #9
 80007da:	4684      	mov	ip, r0
 80007dc:	4465      	add	r5, ip
 80007de:	0c18      	lsrs	r0, r3, #16
 80007e0:	0409      	lsls	r1, r1, #16
 80007e2:	041b      	lsls	r3, r3, #16
 80007e4:	0c09      	lsrs	r1, r1, #16
 80007e6:	1940      	adds	r0, r0, r5
 80007e8:	185b      	adds	r3, r3, r1
 80007ea:	4284      	cmp	r4, r0
 80007ec:	d327      	bcc.n	800083e <__aeabi_ddiv+0x40a>
 80007ee:	d023      	beq.n	8000838 <__aeabi_ddiv+0x404>
 80007f0:	2301      	movs	r3, #1
 80007f2:	0035      	movs	r5, r6
 80007f4:	431a      	orrs	r2, r3
 80007f6:	4b94      	ldr	r3, [pc, #592]	@ (8000a48 <__aeabi_ddiv+0x614>)
 80007f8:	4453      	add	r3, sl
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dd60      	ble.n	80008c0 <__aeabi_ddiv+0x48c>
 80007fe:	0751      	lsls	r1, r2, #29
 8000800:	d000      	beq.n	8000804 <__aeabi_ddiv+0x3d0>
 8000802:	e086      	b.n	8000912 <__aeabi_ddiv+0x4de>
 8000804:	002e      	movs	r6, r5
 8000806:	08d1      	lsrs	r1, r2, #3
 8000808:	465a      	mov	r2, fp
 800080a:	01d2      	lsls	r2, r2, #7
 800080c:	d506      	bpl.n	800081c <__aeabi_ddiv+0x3e8>
 800080e:	465a      	mov	r2, fp
 8000810:	4b8e      	ldr	r3, [pc, #568]	@ (8000a4c <__aeabi_ddiv+0x618>)
 8000812:	401a      	ands	r2, r3
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	4693      	mov	fp, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	4453      	add	r3, sl
 800081c:	4a8c      	ldr	r2, [pc, #560]	@ (8000a50 <__aeabi_ddiv+0x61c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	dd00      	ble.n	8000824 <__aeabi_ddiv+0x3f0>
 8000822:	e680      	b.n	8000526 <__aeabi_ddiv+0xf2>
 8000824:	465a      	mov	r2, fp
 8000826:	0752      	lsls	r2, r2, #29
 8000828:	430a      	orrs	r2, r1
 800082a:	4690      	mov	r8, r2
 800082c:	465a      	mov	r2, fp
 800082e:	055b      	lsls	r3, r3, #21
 8000830:	0254      	lsls	r4, r2, #9
 8000832:	0b24      	lsrs	r4, r4, #12
 8000834:	0d5b      	lsrs	r3, r3, #21
 8000836:	e669      	b.n	800050c <__aeabi_ddiv+0xd8>
 8000838:	0035      	movs	r5, r6
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0db      	beq.n	80007f6 <__aeabi_ddiv+0x3c2>
 800083e:	9d00      	ldr	r5, [sp, #0]
 8000840:	1e51      	subs	r1, r2, #1
 8000842:	46ac      	mov	ip, r5
 8000844:	4464      	add	r4, ip
 8000846:	42ac      	cmp	r4, r5
 8000848:	d200      	bcs.n	800084c <__aeabi_ddiv+0x418>
 800084a:	e09e      	b.n	800098a <__aeabi_ddiv+0x556>
 800084c:	4284      	cmp	r4, r0
 800084e:	d200      	bcs.n	8000852 <__aeabi_ddiv+0x41e>
 8000850:	e0e1      	b.n	8000a16 <__aeabi_ddiv+0x5e2>
 8000852:	d100      	bne.n	8000856 <__aeabi_ddiv+0x422>
 8000854:	e0ee      	b.n	8000a34 <__aeabi_ddiv+0x600>
 8000856:	000a      	movs	r2, r1
 8000858:	e7ca      	b.n	80007f0 <__aeabi_ddiv+0x3bc>
 800085a:	4542      	cmp	r2, r8
 800085c:	d900      	bls.n	8000860 <__aeabi_ddiv+0x42c>
 800085e:	e708      	b.n	8000672 <__aeabi_ddiv+0x23e>
 8000860:	464b      	mov	r3, r9
 8000862:	07dc      	lsls	r4, r3, #31
 8000864:	0858      	lsrs	r0, r3, #1
 8000866:	4643      	mov	r3, r8
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	431c      	orrs	r4, r3
 800086c:	4643      	mov	r3, r8
 800086e:	07dd      	lsls	r5, r3, #31
 8000870:	e706      	b.n	8000680 <__aeabi_ddiv+0x24c>
 8000872:	f001 f885 	bl	8001980 <__clzsi2>
 8000876:	2315      	movs	r3, #21
 8000878:	469c      	mov	ip, r3
 800087a:	4484      	add	ip, r0
 800087c:	0002      	movs	r2, r0
 800087e:	4663      	mov	r3, ip
 8000880:	3220      	adds	r2, #32
 8000882:	2b1c      	cmp	r3, #28
 8000884:	dc00      	bgt.n	8000888 <__aeabi_ddiv+0x454>
 8000886:	e692      	b.n	80005ae <__aeabi_ddiv+0x17a>
 8000888:	0023      	movs	r3, r4
 800088a:	3808      	subs	r0, #8
 800088c:	4083      	lsls	r3, r0
 800088e:	4699      	mov	r9, r3
 8000890:	2300      	movs	r3, #0
 8000892:	4698      	mov	r8, r3
 8000894:	e69a      	b.n	80005cc <__aeabi_ddiv+0x198>
 8000896:	f001 f873 	bl	8001980 <__clzsi2>
 800089a:	0002      	movs	r2, r0
 800089c:	0003      	movs	r3, r0
 800089e:	3215      	adds	r2, #21
 80008a0:	3320      	adds	r3, #32
 80008a2:	2a1c      	cmp	r2, #28
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_ddiv+0x474>
 80008a6:	e65f      	b.n	8000568 <__aeabi_ddiv+0x134>
 80008a8:	9900      	ldr	r1, [sp, #0]
 80008aa:	3808      	subs	r0, #8
 80008ac:	4081      	lsls	r1, r0
 80008ae:	2200      	movs	r2, #0
 80008b0:	468b      	mov	fp, r1
 80008b2:	e666      	b.n	8000582 <__aeabi_ddiv+0x14e>
 80008b4:	2200      	movs	r2, #0
 80008b6:	002e      	movs	r6, r5
 80008b8:	2400      	movs	r4, #0
 80008ba:	4690      	mov	r8, r2
 80008bc:	4b65      	ldr	r3, [pc, #404]	@ (8000a54 <__aeabi_ddiv+0x620>)
 80008be:	e625      	b.n	800050c <__aeabi_ddiv+0xd8>
 80008c0:	002e      	movs	r6, r5
 80008c2:	2101      	movs	r1, #1
 80008c4:	1ac9      	subs	r1, r1, r3
 80008c6:	2938      	cmp	r1, #56	@ 0x38
 80008c8:	dd00      	ble.n	80008cc <__aeabi_ddiv+0x498>
 80008ca:	e61b      	b.n	8000504 <__aeabi_ddiv+0xd0>
 80008cc:	291f      	cmp	r1, #31
 80008ce:	dc7e      	bgt.n	80009ce <__aeabi_ddiv+0x59a>
 80008d0:	4861      	ldr	r0, [pc, #388]	@ (8000a58 <__aeabi_ddiv+0x624>)
 80008d2:	0014      	movs	r4, r2
 80008d4:	4450      	add	r0, sl
 80008d6:	465b      	mov	r3, fp
 80008d8:	4082      	lsls	r2, r0
 80008da:	4083      	lsls	r3, r0
 80008dc:	40cc      	lsrs	r4, r1
 80008de:	1e50      	subs	r0, r2, #1
 80008e0:	4182      	sbcs	r2, r0
 80008e2:	4323      	orrs	r3, r4
 80008e4:	431a      	orrs	r2, r3
 80008e6:	465b      	mov	r3, fp
 80008e8:	40cb      	lsrs	r3, r1
 80008ea:	0751      	lsls	r1, r2, #29
 80008ec:	d009      	beq.n	8000902 <__aeabi_ddiv+0x4ce>
 80008ee:	210f      	movs	r1, #15
 80008f0:	4011      	ands	r1, r2
 80008f2:	2904      	cmp	r1, #4
 80008f4:	d005      	beq.n	8000902 <__aeabi_ddiv+0x4ce>
 80008f6:	1d11      	adds	r1, r2, #4
 80008f8:	4291      	cmp	r1, r2
 80008fa:	4192      	sbcs	r2, r2
 80008fc:	4252      	negs	r2, r2
 80008fe:	189b      	adds	r3, r3, r2
 8000900:	000a      	movs	r2, r1
 8000902:	0219      	lsls	r1, r3, #8
 8000904:	d400      	bmi.n	8000908 <__aeabi_ddiv+0x4d4>
 8000906:	e09b      	b.n	8000a40 <__aeabi_ddiv+0x60c>
 8000908:	2200      	movs	r2, #0
 800090a:	2301      	movs	r3, #1
 800090c:	2400      	movs	r4, #0
 800090e:	4690      	mov	r8, r2
 8000910:	e5fc      	b.n	800050c <__aeabi_ddiv+0xd8>
 8000912:	210f      	movs	r1, #15
 8000914:	4011      	ands	r1, r2
 8000916:	2904      	cmp	r1, #4
 8000918:	d100      	bne.n	800091c <__aeabi_ddiv+0x4e8>
 800091a:	e773      	b.n	8000804 <__aeabi_ddiv+0x3d0>
 800091c:	1d11      	adds	r1, r2, #4
 800091e:	4291      	cmp	r1, r2
 8000920:	4192      	sbcs	r2, r2
 8000922:	4252      	negs	r2, r2
 8000924:	002e      	movs	r6, r5
 8000926:	08c9      	lsrs	r1, r1, #3
 8000928:	4493      	add	fp, r2
 800092a:	e76d      	b.n	8000808 <__aeabi_ddiv+0x3d4>
 800092c:	9b00      	ldr	r3, [sp, #0]
 800092e:	3d01      	subs	r5, #1
 8000930:	469c      	mov	ip, r3
 8000932:	4461      	add	r1, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d900      	bls.n	800093a <__aeabi_ddiv+0x506>
 8000938:	e72c      	b.n	8000794 <__aeabi_ddiv+0x360>
 800093a:	428a      	cmp	r2, r1
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x50c>
 800093e:	e729      	b.n	8000794 <__aeabi_ddiv+0x360>
 8000940:	1e85      	subs	r5, r0, #2
 8000942:	4461      	add	r1, ip
 8000944:	e726      	b.n	8000794 <__aeabi_ddiv+0x360>
 8000946:	9900      	ldr	r1, [sp, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	468c      	mov	ip, r1
 800094c:	4464      	add	r4, ip
 800094e:	42a1      	cmp	r1, r4
 8000950:	d900      	bls.n	8000954 <__aeabi_ddiv+0x520>
 8000952:	e72d      	b.n	80007b0 <__aeabi_ddiv+0x37c>
 8000954:	42a2      	cmp	r2, r4
 8000956:	d800      	bhi.n	800095a <__aeabi_ddiv+0x526>
 8000958:	e72a      	b.n	80007b0 <__aeabi_ddiv+0x37c>
 800095a:	1e83      	subs	r3, r0, #2
 800095c:	4464      	add	r4, ip
 800095e:	e727      	b.n	80007b0 <__aeabi_ddiv+0x37c>
 8000960:	4287      	cmp	r7, r0
 8000962:	d000      	beq.n	8000966 <__aeabi_ddiv+0x532>
 8000964:	e6fe      	b.n	8000764 <__aeabi_ddiv+0x330>
 8000966:	45a9      	cmp	r9, r5
 8000968:	d900      	bls.n	800096c <__aeabi_ddiv+0x538>
 800096a:	e6fb      	b.n	8000764 <__aeabi_ddiv+0x330>
 800096c:	e6f5      	b.n	800075a <__aeabi_ddiv+0x326>
 800096e:	42a2      	cmp	r2, r4
 8000970:	d800      	bhi.n	8000974 <__aeabi_ddiv+0x540>
 8000972:	e6b9      	b.n	80006e8 <__aeabi_ddiv+0x2b4>
 8000974:	1e83      	subs	r3, r0, #2
 8000976:	4464      	add	r4, ip
 8000978:	e6b6      	b.n	80006e8 <__aeabi_ddiv+0x2b4>
 800097a:	428a      	cmp	r2, r1
 800097c:	d800      	bhi.n	8000980 <__aeabi_ddiv+0x54c>
 800097e:	e69f      	b.n	80006c0 <__aeabi_ddiv+0x28c>
 8000980:	46bc      	mov	ip, r7
 8000982:	1e83      	subs	r3, r0, #2
 8000984:	4698      	mov	r8, r3
 8000986:	4461      	add	r1, ip
 8000988:	e69a      	b.n	80006c0 <__aeabi_ddiv+0x28c>
 800098a:	000a      	movs	r2, r1
 800098c:	4284      	cmp	r4, r0
 800098e:	d000      	beq.n	8000992 <__aeabi_ddiv+0x55e>
 8000990:	e72e      	b.n	80007f0 <__aeabi_ddiv+0x3bc>
 8000992:	454b      	cmp	r3, r9
 8000994:	d000      	beq.n	8000998 <__aeabi_ddiv+0x564>
 8000996:	e72b      	b.n	80007f0 <__aeabi_ddiv+0x3bc>
 8000998:	0035      	movs	r5, r6
 800099a:	e72c      	b.n	80007f6 <__aeabi_ddiv+0x3c2>
 800099c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <__aeabi_ddiv+0x614>)
 800099e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <__aeabi_ddiv+0x628>)
 80009a0:	4453      	add	r3, sl
 80009a2:	4592      	cmp	sl, r2
 80009a4:	db43      	blt.n	8000a2e <__aeabi_ddiv+0x5fa>
 80009a6:	2201      	movs	r2, #1
 80009a8:	2100      	movs	r1, #0
 80009aa:	4493      	add	fp, r2
 80009ac:	e72c      	b.n	8000808 <__aeabi_ddiv+0x3d4>
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	d800      	bhi.n	80009b4 <__aeabi_ddiv+0x580>
 80009b2:	e6d7      	b.n	8000764 <__aeabi_ddiv+0x330>
 80009b4:	2302      	movs	r3, #2
 80009b6:	425b      	negs	r3, r3
 80009b8:	469c      	mov	ip, r3
 80009ba:	9900      	ldr	r1, [sp, #0]
 80009bc:	444d      	add	r5, r9
 80009be:	454d      	cmp	r5, r9
 80009c0:	419b      	sbcs	r3, r3
 80009c2:	44e3      	add	fp, ip
 80009c4:	468c      	mov	ip, r1
 80009c6:	425b      	negs	r3, r3
 80009c8:	4463      	add	r3, ip
 80009ca:	18c0      	adds	r0, r0, r3
 80009cc:	e6cc      	b.n	8000768 <__aeabi_ddiv+0x334>
 80009ce:	201f      	movs	r0, #31
 80009d0:	4240      	negs	r0, r0
 80009d2:	1ac3      	subs	r3, r0, r3
 80009d4:	4658      	mov	r0, fp
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	2920      	cmp	r1, #32
 80009da:	d004      	beq.n	80009e6 <__aeabi_ddiv+0x5b2>
 80009dc:	4659      	mov	r1, fp
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <__aeabi_ddiv+0x62c>)
 80009e0:	4453      	add	r3, sl
 80009e2:	4099      	lsls	r1, r3
 80009e4:	430a      	orrs	r2, r1
 80009e6:	1e53      	subs	r3, r2, #1
 80009e8:	419a      	sbcs	r2, r3
 80009ea:	2307      	movs	r3, #7
 80009ec:	0019      	movs	r1, r3
 80009ee:	4302      	orrs	r2, r0
 80009f0:	2400      	movs	r4, #0
 80009f2:	4011      	ands	r1, r2
 80009f4:	4213      	tst	r3, r2
 80009f6:	d009      	beq.n	8000a0c <__aeabi_ddiv+0x5d8>
 80009f8:	3308      	adds	r3, #8
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d01d      	beq.n	8000a3c <__aeabi_ddiv+0x608>
 8000a00:	1d13      	adds	r3, r2, #4
 8000a02:	4293      	cmp	r3, r2
 8000a04:	4189      	sbcs	r1, r1
 8000a06:	001a      	movs	r2, r3
 8000a08:	4249      	negs	r1, r1
 8000a0a:	0749      	lsls	r1, r1, #29
 8000a0c:	08d2      	lsrs	r2, r2, #3
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	4690      	mov	r8, r2
 8000a12:	2300      	movs	r3, #0
 8000a14:	e57a      	b.n	800050c <__aeabi_ddiv+0xd8>
 8000a16:	4649      	mov	r1, r9
 8000a18:	9f00      	ldr	r7, [sp, #0]
 8000a1a:	004d      	lsls	r5, r1, #1
 8000a1c:	454d      	cmp	r5, r9
 8000a1e:	4189      	sbcs	r1, r1
 8000a20:	46bc      	mov	ip, r7
 8000a22:	4249      	negs	r1, r1
 8000a24:	4461      	add	r1, ip
 8000a26:	46a9      	mov	r9, r5
 8000a28:	3a02      	subs	r2, #2
 8000a2a:	1864      	adds	r4, r4, r1
 8000a2c:	e7ae      	b.n	800098c <__aeabi_ddiv+0x558>
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4252      	negs	r2, r2
 8000a32:	e746      	b.n	80008c2 <__aeabi_ddiv+0x48e>
 8000a34:	4599      	cmp	r9, r3
 8000a36:	d3ee      	bcc.n	8000a16 <__aeabi_ddiv+0x5e2>
 8000a38:	000a      	movs	r2, r1
 8000a3a:	e7aa      	b.n	8000992 <__aeabi_ddiv+0x55e>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e7e5      	b.n	8000a0c <__aeabi_ddiv+0x5d8>
 8000a40:	0759      	lsls	r1, r3, #29
 8000a42:	025b      	lsls	r3, r3, #9
 8000a44:	0b1c      	lsrs	r4, r3, #12
 8000a46:	e7e1      	b.n	8000a0c <__aeabi_ddiv+0x5d8>
 8000a48:	000003ff 	.word	0x000003ff
 8000a4c:	feffffff 	.word	0xfeffffff
 8000a50:	000007fe 	.word	0x000007fe
 8000a54:	000007ff 	.word	0x000007ff
 8000a58:	0000041e 	.word	0x0000041e
 8000a5c:	fffffc02 	.word	0xfffffc02
 8000a60:	0000043e 	.word	0x0000043e

08000a64 <__aeabi_dmul>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	4657      	mov	r7, sl
 8000a68:	464e      	mov	r6, r9
 8000a6a:	46de      	mov	lr, fp
 8000a6c:	4645      	mov	r5, r8
 8000a6e:	b5e0      	push	{r5, r6, r7, lr}
 8000a70:	001f      	movs	r7, r3
 8000a72:	030b      	lsls	r3, r1, #12
 8000a74:	0b1b      	lsrs	r3, r3, #12
 8000a76:	0016      	movs	r6, r2
 8000a78:	469a      	mov	sl, r3
 8000a7a:	0fca      	lsrs	r2, r1, #31
 8000a7c:	004b      	lsls	r3, r1, #1
 8000a7e:	0004      	movs	r4, r0
 8000a80:	4691      	mov	r9, r2
 8000a82:	b085      	sub	sp, #20
 8000a84:	0d5b      	lsrs	r3, r3, #21
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dmul+0x26>
 8000a88:	e1cf      	b.n	8000e2a <__aeabi_dmul+0x3c6>
 8000a8a:	4acd      	ldr	r2, [pc, #820]	@ (8000dc0 <__aeabi_dmul+0x35c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d055      	beq.n	8000b3c <__aeabi_dmul+0xd8>
 8000a90:	4651      	mov	r1, sl
 8000a92:	0f42      	lsrs	r2, r0, #29
 8000a94:	00c9      	lsls	r1, r1, #3
 8000a96:	430a      	orrs	r2, r1
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	4311      	orrs	r1, r2
 8000a9e:	00c2      	lsls	r2, r0, #3
 8000aa0:	4690      	mov	r8, r2
 8000aa2:	4ac8      	ldr	r2, [pc, #800]	@ (8000dc4 <__aeabi_dmul+0x360>)
 8000aa4:	468a      	mov	sl, r1
 8000aa6:	4693      	mov	fp, r2
 8000aa8:	449b      	add	fp, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2500      	movs	r5, #0
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	033c      	lsls	r4, r7, #12
 8000ab2:	007b      	lsls	r3, r7, #1
 8000ab4:	0ffa      	lsrs	r2, r7, #31
 8000ab6:	9601      	str	r6, [sp, #4]
 8000ab8:	0b24      	lsrs	r4, r4, #12
 8000aba:	0d5b      	lsrs	r3, r3, #21
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dmul+0x5e>
 8000ac0:	e188      	b.n	8000dd4 <__aeabi_dmul+0x370>
 8000ac2:	4abf      	ldr	r2, [pc, #764]	@ (8000dc0 <__aeabi_dmul+0x35c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dmul+0x66>
 8000ac8:	e092      	b.n	8000bf0 <__aeabi_dmul+0x18c>
 8000aca:	4abe      	ldr	r2, [pc, #760]	@ (8000dc4 <__aeabi_dmul+0x360>)
 8000acc:	4694      	mov	ip, r2
 8000ace:	4463      	add	r3, ip
 8000ad0:	449b      	add	fp, r3
 8000ad2:	2d0a      	cmp	r5, #10
 8000ad4:	dc42      	bgt.n	8000b5c <__aeabi_dmul+0xf8>
 8000ad6:	00e4      	lsls	r4, r4, #3
 8000ad8:	0f73      	lsrs	r3, r6, #29
 8000ada:	4323      	orrs	r3, r4
 8000adc:	2480      	movs	r4, #128	@ 0x80
 8000ade:	4649      	mov	r1, r9
 8000ae0:	0424      	lsls	r4, r4, #16
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	00f3      	lsls	r3, r6, #3
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9b00      	ldr	r3, [sp, #0]
 8000aea:	2000      	movs	r0, #0
 8000aec:	4059      	eors	r1, r3
 8000aee:	b2cb      	uxtb	r3, r1
 8000af0:	9303      	str	r3, [sp, #12]
 8000af2:	2d02      	cmp	r5, #2
 8000af4:	dc00      	bgt.n	8000af8 <__aeabi_dmul+0x94>
 8000af6:	e094      	b.n	8000c22 <__aeabi_dmul+0x1be>
 8000af8:	2301      	movs	r3, #1
 8000afa:	40ab      	lsls	r3, r5
 8000afc:	001d      	movs	r5, r3
 8000afe:	23a6      	movs	r3, #166	@ 0xa6
 8000b00:	002a      	movs	r2, r5
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	401a      	ands	r2, r3
 8000b06:	421d      	tst	r5, r3
 8000b08:	d000      	beq.n	8000b0c <__aeabi_dmul+0xa8>
 8000b0a:	e229      	b.n	8000f60 <__aeabi_dmul+0x4fc>
 8000b0c:	2390      	movs	r3, #144	@ 0x90
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	421d      	tst	r5, r3
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dmul+0xb2>
 8000b14:	e24d      	b.n	8000fb2 <__aeabi_dmul+0x54e>
 8000b16:	2300      	movs	r3, #0
 8000b18:	2480      	movs	r4, #128	@ 0x80
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	0324      	lsls	r4, r4, #12
 8000b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8000dc0 <__aeabi_dmul+0x35c>)
 8000b20:	0010      	movs	r0, r2
 8000b22:	464a      	mov	r2, r9
 8000b24:	051b      	lsls	r3, r3, #20
 8000b26:	4323      	orrs	r3, r4
 8000b28:	07d2      	lsls	r2, r2, #31
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	b005      	add	sp, #20
 8000b30:	bcf0      	pop	{r4, r5, r6, r7}
 8000b32:	46bb      	mov	fp, r7
 8000b34:	46b2      	mov	sl, r6
 8000b36:	46a9      	mov	r9, r5
 8000b38:	46a0      	mov	r8, r4
 8000b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3c:	4652      	mov	r2, sl
 8000b3e:	4302      	orrs	r2, r0
 8000b40:	4690      	mov	r8, r2
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dmul+0xe2>
 8000b44:	e1ac      	b.n	8000ea0 <__aeabi_dmul+0x43c>
 8000b46:	469b      	mov	fp, r3
 8000b48:	2302      	movs	r3, #2
 8000b4a:	4692      	mov	sl, r2
 8000b4c:	2508      	movs	r5, #8
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	e7ae      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000b52:	9b00      	ldr	r3, [sp, #0]
 8000b54:	46a2      	mov	sl, r4
 8000b56:	4699      	mov	r9, r3
 8000b58:	9b01      	ldr	r3, [sp, #4]
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	9b02      	ldr	r3, [sp, #8]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dmul+0x100>
 8000b62:	e1ca      	b.n	8000efa <__aeabi_dmul+0x496>
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dmul+0x106>
 8000b68:	e192      	b.n	8000e90 <__aeabi_dmul+0x42c>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d110      	bne.n	8000b90 <__aeabi_dmul+0x12c>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2400      	movs	r4, #0
 8000b72:	2200      	movs	r2, #0
 8000b74:	e7d4      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8000b76:	2201      	movs	r2, #1
 8000b78:	087b      	lsrs	r3, r7, #1
 8000b7a:	403a      	ands	r2, r7
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	4652      	mov	r2, sl
 8000b80:	07d2      	lsls	r2, r2, #31
 8000b82:	4313      	orrs	r3, r2
 8000b84:	4698      	mov	r8, r3
 8000b86:	4653      	mov	r3, sl
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	9b03      	ldr	r3, [sp, #12]
 8000b8e:	4699      	mov	r9, r3
 8000b90:	465b      	mov	r3, fp
 8000b92:	1c58      	adds	r0, r3, #1
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	445b      	add	r3, fp
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dc00      	bgt.n	8000ba0 <__aeabi_dmul+0x13c>
 8000b9e:	e1b1      	b.n	8000f04 <__aeabi_dmul+0x4a0>
 8000ba0:	4642      	mov	r2, r8
 8000ba2:	0752      	lsls	r2, r2, #29
 8000ba4:	d00b      	beq.n	8000bbe <__aeabi_dmul+0x15a>
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	4641      	mov	r1, r8
 8000baa:	400a      	ands	r2, r1
 8000bac:	2a04      	cmp	r2, #4
 8000bae:	d006      	beq.n	8000bbe <__aeabi_dmul+0x15a>
 8000bb0:	4642      	mov	r2, r8
 8000bb2:	1d11      	adds	r1, r2, #4
 8000bb4:	4541      	cmp	r1, r8
 8000bb6:	4192      	sbcs	r2, r2
 8000bb8:	4688      	mov	r8, r1
 8000bba:	4252      	negs	r2, r2
 8000bbc:	4492      	add	sl, r2
 8000bbe:	4652      	mov	r2, sl
 8000bc0:	01d2      	lsls	r2, r2, #7
 8000bc2:	d506      	bpl.n	8000bd2 <__aeabi_dmul+0x16e>
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	4b80      	ldr	r3, [pc, #512]	@ (8000dc8 <__aeabi_dmul+0x364>)
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	4692      	mov	sl, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	18c3      	adds	r3, r0, r3
 8000bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8000dcc <__aeabi_dmul+0x368>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dmul+0x176>
 8000bd8:	e18f      	b.n	8000efa <__aeabi_dmul+0x496>
 8000bda:	4642      	mov	r2, r8
 8000bdc:	08d1      	lsrs	r1, r2, #3
 8000bde:	4652      	mov	r2, sl
 8000be0:	0752      	lsls	r2, r2, #29
 8000be2:	430a      	orrs	r2, r1
 8000be4:	4651      	mov	r1, sl
 8000be6:	055b      	lsls	r3, r3, #21
 8000be8:	024c      	lsls	r4, r1, #9
 8000bea:	0b24      	lsrs	r4, r4, #12
 8000bec:	0d5b      	lsrs	r3, r3, #21
 8000bee:	e797      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8000bf0:	4b73      	ldr	r3, [pc, #460]	@ (8000dc0 <__aeabi_dmul+0x35c>)
 8000bf2:	4326      	orrs	r6, r4
 8000bf4:	469c      	mov	ip, r3
 8000bf6:	44e3      	add	fp, ip
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dmul+0x19a>
 8000bfc:	e16f      	b.n	8000ede <__aeabi_dmul+0x47a>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	4649      	mov	r1, r9
 8000c02:	431d      	orrs	r5, r3
 8000c04:	9b00      	ldr	r3, [sp, #0]
 8000c06:	4059      	eors	r1, r3
 8000c08:	b2cb      	uxtb	r3, r1
 8000c0a:	9303      	str	r3, [sp, #12]
 8000c0c:	2d0a      	cmp	r5, #10
 8000c0e:	dd00      	ble.n	8000c12 <__aeabi_dmul+0x1ae>
 8000c10:	e133      	b.n	8000e7a <__aeabi_dmul+0x416>
 8000c12:	2301      	movs	r3, #1
 8000c14:	40ab      	lsls	r3, r5
 8000c16:	001d      	movs	r5, r3
 8000c18:	2303      	movs	r3, #3
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2288      	movs	r2, #136	@ 0x88
 8000c1e:	422a      	tst	r2, r5
 8000c20:	d197      	bne.n	8000b52 <__aeabi_dmul+0xee>
 8000c22:	4642      	mov	r2, r8
 8000c24:	4643      	mov	r3, r8
 8000c26:	0412      	lsls	r2, r2, #16
 8000c28:	0c12      	lsrs	r2, r2, #16
 8000c2a:	0016      	movs	r6, r2
 8000c2c:	9801      	ldr	r0, [sp, #4]
 8000c2e:	0c1d      	lsrs	r5, r3, #16
 8000c30:	0c03      	lsrs	r3, r0, #16
 8000c32:	0400      	lsls	r0, r0, #16
 8000c34:	0c00      	lsrs	r0, r0, #16
 8000c36:	4346      	muls	r6, r0
 8000c38:	46b4      	mov	ip, r6
 8000c3a:	001e      	movs	r6, r3
 8000c3c:	436e      	muls	r6, r5
 8000c3e:	9600      	str	r6, [sp, #0]
 8000c40:	0016      	movs	r6, r2
 8000c42:	0007      	movs	r7, r0
 8000c44:	435e      	muls	r6, r3
 8000c46:	4661      	mov	r1, ip
 8000c48:	46b0      	mov	r8, r6
 8000c4a:	436f      	muls	r7, r5
 8000c4c:	0c0e      	lsrs	r6, r1, #16
 8000c4e:	44b8      	add	r8, r7
 8000c50:	4446      	add	r6, r8
 8000c52:	42b7      	cmp	r7, r6
 8000c54:	d905      	bls.n	8000c62 <__aeabi_dmul+0x1fe>
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	0249      	lsls	r1, r1, #9
 8000c5a:	4688      	mov	r8, r1
 8000c5c:	9f00      	ldr	r7, [sp, #0]
 8000c5e:	4447      	add	r7, r8
 8000c60:	9700      	str	r7, [sp, #0]
 8000c62:	4661      	mov	r1, ip
 8000c64:	0409      	lsls	r1, r1, #16
 8000c66:	0c09      	lsrs	r1, r1, #16
 8000c68:	0c37      	lsrs	r7, r6, #16
 8000c6a:	0436      	lsls	r6, r6, #16
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	0031      	movs	r1, r6
 8000c70:	4461      	add	r1, ip
 8000c72:	9101      	str	r1, [sp, #4]
 8000c74:	0011      	movs	r1, r2
 8000c76:	0c26      	lsrs	r6, r4, #16
 8000c78:	0424      	lsls	r4, r4, #16
 8000c7a:	0c24      	lsrs	r4, r4, #16
 8000c7c:	4361      	muls	r1, r4
 8000c7e:	468c      	mov	ip, r1
 8000c80:	0021      	movs	r1, r4
 8000c82:	4369      	muls	r1, r5
 8000c84:	4689      	mov	r9, r1
 8000c86:	4661      	mov	r1, ip
 8000c88:	0c09      	lsrs	r1, r1, #16
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	4372      	muls	r2, r6
 8000c8e:	444a      	add	r2, r9
 8000c90:	4442      	add	r2, r8
 8000c92:	4375      	muls	r5, r6
 8000c94:	4591      	cmp	r9, r2
 8000c96:	d903      	bls.n	8000ca0 <__aeabi_dmul+0x23c>
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0249      	lsls	r1, r1, #9
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4445      	add	r5, r8
 8000ca0:	0c11      	lsrs	r1, r2, #16
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	4661      	mov	r1, ip
 8000ca6:	0409      	lsls	r1, r1, #16
 8000ca8:	0c09      	lsrs	r1, r1, #16
 8000caa:	468c      	mov	ip, r1
 8000cac:	0412      	lsls	r2, r2, #16
 8000cae:	4462      	add	r2, ip
 8000cb0:	18b9      	adds	r1, r7, r2
 8000cb2:	9102      	str	r1, [sp, #8]
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	0c09      	lsrs	r1, r1, #16
 8000cb8:	468c      	mov	ip, r1
 8000cba:	4651      	mov	r1, sl
 8000cbc:	040f      	lsls	r7, r1, #16
 8000cbe:	0c3f      	lsrs	r7, r7, #16
 8000cc0:	0039      	movs	r1, r7
 8000cc2:	4341      	muls	r1, r0
 8000cc4:	4445      	add	r5, r8
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4661      	mov	r1, ip
 8000cca:	4341      	muls	r1, r0
 8000ccc:	468a      	mov	sl, r1
 8000cce:	4641      	mov	r1, r8
 8000cd0:	4660      	mov	r0, ip
 8000cd2:	0c09      	lsrs	r1, r1, #16
 8000cd4:	4689      	mov	r9, r1
 8000cd6:	4358      	muls	r0, r3
 8000cd8:	437b      	muls	r3, r7
 8000cda:	4453      	add	r3, sl
 8000cdc:	444b      	add	r3, r9
 8000cde:	459a      	cmp	sl, r3
 8000ce0:	d903      	bls.n	8000cea <__aeabi_dmul+0x286>
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	4689      	mov	r9, r1
 8000ce8:	4448      	add	r0, r9
 8000cea:	0c19      	lsrs	r1, r3, #16
 8000cec:	4689      	mov	r9, r1
 8000cee:	4641      	mov	r1, r8
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	4688      	mov	r8, r1
 8000cf6:	0039      	movs	r1, r7
 8000cf8:	4361      	muls	r1, r4
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	4443      	add	r3, r8
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4661      	mov	r1, ip
 8000d02:	434c      	muls	r4, r1
 8000d04:	4371      	muls	r1, r6
 8000d06:	468c      	mov	ip, r1
 8000d08:	4641      	mov	r1, r8
 8000d0a:	4377      	muls	r7, r6
 8000d0c:	0c0e      	lsrs	r6, r1, #16
 8000d0e:	193f      	adds	r7, r7, r4
 8000d10:	19f6      	adds	r6, r6, r7
 8000d12:	4448      	add	r0, r9
 8000d14:	42b4      	cmp	r4, r6
 8000d16:	d903      	bls.n	8000d20 <__aeabi_dmul+0x2bc>
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	0249      	lsls	r1, r1, #9
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	44cc      	add	ip, r9
 8000d20:	9902      	ldr	r1, [sp, #8]
 8000d22:	9f00      	ldr	r7, [sp, #0]
 8000d24:	4689      	mov	r9, r1
 8000d26:	0431      	lsls	r1, r6, #16
 8000d28:	444f      	add	r7, r9
 8000d2a:	4689      	mov	r9, r1
 8000d2c:	4641      	mov	r1, r8
 8000d2e:	4297      	cmp	r7, r2
 8000d30:	4192      	sbcs	r2, r2
 8000d32:	040c      	lsls	r4, r1, #16
 8000d34:	0c24      	lsrs	r4, r4, #16
 8000d36:	444c      	add	r4, r9
 8000d38:	18ff      	adds	r7, r7, r3
 8000d3a:	4252      	negs	r2, r2
 8000d3c:	1964      	adds	r4, r4, r5
 8000d3e:	18a1      	adds	r1, r4, r2
 8000d40:	429f      	cmp	r7, r3
 8000d42:	419b      	sbcs	r3, r3
 8000d44:	4688      	mov	r8, r1
 8000d46:	4682      	mov	sl, r0
 8000d48:	425b      	negs	r3, r3
 8000d4a:	4699      	mov	r9, r3
 8000d4c:	4590      	cmp	r8, r2
 8000d4e:	4192      	sbcs	r2, r2
 8000d50:	42ac      	cmp	r4, r5
 8000d52:	41a4      	sbcs	r4, r4
 8000d54:	44c2      	add	sl, r8
 8000d56:	44d1      	add	r9, sl
 8000d58:	4252      	negs	r2, r2
 8000d5a:	4264      	negs	r4, r4
 8000d5c:	4314      	orrs	r4, r2
 8000d5e:	4599      	cmp	r9, r3
 8000d60:	419b      	sbcs	r3, r3
 8000d62:	4582      	cmp	sl, r0
 8000d64:	4192      	sbcs	r2, r2
 8000d66:	425b      	negs	r3, r3
 8000d68:	4252      	negs	r2, r2
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	19a4      	adds	r4, r4, r6
 8000d72:	18e3      	adds	r3, r4, r3
 8000d74:	4463      	add	r3, ip
 8000d76:	025b      	lsls	r3, r3, #9
 8000d78:	0dd2      	lsrs	r2, r2, #23
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	4692      	mov	sl, r2
 8000d80:	027a      	lsls	r2, r7, #9
 8000d82:	430a      	orrs	r2, r1
 8000d84:	1e50      	subs	r0, r2, #1
 8000d86:	4182      	sbcs	r2, r0
 8000d88:	0dff      	lsrs	r7, r7, #23
 8000d8a:	4317      	orrs	r7, r2
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	0252      	lsls	r2, r2, #9
 8000d90:	4317      	orrs	r7, r2
 8000d92:	46b8      	mov	r8, r7
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	d500      	bpl.n	8000d9a <__aeabi_dmul+0x336>
 8000d98:	e6ed      	b.n	8000b76 <__aeabi_dmul+0x112>
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <__aeabi_dmul+0x36c>)
 8000d9c:	9a03      	ldr	r2, [sp, #12]
 8000d9e:	445b      	add	r3, fp
 8000da0:	4691      	mov	r9, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_dmul+0x344>
 8000da6:	e0ac      	b.n	8000f02 <__aeabi_dmul+0x49e>
 8000da8:	003a      	movs	r2, r7
 8000daa:	0752      	lsls	r2, r2, #29
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dmul+0x34c>
 8000dae:	e710      	b.n	8000bd2 <__aeabi_dmul+0x16e>
 8000db0:	220f      	movs	r2, #15
 8000db2:	4658      	mov	r0, fp
 8000db4:	403a      	ands	r2, r7
 8000db6:	2a04      	cmp	r2, #4
 8000db8:	d000      	beq.n	8000dbc <__aeabi_dmul+0x358>
 8000dba:	e6f9      	b.n	8000bb0 <__aeabi_dmul+0x14c>
 8000dbc:	e709      	b.n	8000bd2 <__aeabi_dmul+0x16e>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	feffffff 	.word	0xfeffffff
 8000dcc:	000007fe 	.word	0x000007fe
 8000dd0:	000003ff 	.word	0x000003ff
 8000dd4:	0022      	movs	r2, r4
 8000dd6:	4332      	orrs	r2, r6
 8000dd8:	d06f      	beq.n	8000eba <__aeabi_dmul+0x456>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dmul+0x37c>
 8000dde:	e0c2      	b.n	8000f66 <__aeabi_dmul+0x502>
 8000de0:	0020      	movs	r0, r4
 8000de2:	f000 fdcd 	bl	8001980 <__clzsi2>
 8000de6:	0002      	movs	r2, r0
 8000de8:	0003      	movs	r3, r0
 8000dea:	3a0b      	subs	r2, #11
 8000dec:	201d      	movs	r0, #29
 8000dee:	1a82      	subs	r2, r0, r2
 8000df0:	0030      	movs	r0, r6
 8000df2:	0019      	movs	r1, r3
 8000df4:	40d0      	lsrs	r0, r2
 8000df6:	3908      	subs	r1, #8
 8000df8:	408c      	lsls	r4, r1
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	4322      	orrs	r2, r4
 8000dfe:	0034      	movs	r4, r6
 8000e00:	408c      	lsls	r4, r1
 8000e02:	4659      	mov	r1, fp
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	4986      	ldr	r1, [pc, #536]	@ (8001020 <__aeabi_dmul+0x5bc>)
 8000e08:	468b      	mov	fp, r1
 8000e0a:	449b      	add	fp, r3
 8000e0c:	2d0a      	cmp	r5, #10
 8000e0e:	dd00      	ble.n	8000e12 <__aeabi_dmul+0x3ae>
 8000e10:	e6a4      	b.n	8000b5c <__aeabi_dmul+0xf8>
 8000e12:	4649      	mov	r1, r9
 8000e14:	9b00      	ldr	r3, [sp, #0]
 8000e16:	9401      	str	r4, [sp, #4]
 8000e18:	4059      	eors	r1, r3
 8000e1a:	b2cb      	uxtb	r3, r1
 8000e1c:	0014      	movs	r4, r2
 8000e1e:	2000      	movs	r0, #0
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	2d02      	cmp	r5, #2
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dmul+0x3c4>
 8000e26:	e667      	b.n	8000af8 <__aeabi_dmul+0x94>
 8000e28:	e6fb      	b.n	8000c22 <__aeabi_dmul+0x1be>
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	4303      	orrs	r3, r0
 8000e2e:	4698      	mov	r8, r3
 8000e30:	d03c      	beq.n	8000eac <__aeabi_dmul+0x448>
 8000e32:	4653      	mov	r3, sl
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dmul+0x3d6>
 8000e38:	e0a3      	b.n	8000f82 <__aeabi_dmul+0x51e>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	f000 fda0 	bl	8001980 <__clzsi2>
 8000e40:	230b      	movs	r3, #11
 8000e42:	425b      	negs	r3, r3
 8000e44:	469c      	mov	ip, r3
 8000e46:	0002      	movs	r2, r0
 8000e48:	4484      	add	ip, r0
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	4650      	mov	r0, sl
 8000e4e:	3908      	subs	r1, #8
 8000e50:	4088      	lsls	r0, r1
 8000e52:	231d      	movs	r3, #29
 8000e54:	4680      	mov	r8, r0
 8000e56:	4660      	mov	r0, ip
 8000e58:	1a1b      	subs	r3, r3, r0
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	40d8      	lsrs	r0, r3
 8000e5e:	0003      	movs	r3, r0
 8000e60:	4640      	mov	r0, r8
 8000e62:	4303      	orrs	r3, r0
 8000e64:	469a      	mov	sl, r3
 8000e66:	0023      	movs	r3, r4
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001020 <__aeabi_dmul+0x5bc>)
 8000e6e:	2500      	movs	r5, #0
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	469b      	mov	fp, r3
 8000e74:	2300      	movs	r3, #0
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	e61a      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000e7a:	2d0f      	cmp	r5, #15
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_dmul+0x41c>
 8000e7e:	e0c9      	b.n	8001014 <__aeabi_dmul+0x5b0>
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	4652      	mov	r2, sl
 8000e84:	031b      	lsls	r3, r3, #12
 8000e86:	421a      	tst	r2, r3
 8000e88:	d002      	beq.n	8000e90 <__aeabi_dmul+0x42c>
 8000e8a:	421c      	tst	r4, r3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dmul+0x42c>
 8000e8e:	e092      	b.n	8000fb6 <__aeabi_dmul+0x552>
 8000e90:	2480      	movs	r4, #128	@ 0x80
 8000e92:	4653      	mov	r3, sl
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	431c      	orrs	r4, r3
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	4642      	mov	r2, r8
 8000e9c:	0b24      	lsrs	r4, r4, #12
 8000e9e:	e63e      	b.n	8000b1e <__aeabi_dmul+0xba>
 8000ea0:	469b      	mov	fp, r3
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	4680      	mov	r8, r0
 8000ea6:	250c      	movs	r5, #12
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	e601      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000eac:	2300      	movs	r3, #0
 8000eae:	469a      	mov	sl, r3
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	2504      	movs	r5, #4
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	e5fa      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430d      	orrs	r5, r1
 8000ebe:	2d0a      	cmp	r5, #10
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dmul+0x460>
 8000ec2:	e64b      	b.n	8000b5c <__aeabi_dmul+0xf8>
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	9800      	ldr	r0, [sp, #0]
 8000ec8:	4041      	eors	r1, r0
 8000eca:	b2c9      	uxtb	r1, r1
 8000ecc:	9103      	str	r1, [sp, #12]
 8000ece:	2d02      	cmp	r5, #2
 8000ed0:	dc00      	bgt.n	8000ed4 <__aeabi_dmul+0x470>
 8000ed2:	e096      	b.n	8001002 <__aeabi_dmul+0x59e>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	2001      	movs	r0, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	e60c      	b.n	8000af8 <__aeabi_dmul+0x94>
 8000ede:	4649      	mov	r1, r9
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	9a00      	ldr	r2, [sp, #0]
 8000ee4:	432b      	orrs	r3, r5
 8000ee6:	4051      	eors	r1, r2
 8000ee8:	b2ca      	uxtb	r2, r1
 8000eea:	9203      	str	r2, [sp, #12]
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	dd00      	ble.n	8000ef2 <__aeabi_dmul+0x48e>
 8000ef0:	e634      	b.n	8000b5c <__aeabi_dmul+0xf8>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d157      	bne.n	8000fa6 <__aeabi_dmul+0x542>
 8000ef6:	9b03      	ldr	r3, [sp, #12]
 8000ef8:	4699      	mov	r9, r3
 8000efa:	2400      	movs	r4, #0
 8000efc:	2200      	movs	r2, #0
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <__aeabi_dmul+0x5c0>)
 8000f00:	e60e      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8000f02:	4658      	mov	r0, fp
 8000f04:	2101      	movs	r1, #1
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	2938      	cmp	r1, #56	@ 0x38
 8000f0a:	dd00      	ble.n	8000f0e <__aeabi_dmul+0x4aa>
 8000f0c:	e62f      	b.n	8000b6e <__aeabi_dmul+0x10a>
 8000f0e:	291f      	cmp	r1, #31
 8000f10:	dd56      	ble.n	8000fc0 <__aeabi_dmul+0x55c>
 8000f12:	221f      	movs	r2, #31
 8000f14:	4654      	mov	r4, sl
 8000f16:	4252      	negs	r2, r2
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	40dc      	lsrs	r4, r3
 8000f1c:	2920      	cmp	r1, #32
 8000f1e:	d007      	beq.n	8000f30 <__aeabi_dmul+0x4cc>
 8000f20:	4b41      	ldr	r3, [pc, #260]	@ (8001028 <__aeabi_dmul+0x5c4>)
 8000f22:	4642      	mov	r2, r8
 8000f24:	469c      	mov	ip, r3
 8000f26:	4653      	mov	r3, sl
 8000f28:	4460      	add	r0, ip
 8000f2a:	4083      	lsls	r3, r0
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	4690      	mov	r8, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	2107      	movs	r1, #7
 8000f34:	1e53      	subs	r3, r2, #1
 8000f36:	419a      	sbcs	r2, r3
 8000f38:	000b      	movs	r3, r1
 8000f3a:	4322      	orrs	r2, r4
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2400      	movs	r4, #0
 8000f40:	4211      	tst	r1, r2
 8000f42:	d009      	beq.n	8000f58 <__aeabi_dmul+0x4f4>
 8000f44:	230f      	movs	r3, #15
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d05d      	beq.n	8001008 <__aeabi_dmul+0x5a4>
 8000f4c:	1d11      	adds	r1, r2, #4
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	419b      	sbcs	r3, r3
 8000f52:	000a      	movs	r2, r1
 8000f54:	425b      	negs	r3, r3
 8000f56:	075b      	lsls	r3, r3, #29
 8000f58:	08d2      	lsrs	r2, r2, #3
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e5df      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8000f60:	9b03      	ldr	r3, [sp, #12]
 8000f62:	4699      	mov	r9, r3
 8000f64:	e5fa      	b.n	8000b5c <__aeabi_dmul+0xf8>
 8000f66:	9801      	ldr	r0, [sp, #4]
 8000f68:	f000 fd0a 	bl	8001980 <__clzsi2>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	0003      	movs	r3, r0
 8000f70:	3215      	adds	r2, #21
 8000f72:	3320      	adds	r3, #32
 8000f74:	2a1c      	cmp	r2, #28
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_dmul+0x516>
 8000f78:	e738      	b.n	8000dec <__aeabi_dmul+0x388>
 8000f7a:	9a01      	ldr	r2, [sp, #4]
 8000f7c:	3808      	subs	r0, #8
 8000f7e:	4082      	lsls	r2, r0
 8000f80:	e73f      	b.n	8000e02 <__aeabi_dmul+0x39e>
 8000f82:	f000 fcfd 	bl	8001980 <__clzsi2>
 8000f86:	2315      	movs	r3, #21
 8000f88:	469c      	mov	ip, r3
 8000f8a:	4484      	add	ip, r0
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	4663      	mov	r3, ip
 8000f90:	3220      	adds	r2, #32
 8000f92:	2b1c      	cmp	r3, #28
 8000f94:	dc00      	bgt.n	8000f98 <__aeabi_dmul+0x534>
 8000f96:	e758      	b.n	8000e4a <__aeabi_dmul+0x3e6>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	0023      	movs	r3, r4
 8000f9e:	3808      	subs	r0, #8
 8000fa0:	4083      	lsls	r3, r0
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	e762      	b.n	8000e6c <__aeabi_dmul+0x408>
 8000fa6:	001d      	movs	r5, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2400      	movs	r4, #0
 8000fac:	2002      	movs	r0, #2
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	e5a2      	b.n	8000af8 <__aeabi_dmul+0x94>
 8000fb2:	9002      	str	r0, [sp, #8]
 8000fb4:	e632      	b.n	8000c1c <__aeabi_dmul+0x1b8>
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	9b00      	ldr	r3, [sp, #0]
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	4699      	mov	r9, r3
 8000fbe:	e5ae      	b.n	8000b1e <__aeabi_dmul+0xba>
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <__aeabi_dmul+0x5c8>)
 8000fc2:	4652      	mov	r2, sl
 8000fc4:	18c3      	adds	r3, r0, r3
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	40c8      	lsrs	r0, r1
 8000fcc:	4302      	orrs	r2, r0
 8000fce:	4640      	mov	r0, r8
 8000fd0:	4098      	lsls	r0, r3
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	1e58      	subs	r0, r3, #1
 8000fd6:	4183      	sbcs	r3, r0
 8000fd8:	4654      	mov	r4, sl
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	40cc      	lsrs	r4, r1
 8000fde:	0753      	lsls	r3, r2, #29
 8000fe0:	d009      	beq.n	8000ff6 <__aeabi_dmul+0x592>
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d005      	beq.n	8000ff6 <__aeabi_dmul+0x592>
 8000fea:	1d13      	adds	r3, r2, #4
 8000fec:	4293      	cmp	r3, r2
 8000fee:	4192      	sbcs	r2, r2
 8000ff0:	4252      	negs	r2, r2
 8000ff2:	18a4      	adds	r4, r4, r2
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	0223      	lsls	r3, r4, #8
 8000ff8:	d508      	bpl.n	800100c <__aeabi_dmul+0x5a8>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	e58e      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8001002:	4689      	mov	r9, r1
 8001004:	2400      	movs	r4, #0
 8001006:	e58b      	b.n	8000b20 <__aeabi_dmul+0xbc>
 8001008:	2300      	movs	r3, #0
 800100a:	e7a5      	b.n	8000f58 <__aeabi_dmul+0x4f4>
 800100c:	0763      	lsls	r3, r4, #29
 800100e:	0264      	lsls	r4, r4, #9
 8001010:	0b24      	lsrs	r4, r4, #12
 8001012:	e7a1      	b.n	8000f58 <__aeabi_dmul+0x4f4>
 8001014:	9b00      	ldr	r3, [sp, #0]
 8001016:	46a2      	mov	sl, r4
 8001018:	4699      	mov	r9, r3
 800101a:	9b01      	ldr	r3, [sp, #4]
 800101c:	4698      	mov	r8, r3
 800101e:	e737      	b.n	8000e90 <__aeabi_dmul+0x42c>
 8001020:	fffffc0d 	.word	0xfffffc0d
 8001024:	000007ff 	.word	0x000007ff
 8001028:	0000043e 	.word	0x0000043e
 800102c:	0000041e 	.word	0x0000041e

08001030 <__aeabi_dsub>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	4657      	mov	r7, sl
 8001034:	464e      	mov	r6, r9
 8001036:	4645      	mov	r5, r8
 8001038:	46de      	mov	lr, fp
 800103a:	b5e0      	push	{r5, r6, r7, lr}
 800103c:	b083      	sub	sp, #12
 800103e:	9000      	str	r0, [sp, #0]
 8001040:	9101      	str	r1, [sp, #4]
 8001042:	030c      	lsls	r4, r1, #12
 8001044:	004d      	lsls	r5, r1, #1
 8001046:	0fce      	lsrs	r6, r1, #31
 8001048:	0a61      	lsrs	r1, r4, #9
 800104a:	9c00      	ldr	r4, [sp, #0]
 800104c:	005f      	lsls	r7, r3, #1
 800104e:	0f64      	lsrs	r4, r4, #29
 8001050:	430c      	orrs	r4, r1
 8001052:	9900      	ldr	r1, [sp, #0]
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	00c8      	lsls	r0, r1, #3
 800105a:	0319      	lsls	r1, r3, #12
 800105c:	0d7b      	lsrs	r3, r7, #21
 800105e:	4699      	mov	r9, r3
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	4fcc      	ldr	r7, [pc, #816]	@ (8001394 <__aeabi_dsub+0x364>)
 8001064:	0fdb      	lsrs	r3, r3, #31
 8001066:	469c      	mov	ip, r3
 8001068:	0a4b      	lsrs	r3, r1, #9
 800106a:	9900      	ldr	r1, [sp, #0]
 800106c:	4680      	mov	r8, r0
 800106e:	0f49      	lsrs	r1, r1, #29
 8001070:	4319      	orrs	r1, r3
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	468b      	mov	fp, r1
 8001076:	00da      	lsls	r2, r3, #3
 8001078:	4692      	mov	sl, r2
 800107a:	0d6d      	lsrs	r5, r5, #21
 800107c:	45b9      	cmp	r9, r7
 800107e:	d100      	bne.n	8001082 <__aeabi_dsub+0x52>
 8001080:	e0bf      	b.n	8001202 <__aeabi_dsub+0x1d2>
 8001082:	2301      	movs	r3, #1
 8001084:	4661      	mov	r1, ip
 8001086:	4059      	eors	r1, r3
 8001088:	464b      	mov	r3, r9
 800108a:	468c      	mov	ip, r1
 800108c:	1aeb      	subs	r3, r5, r3
 800108e:	428e      	cmp	r6, r1
 8001090:	d075      	beq.n	800117e <__aeabi_dsub+0x14e>
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc00      	bgt.n	8001098 <__aeabi_dsub+0x68>
 8001096:	e2a3      	b.n	80015e0 <__aeabi_dsub+0x5b0>
 8001098:	4649      	mov	r1, r9
 800109a:	2900      	cmp	r1, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_dsub+0x70>
 800109e:	e0ce      	b.n	800123e <__aeabi_dsub+0x20e>
 80010a0:	42bd      	cmp	r5, r7
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dsub+0x76>
 80010a4:	e200      	b.n	80014a8 <__aeabi_dsub+0x478>
 80010a6:	2701      	movs	r7, #1
 80010a8:	2b38      	cmp	r3, #56	@ 0x38
 80010aa:	dc19      	bgt.n	80010e0 <__aeabi_dsub+0xb0>
 80010ac:	2780      	movs	r7, #128	@ 0x80
 80010ae:	4659      	mov	r1, fp
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	4339      	orrs	r1, r7
 80010b4:	468b      	mov	fp, r1
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	dd00      	ble.n	80010bc <__aeabi_dsub+0x8c>
 80010ba:	e1fa      	b.n	80014b2 <__aeabi_dsub+0x482>
 80010bc:	2720      	movs	r7, #32
 80010be:	1af9      	subs	r1, r7, r3
 80010c0:	468c      	mov	ip, r1
 80010c2:	4659      	mov	r1, fp
 80010c4:	4667      	mov	r7, ip
 80010c6:	40b9      	lsls	r1, r7
 80010c8:	000f      	movs	r7, r1
 80010ca:	0011      	movs	r1, r2
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	430f      	orrs	r7, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	408a      	lsls	r2, r1
 80010d4:	1e51      	subs	r1, r2, #1
 80010d6:	418a      	sbcs	r2, r1
 80010d8:	4659      	mov	r1, fp
 80010da:	40d9      	lsrs	r1, r3
 80010dc:	4317      	orrs	r7, r2
 80010de:	1a64      	subs	r4, r4, r1
 80010e0:	1bc7      	subs	r7, r0, r7
 80010e2:	42b8      	cmp	r0, r7
 80010e4:	4180      	sbcs	r0, r0
 80010e6:	4240      	negs	r0, r0
 80010e8:	1a24      	subs	r4, r4, r0
 80010ea:	0223      	lsls	r3, r4, #8
 80010ec:	d400      	bmi.n	80010f0 <__aeabi_dsub+0xc0>
 80010ee:	e140      	b.n	8001372 <__aeabi_dsub+0x342>
 80010f0:	0264      	lsls	r4, r4, #9
 80010f2:	0a64      	lsrs	r4, r4, #9
 80010f4:	2c00      	cmp	r4, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_dsub+0xca>
 80010f8:	e154      	b.n	80013a4 <__aeabi_dsub+0x374>
 80010fa:	0020      	movs	r0, r4
 80010fc:	f000 fc40 	bl	8001980 <__clzsi2>
 8001100:	0003      	movs	r3, r0
 8001102:	3b08      	subs	r3, #8
 8001104:	2120      	movs	r1, #32
 8001106:	0038      	movs	r0, r7
 8001108:	1aca      	subs	r2, r1, r3
 800110a:	40d0      	lsrs	r0, r2
 800110c:	409c      	lsls	r4, r3
 800110e:	0002      	movs	r2, r0
 8001110:	409f      	lsls	r7, r3
 8001112:	4322      	orrs	r2, r4
 8001114:	429d      	cmp	r5, r3
 8001116:	dd00      	ble.n	800111a <__aeabi_dsub+0xea>
 8001118:	e1a6      	b.n	8001468 <__aeabi_dsub+0x438>
 800111a:	1b58      	subs	r0, r3, r5
 800111c:	3001      	adds	r0, #1
 800111e:	1a09      	subs	r1, r1, r0
 8001120:	003c      	movs	r4, r7
 8001122:	408f      	lsls	r7, r1
 8001124:	40c4      	lsrs	r4, r0
 8001126:	1e7b      	subs	r3, r7, #1
 8001128:	419f      	sbcs	r7, r3
 800112a:	0013      	movs	r3, r2
 800112c:	408b      	lsls	r3, r1
 800112e:	4327      	orrs	r7, r4
 8001130:	431f      	orrs	r7, r3
 8001132:	40c2      	lsrs	r2, r0
 8001134:	003b      	movs	r3, r7
 8001136:	0014      	movs	r4, r2
 8001138:	2500      	movs	r5, #0
 800113a:	4313      	orrs	r3, r2
 800113c:	d100      	bne.n	8001140 <__aeabi_dsub+0x110>
 800113e:	e1f7      	b.n	8001530 <__aeabi_dsub+0x500>
 8001140:	077b      	lsls	r3, r7, #29
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x116>
 8001144:	e377      	b.n	8001836 <__aeabi_dsub+0x806>
 8001146:	230f      	movs	r3, #15
 8001148:	0038      	movs	r0, r7
 800114a:	403b      	ands	r3, r7
 800114c:	2b04      	cmp	r3, #4
 800114e:	d004      	beq.n	800115a <__aeabi_dsub+0x12a>
 8001150:	1d38      	adds	r0, r7, #4
 8001152:	42b8      	cmp	r0, r7
 8001154:	41bf      	sbcs	r7, r7
 8001156:	427f      	negs	r7, r7
 8001158:	19e4      	adds	r4, r4, r7
 800115a:	0223      	lsls	r3, r4, #8
 800115c:	d400      	bmi.n	8001160 <__aeabi_dsub+0x130>
 800115e:	e368      	b.n	8001832 <__aeabi_dsub+0x802>
 8001160:	4b8c      	ldr	r3, [pc, #560]	@ (8001394 <__aeabi_dsub+0x364>)
 8001162:	3501      	adds	r5, #1
 8001164:	429d      	cmp	r5, r3
 8001166:	d100      	bne.n	800116a <__aeabi_dsub+0x13a>
 8001168:	e0f4      	b.n	8001354 <__aeabi_dsub+0x324>
 800116a:	4b8b      	ldr	r3, [pc, #556]	@ (8001398 <__aeabi_dsub+0x368>)
 800116c:	056d      	lsls	r5, r5, #21
 800116e:	401c      	ands	r4, r3
 8001170:	0d6d      	lsrs	r5, r5, #21
 8001172:	0767      	lsls	r7, r4, #29
 8001174:	08c0      	lsrs	r0, r0, #3
 8001176:	0264      	lsls	r4, r4, #9
 8001178:	4307      	orrs	r7, r0
 800117a:	0b24      	lsrs	r4, r4, #12
 800117c:	e0ec      	b.n	8001358 <__aeabi_dsub+0x328>
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc00      	bgt.n	8001184 <__aeabi_dsub+0x154>
 8001182:	e329      	b.n	80017d8 <__aeabi_dsub+0x7a8>
 8001184:	4649      	mov	r1, r9
 8001186:	2900      	cmp	r1, #0
 8001188:	d000      	beq.n	800118c <__aeabi_dsub+0x15c>
 800118a:	e0d6      	b.n	800133a <__aeabi_dsub+0x30a>
 800118c:	4659      	mov	r1, fp
 800118e:	4311      	orrs	r1, r2
 8001190:	d100      	bne.n	8001194 <__aeabi_dsub+0x164>
 8001192:	e12e      	b.n	80013f2 <__aeabi_dsub+0x3c2>
 8001194:	1e59      	subs	r1, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x16c>
 800119a:	e1e6      	b.n	800156a <__aeabi_dsub+0x53a>
 800119c:	42bb      	cmp	r3, r7
 800119e:	d100      	bne.n	80011a2 <__aeabi_dsub+0x172>
 80011a0:	e182      	b.n	80014a8 <__aeabi_dsub+0x478>
 80011a2:	2701      	movs	r7, #1
 80011a4:	000b      	movs	r3, r1
 80011a6:	2938      	cmp	r1, #56	@ 0x38
 80011a8:	dc14      	bgt.n	80011d4 <__aeabi_dsub+0x1a4>
 80011aa:	2b1f      	cmp	r3, #31
 80011ac:	dd00      	ble.n	80011b0 <__aeabi_dsub+0x180>
 80011ae:	e23c      	b.n	800162a <__aeabi_dsub+0x5fa>
 80011b0:	2720      	movs	r7, #32
 80011b2:	1af9      	subs	r1, r7, r3
 80011b4:	468c      	mov	ip, r1
 80011b6:	4659      	mov	r1, fp
 80011b8:	4667      	mov	r7, ip
 80011ba:	40b9      	lsls	r1, r7
 80011bc:	000f      	movs	r7, r1
 80011be:	0011      	movs	r1, r2
 80011c0:	40d9      	lsrs	r1, r3
 80011c2:	430f      	orrs	r7, r1
 80011c4:	4661      	mov	r1, ip
 80011c6:	408a      	lsls	r2, r1
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	418a      	sbcs	r2, r1
 80011cc:	4659      	mov	r1, fp
 80011ce:	40d9      	lsrs	r1, r3
 80011d0:	4317      	orrs	r7, r2
 80011d2:	1864      	adds	r4, r4, r1
 80011d4:	183f      	adds	r7, r7, r0
 80011d6:	4287      	cmp	r7, r0
 80011d8:	4180      	sbcs	r0, r0
 80011da:	4240      	negs	r0, r0
 80011dc:	1824      	adds	r4, r4, r0
 80011de:	0223      	lsls	r3, r4, #8
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_dsub+0x1b4>
 80011e2:	e0c6      	b.n	8001372 <__aeabi_dsub+0x342>
 80011e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <__aeabi_dsub+0x364>)
 80011e6:	3501      	adds	r5, #1
 80011e8:	429d      	cmp	r5, r3
 80011ea:	d100      	bne.n	80011ee <__aeabi_dsub+0x1be>
 80011ec:	e0b2      	b.n	8001354 <__aeabi_dsub+0x324>
 80011ee:	2101      	movs	r1, #1
 80011f0:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <__aeabi_dsub+0x368>)
 80011f2:	087a      	lsrs	r2, r7, #1
 80011f4:	401c      	ands	r4, r3
 80011f6:	4039      	ands	r1, r7
 80011f8:	430a      	orrs	r2, r1
 80011fa:	07e7      	lsls	r7, r4, #31
 80011fc:	4317      	orrs	r7, r2
 80011fe:	0864      	lsrs	r4, r4, #1
 8001200:	e79e      	b.n	8001140 <__aeabi_dsub+0x110>
 8001202:	4b66      	ldr	r3, [pc, #408]	@ (800139c <__aeabi_dsub+0x36c>)
 8001204:	4311      	orrs	r1, r2
 8001206:	468a      	mov	sl, r1
 8001208:	18eb      	adds	r3, r5, r3
 800120a:	2900      	cmp	r1, #0
 800120c:	d028      	beq.n	8001260 <__aeabi_dsub+0x230>
 800120e:	4566      	cmp	r6, ip
 8001210:	d02c      	beq.n	800126c <__aeabi_dsub+0x23c>
 8001212:	2b00      	cmp	r3, #0
 8001214:	d05b      	beq.n	80012ce <__aeabi_dsub+0x29e>
 8001216:	2d00      	cmp	r5, #0
 8001218:	d100      	bne.n	800121c <__aeabi_dsub+0x1ec>
 800121a:	e12c      	b.n	8001476 <__aeabi_dsub+0x446>
 800121c:	465b      	mov	r3, fp
 800121e:	4666      	mov	r6, ip
 8001220:	075f      	lsls	r7, r3, #29
 8001222:	08d2      	lsrs	r2, r2, #3
 8001224:	4317      	orrs	r7, r2
 8001226:	08dd      	lsrs	r5, r3, #3
 8001228:	003b      	movs	r3, r7
 800122a:	432b      	orrs	r3, r5
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x200>
 800122e:	e0e2      	b.n	80013f6 <__aeabi_dsub+0x3c6>
 8001230:	2480      	movs	r4, #128	@ 0x80
 8001232:	0324      	lsls	r4, r4, #12
 8001234:	432c      	orrs	r4, r5
 8001236:	0324      	lsls	r4, r4, #12
 8001238:	4d56      	ldr	r5, [pc, #344]	@ (8001394 <__aeabi_dsub+0x364>)
 800123a:	0b24      	lsrs	r4, r4, #12
 800123c:	e08c      	b.n	8001358 <__aeabi_dsub+0x328>
 800123e:	4659      	mov	r1, fp
 8001240:	4311      	orrs	r1, r2
 8001242:	d100      	bne.n	8001246 <__aeabi_dsub+0x216>
 8001244:	e0d5      	b.n	80013f2 <__aeabi_dsub+0x3c2>
 8001246:	1e59      	subs	r1, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d100      	bne.n	800124e <__aeabi_dsub+0x21e>
 800124c:	e1b9      	b.n	80015c2 <__aeabi_dsub+0x592>
 800124e:	42bb      	cmp	r3, r7
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x224>
 8001252:	e1b1      	b.n	80015b8 <__aeabi_dsub+0x588>
 8001254:	2701      	movs	r7, #1
 8001256:	000b      	movs	r3, r1
 8001258:	2938      	cmp	r1, #56	@ 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dsub+0x22e>
 800125c:	e740      	b.n	80010e0 <__aeabi_dsub+0xb0>
 800125e:	e72a      	b.n	80010b6 <__aeabi_dsub+0x86>
 8001260:	4661      	mov	r1, ip
 8001262:	2701      	movs	r7, #1
 8001264:	4079      	eors	r1, r7
 8001266:	468c      	mov	ip, r1
 8001268:	4566      	cmp	r6, ip
 800126a:	d1d2      	bne.n	8001212 <__aeabi_dsub+0x1e2>
 800126c:	2b00      	cmp	r3, #0
 800126e:	d100      	bne.n	8001272 <__aeabi_dsub+0x242>
 8001270:	e0c5      	b.n	80013fe <__aeabi_dsub+0x3ce>
 8001272:	2d00      	cmp	r5, #0
 8001274:	d000      	beq.n	8001278 <__aeabi_dsub+0x248>
 8001276:	e155      	b.n	8001524 <__aeabi_dsub+0x4f4>
 8001278:	464b      	mov	r3, r9
 800127a:	0025      	movs	r5, r4
 800127c:	4305      	orrs	r5, r0
 800127e:	d100      	bne.n	8001282 <__aeabi_dsub+0x252>
 8001280:	e212      	b.n	80016a8 <__aeabi_dsub+0x678>
 8001282:	1e59      	subs	r1, r3, #1
 8001284:	468c      	mov	ip, r1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d100      	bne.n	800128c <__aeabi_dsub+0x25c>
 800128a:	e249      	b.n	8001720 <__aeabi_dsub+0x6f0>
 800128c:	4d41      	ldr	r5, [pc, #260]	@ (8001394 <__aeabi_dsub+0x364>)
 800128e:	42ab      	cmp	r3, r5
 8001290:	d100      	bne.n	8001294 <__aeabi_dsub+0x264>
 8001292:	e28f      	b.n	80017b4 <__aeabi_dsub+0x784>
 8001294:	2701      	movs	r7, #1
 8001296:	2938      	cmp	r1, #56	@ 0x38
 8001298:	dc11      	bgt.n	80012be <__aeabi_dsub+0x28e>
 800129a:	4663      	mov	r3, ip
 800129c:	2b1f      	cmp	r3, #31
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dsub+0x272>
 80012a0:	e25b      	b.n	800175a <__aeabi_dsub+0x72a>
 80012a2:	4661      	mov	r1, ip
 80012a4:	2320      	movs	r3, #32
 80012a6:	0027      	movs	r7, r4
 80012a8:	1a5b      	subs	r3, r3, r1
 80012aa:	0005      	movs	r5, r0
 80012ac:	4098      	lsls	r0, r3
 80012ae:	409f      	lsls	r7, r3
 80012b0:	40cd      	lsrs	r5, r1
 80012b2:	1e43      	subs	r3, r0, #1
 80012b4:	4198      	sbcs	r0, r3
 80012b6:	40cc      	lsrs	r4, r1
 80012b8:	432f      	orrs	r7, r5
 80012ba:	4307      	orrs	r7, r0
 80012bc:	44a3      	add	fp, r4
 80012be:	18bf      	adds	r7, r7, r2
 80012c0:	4297      	cmp	r7, r2
 80012c2:	4192      	sbcs	r2, r2
 80012c4:	4252      	negs	r2, r2
 80012c6:	445a      	add	r2, fp
 80012c8:	0014      	movs	r4, r2
 80012ca:	464d      	mov	r5, r9
 80012cc:	e787      	b.n	80011de <__aeabi_dsub+0x1ae>
 80012ce:	4f34      	ldr	r7, [pc, #208]	@ (80013a0 <__aeabi_dsub+0x370>)
 80012d0:	1c6b      	adds	r3, r5, #1
 80012d2:	423b      	tst	r3, r7
 80012d4:	d000      	beq.n	80012d8 <__aeabi_dsub+0x2a8>
 80012d6:	e0b6      	b.n	8001446 <__aeabi_dsub+0x416>
 80012d8:	4659      	mov	r1, fp
 80012da:	0023      	movs	r3, r4
 80012dc:	4311      	orrs	r1, r2
 80012de:	000f      	movs	r7, r1
 80012e0:	4303      	orrs	r3, r0
 80012e2:	2d00      	cmp	r5, #0
 80012e4:	d000      	beq.n	80012e8 <__aeabi_dsub+0x2b8>
 80012e6:	e126      	b.n	8001536 <__aeabi_dsub+0x506>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_dsub+0x2be>
 80012ec:	e1c0      	b.n	8001670 <__aeabi_dsub+0x640>
 80012ee:	2900      	cmp	r1, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dsub+0x2c4>
 80012f2:	e0a1      	b.n	8001438 <__aeabi_dsub+0x408>
 80012f4:	1a83      	subs	r3, r0, r2
 80012f6:	4698      	mov	r8, r3
 80012f8:	465b      	mov	r3, fp
 80012fa:	4540      	cmp	r0, r8
 80012fc:	41ad      	sbcs	r5, r5
 80012fe:	1ae3      	subs	r3, r4, r3
 8001300:	426d      	negs	r5, r5
 8001302:	1b5b      	subs	r3, r3, r5
 8001304:	2580      	movs	r5, #128	@ 0x80
 8001306:	042d      	lsls	r5, r5, #16
 8001308:	422b      	tst	r3, r5
 800130a:	d100      	bne.n	800130e <__aeabi_dsub+0x2de>
 800130c:	e14b      	b.n	80015a6 <__aeabi_dsub+0x576>
 800130e:	465b      	mov	r3, fp
 8001310:	1a10      	subs	r0, r2, r0
 8001312:	4282      	cmp	r2, r0
 8001314:	4192      	sbcs	r2, r2
 8001316:	1b1c      	subs	r4, r3, r4
 8001318:	0007      	movs	r7, r0
 800131a:	2601      	movs	r6, #1
 800131c:	4663      	mov	r3, ip
 800131e:	4252      	negs	r2, r2
 8001320:	1aa4      	subs	r4, r4, r2
 8001322:	4327      	orrs	r7, r4
 8001324:	401e      	ands	r6, r3
 8001326:	2f00      	cmp	r7, #0
 8001328:	d100      	bne.n	800132c <__aeabi_dsub+0x2fc>
 800132a:	e142      	b.n	80015b2 <__aeabi_dsub+0x582>
 800132c:	422c      	tst	r4, r5
 800132e:	d100      	bne.n	8001332 <__aeabi_dsub+0x302>
 8001330:	e26d      	b.n	800180e <__aeabi_dsub+0x7de>
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <__aeabi_dsub+0x368>)
 8001334:	2501      	movs	r5, #1
 8001336:	401c      	ands	r4, r3
 8001338:	e71b      	b.n	8001172 <__aeabi_dsub+0x142>
 800133a:	42bd      	cmp	r5, r7
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x310>
 800133e:	e13b      	b.n	80015b8 <__aeabi_dsub+0x588>
 8001340:	2701      	movs	r7, #1
 8001342:	2b38      	cmp	r3, #56	@ 0x38
 8001344:	dd00      	ble.n	8001348 <__aeabi_dsub+0x318>
 8001346:	e745      	b.n	80011d4 <__aeabi_dsub+0x1a4>
 8001348:	2780      	movs	r7, #128	@ 0x80
 800134a:	4659      	mov	r1, fp
 800134c:	043f      	lsls	r7, r7, #16
 800134e:	4339      	orrs	r1, r7
 8001350:	468b      	mov	fp, r1
 8001352:	e72a      	b.n	80011aa <__aeabi_dsub+0x17a>
 8001354:	2400      	movs	r4, #0
 8001356:	2700      	movs	r7, #0
 8001358:	052d      	lsls	r5, r5, #20
 800135a:	4325      	orrs	r5, r4
 800135c:	07f6      	lsls	r6, r6, #31
 800135e:	4335      	orrs	r5, r6
 8001360:	0038      	movs	r0, r7
 8001362:	0029      	movs	r1, r5
 8001364:	b003      	add	sp, #12
 8001366:	bcf0      	pop	{r4, r5, r6, r7}
 8001368:	46bb      	mov	fp, r7
 800136a:	46b2      	mov	sl, r6
 800136c:	46a9      	mov	r9, r5
 800136e:	46a0      	mov	r8, r4
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	077b      	lsls	r3, r7, #29
 8001374:	d004      	beq.n	8001380 <__aeabi_dsub+0x350>
 8001376:	230f      	movs	r3, #15
 8001378:	403b      	ands	r3, r7
 800137a:	2b04      	cmp	r3, #4
 800137c:	d000      	beq.n	8001380 <__aeabi_dsub+0x350>
 800137e:	e6e7      	b.n	8001150 <__aeabi_dsub+0x120>
 8001380:	002b      	movs	r3, r5
 8001382:	08f8      	lsrs	r0, r7, #3
 8001384:	4a03      	ldr	r2, [pc, #12]	@ (8001394 <__aeabi_dsub+0x364>)
 8001386:	0767      	lsls	r7, r4, #29
 8001388:	4307      	orrs	r7, r0
 800138a:	08e5      	lsrs	r5, r4, #3
 800138c:	4293      	cmp	r3, r2
 800138e:	d100      	bne.n	8001392 <__aeabi_dsub+0x362>
 8001390:	e74a      	b.n	8001228 <__aeabi_dsub+0x1f8>
 8001392:	e0a5      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 8001394:	000007ff 	.word	0x000007ff
 8001398:	ff7fffff 	.word	0xff7fffff
 800139c:	fffff801 	.word	0xfffff801
 80013a0:	000007fe 	.word	0x000007fe
 80013a4:	0038      	movs	r0, r7
 80013a6:	f000 faeb 	bl	8001980 <__clzsi2>
 80013aa:	0003      	movs	r3, r0
 80013ac:	3318      	adds	r3, #24
 80013ae:	2b1f      	cmp	r3, #31
 80013b0:	dc00      	bgt.n	80013b4 <__aeabi_dsub+0x384>
 80013b2:	e6a7      	b.n	8001104 <__aeabi_dsub+0xd4>
 80013b4:	003a      	movs	r2, r7
 80013b6:	3808      	subs	r0, #8
 80013b8:	4082      	lsls	r2, r0
 80013ba:	429d      	cmp	r5, r3
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dsub+0x390>
 80013be:	e08a      	b.n	80014d6 <__aeabi_dsub+0x4a6>
 80013c0:	1b5b      	subs	r3, r3, r5
 80013c2:	1c58      	adds	r0, r3, #1
 80013c4:	281f      	cmp	r0, #31
 80013c6:	dc00      	bgt.n	80013ca <__aeabi_dsub+0x39a>
 80013c8:	e1d8      	b.n	800177c <__aeabi_dsub+0x74c>
 80013ca:	0017      	movs	r7, r2
 80013cc:	3b1f      	subs	r3, #31
 80013ce:	40df      	lsrs	r7, r3
 80013d0:	2820      	cmp	r0, #32
 80013d2:	d005      	beq.n	80013e0 <__aeabi_dsub+0x3b0>
 80013d4:	2340      	movs	r3, #64	@ 0x40
 80013d6:	1a1b      	subs	r3, r3, r0
 80013d8:	409a      	lsls	r2, r3
 80013da:	1e53      	subs	r3, r2, #1
 80013dc:	419a      	sbcs	r2, r3
 80013de:	4317      	orrs	r7, r2
 80013e0:	2500      	movs	r5, #0
 80013e2:	2f00      	cmp	r7, #0
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dsub+0x3b8>
 80013e6:	e0e5      	b.n	80015b4 <__aeabi_dsub+0x584>
 80013e8:	077b      	lsls	r3, r7, #29
 80013ea:	d000      	beq.n	80013ee <__aeabi_dsub+0x3be>
 80013ec:	e6ab      	b.n	8001146 <__aeabi_dsub+0x116>
 80013ee:	002c      	movs	r4, r5
 80013f0:	e7c6      	b.n	8001380 <__aeabi_dsub+0x350>
 80013f2:	08c0      	lsrs	r0, r0, #3
 80013f4:	e7c6      	b.n	8001384 <__aeabi_dsub+0x354>
 80013f6:	2700      	movs	r7, #0
 80013f8:	2400      	movs	r4, #0
 80013fa:	4dd1      	ldr	r5, [pc, #836]	@ (8001740 <__aeabi_dsub+0x710>)
 80013fc:	e7ac      	b.n	8001358 <__aeabi_dsub+0x328>
 80013fe:	4fd1      	ldr	r7, [pc, #836]	@ (8001744 <__aeabi_dsub+0x714>)
 8001400:	1c6b      	adds	r3, r5, #1
 8001402:	423b      	tst	r3, r7
 8001404:	d171      	bne.n	80014ea <__aeabi_dsub+0x4ba>
 8001406:	0023      	movs	r3, r4
 8001408:	4303      	orrs	r3, r0
 800140a:	2d00      	cmp	r5, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_dsub+0x3e0>
 800140e:	e14e      	b.n	80016ae <__aeabi_dsub+0x67e>
 8001410:	4657      	mov	r7, sl
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_dsub+0x3e8>
 8001416:	e1b5      	b.n	8001784 <__aeabi_dsub+0x754>
 8001418:	2f00      	cmp	r7, #0
 800141a:	d00d      	beq.n	8001438 <__aeabi_dsub+0x408>
 800141c:	1883      	adds	r3, r0, r2
 800141e:	4283      	cmp	r3, r0
 8001420:	4180      	sbcs	r0, r0
 8001422:	445c      	add	r4, fp
 8001424:	4240      	negs	r0, r0
 8001426:	1824      	adds	r4, r4, r0
 8001428:	0222      	lsls	r2, r4, #8
 800142a:	d500      	bpl.n	800142e <__aeabi_dsub+0x3fe>
 800142c:	e1c8      	b.n	80017c0 <__aeabi_dsub+0x790>
 800142e:	001f      	movs	r7, r3
 8001430:	4698      	mov	r8, r3
 8001432:	4327      	orrs	r7, r4
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x408>
 8001436:	e0bc      	b.n	80015b2 <__aeabi_dsub+0x582>
 8001438:	4643      	mov	r3, r8
 800143a:	0767      	lsls	r7, r4, #29
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	431f      	orrs	r7, r3
 8001440:	08e5      	lsrs	r5, r4, #3
 8001442:	2300      	movs	r3, #0
 8001444:	e04c      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 8001446:	1a83      	subs	r3, r0, r2
 8001448:	4698      	mov	r8, r3
 800144a:	465b      	mov	r3, fp
 800144c:	4540      	cmp	r0, r8
 800144e:	41bf      	sbcs	r7, r7
 8001450:	1ae3      	subs	r3, r4, r3
 8001452:	427f      	negs	r7, r7
 8001454:	1bdb      	subs	r3, r3, r7
 8001456:	021f      	lsls	r7, r3, #8
 8001458:	d47c      	bmi.n	8001554 <__aeabi_dsub+0x524>
 800145a:	4647      	mov	r7, r8
 800145c:	431f      	orrs	r7, r3
 800145e:	d100      	bne.n	8001462 <__aeabi_dsub+0x432>
 8001460:	e0a6      	b.n	80015b0 <__aeabi_dsub+0x580>
 8001462:	001c      	movs	r4, r3
 8001464:	4647      	mov	r7, r8
 8001466:	e645      	b.n	80010f4 <__aeabi_dsub+0xc4>
 8001468:	4cb7      	ldr	r4, [pc, #732]	@ (8001748 <__aeabi_dsub+0x718>)
 800146a:	1aed      	subs	r5, r5, r3
 800146c:	4014      	ands	r4, r2
 800146e:	077b      	lsls	r3, r7, #29
 8001470:	d000      	beq.n	8001474 <__aeabi_dsub+0x444>
 8001472:	e780      	b.n	8001376 <__aeabi_dsub+0x346>
 8001474:	e784      	b.n	8001380 <__aeabi_dsub+0x350>
 8001476:	464b      	mov	r3, r9
 8001478:	0025      	movs	r5, r4
 800147a:	4305      	orrs	r5, r0
 800147c:	d066      	beq.n	800154c <__aeabi_dsub+0x51c>
 800147e:	1e5f      	subs	r7, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x456>
 8001484:	e0fc      	b.n	8001680 <__aeabi_dsub+0x650>
 8001486:	4dae      	ldr	r5, [pc, #696]	@ (8001740 <__aeabi_dsub+0x710>)
 8001488:	42ab      	cmp	r3, r5
 800148a:	d100      	bne.n	800148e <__aeabi_dsub+0x45e>
 800148c:	e15e      	b.n	800174c <__aeabi_dsub+0x71c>
 800148e:	4666      	mov	r6, ip
 8001490:	2f38      	cmp	r7, #56	@ 0x38
 8001492:	dc00      	bgt.n	8001496 <__aeabi_dsub+0x466>
 8001494:	e0b4      	b.n	8001600 <__aeabi_dsub+0x5d0>
 8001496:	2001      	movs	r0, #1
 8001498:	1a17      	subs	r7, r2, r0
 800149a:	42ba      	cmp	r2, r7
 800149c:	4192      	sbcs	r2, r2
 800149e:	465b      	mov	r3, fp
 80014a0:	4252      	negs	r2, r2
 80014a2:	464d      	mov	r5, r9
 80014a4:	1a9c      	subs	r4, r3, r2
 80014a6:	e620      	b.n	80010ea <__aeabi_dsub+0xba>
 80014a8:	0767      	lsls	r7, r4, #29
 80014aa:	08c0      	lsrs	r0, r0, #3
 80014ac:	4307      	orrs	r7, r0
 80014ae:	08e5      	lsrs	r5, r4, #3
 80014b0:	e6ba      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80014b2:	001f      	movs	r7, r3
 80014b4:	4659      	mov	r1, fp
 80014b6:	3f20      	subs	r7, #32
 80014b8:	40f9      	lsrs	r1, r7
 80014ba:	000f      	movs	r7, r1
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d005      	beq.n	80014cc <__aeabi_dsub+0x49c>
 80014c0:	2140      	movs	r1, #64	@ 0x40
 80014c2:	1acb      	subs	r3, r1, r3
 80014c4:	4659      	mov	r1, fp
 80014c6:	4099      	lsls	r1, r3
 80014c8:	430a      	orrs	r2, r1
 80014ca:	4692      	mov	sl, r2
 80014cc:	4653      	mov	r3, sl
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	431f      	orrs	r7, r3
 80014d4:	e604      	b.n	80010e0 <__aeabi_dsub+0xb0>
 80014d6:	1aeb      	subs	r3, r5, r3
 80014d8:	4d9b      	ldr	r5, [pc, #620]	@ (8001748 <__aeabi_dsub+0x718>)
 80014da:	4015      	ands	r5, r2
 80014dc:	076f      	lsls	r7, r5, #29
 80014de:	08ed      	lsrs	r5, r5, #3
 80014e0:	032c      	lsls	r4, r5, #12
 80014e2:	055d      	lsls	r5, r3, #21
 80014e4:	0b24      	lsrs	r4, r4, #12
 80014e6:	0d6d      	lsrs	r5, r5, #21
 80014e8:	e736      	b.n	8001358 <__aeabi_dsub+0x328>
 80014ea:	4d95      	ldr	r5, [pc, #596]	@ (8001740 <__aeabi_dsub+0x710>)
 80014ec:	42ab      	cmp	r3, r5
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dsub+0x4c2>
 80014f0:	e0d6      	b.n	80016a0 <__aeabi_dsub+0x670>
 80014f2:	1882      	adds	r2, r0, r2
 80014f4:	0021      	movs	r1, r4
 80014f6:	4282      	cmp	r2, r0
 80014f8:	4180      	sbcs	r0, r0
 80014fa:	4459      	add	r1, fp
 80014fc:	4240      	negs	r0, r0
 80014fe:	1808      	adds	r0, r1, r0
 8001500:	07c7      	lsls	r7, r0, #31
 8001502:	0852      	lsrs	r2, r2, #1
 8001504:	4317      	orrs	r7, r2
 8001506:	0844      	lsrs	r4, r0, #1
 8001508:	0752      	lsls	r2, r2, #29
 800150a:	d400      	bmi.n	800150e <__aeabi_dsub+0x4de>
 800150c:	e185      	b.n	800181a <__aeabi_dsub+0x7ea>
 800150e:	220f      	movs	r2, #15
 8001510:	001d      	movs	r5, r3
 8001512:	403a      	ands	r2, r7
 8001514:	2a04      	cmp	r2, #4
 8001516:	d000      	beq.n	800151a <__aeabi_dsub+0x4ea>
 8001518:	e61a      	b.n	8001150 <__aeabi_dsub+0x120>
 800151a:	08ff      	lsrs	r7, r7, #3
 800151c:	0764      	lsls	r4, r4, #29
 800151e:	4327      	orrs	r7, r4
 8001520:	0905      	lsrs	r5, r0, #4
 8001522:	e7dd      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 8001524:	465b      	mov	r3, fp
 8001526:	08d2      	lsrs	r2, r2, #3
 8001528:	075f      	lsls	r7, r3, #29
 800152a:	4317      	orrs	r7, r2
 800152c:	08dd      	lsrs	r5, r3, #3
 800152e:	e67b      	b.n	8001228 <__aeabi_dsub+0x1f8>
 8001530:	2700      	movs	r7, #0
 8001532:	2400      	movs	r4, #0
 8001534:	e710      	b.n	8001358 <__aeabi_dsub+0x328>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d000      	beq.n	800153c <__aeabi_dsub+0x50c>
 800153a:	e0d6      	b.n	80016ea <__aeabi_dsub+0x6ba>
 800153c:	2900      	cmp	r1, #0
 800153e:	d000      	beq.n	8001542 <__aeabi_dsub+0x512>
 8001540:	e12f      	b.n	80017a2 <__aeabi_dsub+0x772>
 8001542:	2480      	movs	r4, #128	@ 0x80
 8001544:	2600      	movs	r6, #0
 8001546:	4d7e      	ldr	r5, [pc, #504]	@ (8001740 <__aeabi_dsub+0x710>)
 8001548:	0324      	lsls	r4, r4, #12
 800154a:	e705      	b.n	8001358 <__aeabi_dsub+0x328>
 800154c:	4666      	mov	r6, ip
 800154e:	465c      	mov	r4, fp
 8001550:	08d0      	lsrs	r0, r2, #3
 8001552:	e717      	b.n	8001384 <__aeabi_dsub+0x354>
 8001554:	465b      	mov	r3, fp
 8001556:	1a17      	subs	r7, r2, r0
 8001558:	42ba      	cmp	r2, r7
 800155a:	4192      	sbcs	r2, r2
 800155c:	1b1c      	subs	r4, r3, r4
 800155e:	2601      	movs	r6, #1
 8001560:	4663      	mov	r3, ip
 8001562:	4252      	negs	r2, r2
 8001564:	1aa4      	subs	r4, r4, r2
 8001566:	401e      	ands	r6, r3
 8001568:	e5c4      	b.n	80010f4 <__aeabi_dsub+0xc4>
 800156a:	1883      	adds	r3, r0, r2
 800156c:	4283      	cmp	r3, r0
 800156e:	4180      	sbcs	r0, r0
 8001570:	445c      	add	r4, fp
 8001572:	4240      	negs	r0, r0
 8001574:	1825      	adds	r5, r4, r0
 8001576:	022a      	lsls	r2, r5, #8
 8001578:	d400      	bmi.n	800157c <__aeabi_dsub+0x54c>
 800157a:	e0da      	b.n	8001732 <__aeabi_dsub+0x702>
 800157c:	4a72      	ldr	r2, [pc, #456]	@ (8001748 <__aeabi_dsub+0x718>)
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	4015      	ands	r5, r2
 8001582:	07ea      	lsls	r2, r5, #31
 8001584:	431a      	orrs	r2, r3
 8001586:	0869      	lsrs	r1, r5, #1
 8001588:	075b      	lsls	r3, r3, #29
 800158a:	d400      	bmi.n	800158e <__aeabi_dsub+0x55e>
 800158c:	e14a      	b.n	8001824 <__aeabi_dsub+0x7f4>
 800158e:	230f      	movs	r3, #15
 8001590:	4013      	ands	r3, r2
 8001592:	2b04      	cmp	r3, #4
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0x568>
 8001596:	e0fc      	b.n	8001792 <__aeabi_dsub+0x762>
 8001598:	1d17      	adds	r7, r2, #4
 800159a:	4297      	cmp	r7, r2
 800159c:	41a4      	sbcs	r4, r4
 800159e:	4264      	negs	r4, r4
 80015a0:	2502      	movs	r5, #2
 80015a2:	1864      	adds	r4, r4, r1
 80015a4:	e6ec      	b.n	8001380 <__aeabi_dsub+0x350>
 80015a6:	4647      	mov	r7, r8
 80015a8:	001c      	movs	r4, r3
 80015aa:	431f      	orrs	r7, r3
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dsub+0x580>
 80015ae:	e743      	b.n	8001438 <__aeabi_dsub+0x408>
 80015b0:	2600      	movs	r6, #0
 80015b2:	2500      	movs	r5, #0
 80015b4:	2400      	movs	r4, #0
 80015b6:	e6cf      	b.n	8001358 <__aeabi_dsub+0x328>
 80015b8:	08c0      	lsrs	r0, r0, #3
 80015ba:	0767      	lsls	r7, r4, #29
 80015bc:	4307      	orrs	r7, r0
 80015be:	08e5      	lsrs	r5, r4, #3
 80015c0:	e632      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80015c2:	1a87      	subs	r7, r0, r2
 80015c4:	465b      	mov	r3, fp
 80015c6:	42b8      	cmp	r0, r7
 80015c8:	4180      	sbcs	r0, r0
 80015ca:	1ae4      	subs	r4, r4, r3
 80015cc:	4240      	negs	r0, r0
 80015ce:	1a24      	subs	r4, r4, r0
 80015d0:	0223      	lsls	r3, r4, #8
 80015d2:	d428      	bmi.n	8001626 <__aeabi_dsub+0x5f6>
 80015d4:	0763      	lsls	r3, r4, #29
 80015d6:	08ff      	lsrs	r7, r7, #3
 80015d8:	431f      	orrs	r7, r3
 80015da:	08e5      	lsrs	r5, r4, #3
 80015dc:	2301      	movs	r3, #1
 80015de:	e77f      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dsub+0x5b6>
 80015e4:	e673      	b.n	80012ce <__aeabi_dsub+0x29e>
 80015e6:	464b      	mov	r3, r9
 80015e8:	1b5f      	subs	r7, r3, r5
 80015ea:	003b      	movs	r3, r7
 80015ec:	2d00      	cmp	r5, #0
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dsub+0x5c2>
 80015f0:	e742      	b.n	8001478 <__aeabi_dsub+0x448>
 80015f2:	2f38      	cmp	r7, #56	@ 0x38
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dsub+0x5c8>
 80015f6:	e0ec      	b.n	80017d2 <__aeabi_dsub+0x7a2>
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	000e      	movs	r6, r1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431c      	orrs	r4, r3
 8001600:	2f1f      	cmp	r7, #31
 8001602:	dc25      	bgt.n	8001650 <__aeabi_dsub+0x620>
 8001604:	2520      	movs	r5, #32
 8001606:	0023      	movs	r3, r4
 8001608:	1bed      	subs	r5, r5, r7
 800160a:	0001      	movs	r1, r0
 800160c:	40a8      	lsls	r0, r5
 800160e:	40ab      	lsls	r3, r5
 8001610:	40f9      	lsrs	r1, r7
 8001612:	1e45      	subs	r5, r0, #1
 8001614:	41a8      	sbcs	r0, r5
 8001616:	430b      	orrs	r3, r1
 8001618:	40fc      	lsrs	r4, r7
 800161a:	4318      	orrs	r0, r3
 800161c:	465b      	mov	r3, fp
 800161e:	1b1b      	subs	r3, r3, r4
 8001620:	469b      	mov	fp, r3
 8001622:	e739      	b.n	8001498 <__aeabi_dsub+0x468>
 8001624:	4666      	mov	r6, ip
 8001626:	2501      	movs	r5, #1
 8001628:	e562      	b.n	80010f0 <__aeabi_dsub+0xc0>
 800162a:	001f      	movs	r7, r3
 800162c:	4659      	mov	r1, fp
 800162e:	3f20      	subs	r7, #32
 8001630:	40f9      	lsrs	r1, r7
 8001632:	468c      	mov	ip, r1
 8001634:	2b20      	cmp	r3, #32
 8001636:	d005      	beq.n	8001644 <__aeabi_dsub+0x614>
 8001638:	2740      	movs	r7, #64	@ 0x40
 800163a:	4659      	mov	r1, fp
 800163c:	1afb      	subs	r3, r7, r3
 800163e:	4099      	lsls	r1, r3
 8001640:	430a      	orrs	r2, r1
 8001642:	4692      	mov	sl, r2
 8001644:	4657      	mov	r7, sl
 8001646:	1e7b      	subs	r3, r7, #1
 8001648:	419f      	sbcs	r7, r3
 800164a:	4663      	mov	r3, ip
 800164c:	431f      	orrs	r7, r3
 800164e:	e5c1      	b.n	80011d4 <__aeabi_dsub+0x1a4>
 8001650:	003b      	movs	r3, r7
 8001652:	0025      	movs	r5, r4
 8001654:	3b20      	subs	r3, #32
 8001656:	40dd      	lsrs	r5, r3
 8001658:	2f20      	cmp	r7, #32
 800165a:	d004      	beq.n	8001666 <__aeabi_dsub+0x636>
 800165c:	2340      	movs	r3, #64	@ 0x40
 800165e:	1bdb      	subs	r3, r3, r7
 8001660:	409c      	lsls	r4, r3
 8001662:	4320      	orrs	r0, r4
 8001664:	4680      	mov	r8, r0
 8001666:	4640      	mov	r0, r8
 8001668:	1e43      	subs	r3, r0, #1
 800166a:	4198      	sbcs	r0, r3
 800166c:	4328      	orrs	r0, r5
 800166e:	e713      	b.n	8001498 <__aeabi_dsub+0x468>
 8001670:	2900      	cmp	r1, #0
 8001672:	d09d      	beq.n	80015b0 <__aeabi_dsub+0x580>
 8001674:	2601      	movs	r6, #1
 8001676:	4663      	mov	r3, ip
 8001678:	465c      	mov	r4, fp
 800167a:	4690      	mov	r8, r2
 800167c:	401e      	ands	r6, r3
 800167e:	e6db      	b.n	8001438 <__aeabi_dsub+0x408>
 8001680:	1a17      	subs	r7, r2, r0
 8001682:	465b      	mov	r3, fp
 8001684:	42ba      	cmp	r2, r7
 8001686:	4192      	sbcs	r2, r2
 8001688:	1b1c      	subs	r4, r3, r4
 800168a:	4252      	negs	r2, r2
 800168c:	1aa4      	subs	r4, r4, r2
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d4c8      	bmi.n	8001624 <__aeabi_dsub+0x5f4>
 8001692:	0763      	lsls	r3, r4, #29
 8001694:	08ff      	lsrs	r7, r7, #3
 8001696:	431f      	orrs	r7, r3
 8001698:	4666      	mov	r6, ip
 800169a:	2301      	movs	r3, #1
 800169c:	08e5      	lsrs	r5, r4, #3
 800169e:	e71f      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 80016a0:	001d      	movs	r5, r3
 80016a2:	2400      	movs	r4, #0
 80016a4:	2700      	movs	r7, #0
 80016a6:	e657      	b.n	8001358 <__aeabi_dsub+0x328>
 80016a8:	465c      	mov	r4, fp
 80016aa:	08d0      	lsrs	r0, r2, #3
 80016ac:	e66a      	b.n	8001384 <__aeabi_dsub+0x354>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dsub+0x684>
 80016b2:	e737      	b.n	8001524 <__aeabi_dsub+0x4f4>
 80016b4:	4653      	mov	r3, sl
 80016b6:	08c0      	lsrs	r0, r0, #3
 80016b8:	0767      	lsls	r7, r4, #29
 80016ba:	4307      	orrs	r7, r0
 80016bc:	08e5      	lsrs	r5, r4, #3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x694>
 80016c2:	e5b1      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	031b      	lsls	r3, r3, #12
 80016c8:	421d      	tst	r5, r3
 80016ca:	d008      	beq.n	80016de <__aeabi_dsub+0x6ae>
 80016cc:	4659      	mov	r1, fp
 80016ce:	08c8      	lsrs	r0, r1, #3
 80016d0:	4218      	tst	r0, r3
 80016d2:	d104      	bne.n	80016de <__aeabi_dsub+0x6ae>
 80016d4:	08d2      	lsrs	r2, r2, #3
 80016d6:	0749      	lsls	r1, r1, #29
 80016d8:	430a      	orrs	r2, r1
 80016da:	0017      	movs	r7, r2
 80016dc:	0005      	movs	r5, r0
 80016de:	0f7b      	lsrs	r3, r7, #29
 80016e0:	00ff      	lsls	r7, r7, #3
 80016e2:	08ff      	lsrs	r7, r7, #3
 80016e4:	075b      	lsls	r3, r3, #29
 80016e6:	431f      	orrs	r7, r3
 80016e8:	e59e      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80016ea:	08c0      	lsrs	r0, r0, #3
 80016ec:	0763      	lsls	r3, r4, #29
 80016ee:	4318      	orrs	r0, r3
 80016f0:	08e5      	lsrs	r5, r4, #3
 80016f2:	2900      	cmp	r1, #0
 80016f4:	d053      	beq.n	800179e <__aeabi_dsub+0x76e>
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	031b      	lsls	r3, r3, #12
 80016fa:	421d      	tst	r5, r3
 80016fc:	d00a      	beq.n	8001714 <__aeabi_dsub+0x6e4>
 80016fe:	4659      	mov	r1, fp
 8001700:	08cc      	lsrs	r4, r1, #3
 8001702:	421c      	tst	r4, r3
 8001704:	d106      	bne.n	8001714 <__aeabi_dsub+0x6e4>
 8001706:	2601      	movs	r6, #1
 8001708:	4663      	mov	r3, ip
 800170a:	0025      	movs	r5, r4
 800170c:	08d0      	lsrs	r0, r2, #3
 800170e:	0749      	lsls	r1, r1, #29
 8001710:	4308      	orrs	r0, r1
 8001712:	401e      	ands	r6, r3
 8001714:	0f47      	lsrs	r7, r0, #29
 8001716:	00c0      	lsls	r0, r0, #3
 8001718:	08c0      	lsrs	r0, r0, #3
 800171a:	077f      	lsls	r7, r7, #29
 800171c:	4307      	orrs	r7, r0
 800171e:	e583      	b.n	8001228 <__aeabi_dsub+0x1f8>
 8001720:	1883      	adds	r3, r0, r2
 8001722:	4293      	cmp	r3, r2
 8001724:	4192      	sbcs	r2, r2
 8001726:	445c      	add	r4, fp
 8001728:	4252      	negs	r2, r2
 800172a:	18a5      	adds	r5, r4, r2
 800172c:	022a      	lsls	r2, r5, #8
 800172e:	d500      	bpl.n	8001732 <__aeabi_dsub+0x702>
 8001730:	e724      	b.n	800157c <__aeabi_dsub+0x54c>
 8001732:	076f      	lsls	r7, r5, #29
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	431f      	orrs	r7, r3
 8001738:	08ed      	lsrs	r5, r5, #3
 800173a:	2301      	movs	r3, #1
 800173c:	e6d0      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	000007ff 	.word	0x000007ff
 8001744:	000007fe 	.word	0x000007fe
 8001748:	ff7fffff 	.word	0xff7fffff
 800174c:	465b      	mov	r3, fp
 800174e:	08d2      	lsrs	r2, r2, #3
 8001750:	075f      	lsls	r7, r3, #29
 8001752:	4666      	mov	r6, ip
 8001754:	4317      	orrs	r7, r2
 8001756:	08dd      	lsrs	r5, r3, #3
 8001758:	e566      	b.n	8001228 <__aeabi_dsub+0x1f8>
 800175a:	0025      	movs	r5, r4
 800175c:	3b20      	subs	r3, #32
 800175e:	40dd      	lsrs	r5, r3
 8001760:	4663      	mov	r3, ip
 8001762:	2b20      	cmp	r3, #32
 8001764:	d005      	beq.n	8001772 <__aeabi_dsub+0x742>
 8001766:	2340      	movs	r3, #64	@ 0x40
 8001768:	4661      	mov	r1, ip
 800176a:	1a5b      	subs	r3, r3, r1
 800176c:	409c      	lsls	r4, r3
 800176e:	4320      	orrs	r0, r4
 8001770:	4680      	mov	r8, r0
 8001772:	4647      	mov	r7, r8
 8001774:	1e7b      	subs	r3, r7, #1
 8001776:	419f      	sbcs	r7, r3
 8001778:	432f      	orrs	r7, r5
 800177a:	e5a0      	b.n	80012be <__aeabi_dsub+0x28e>
 800177c:	2120      	movs	r1, #32
 800177e:	2700      	movs	r7, #0
 8001780:	1a09      	subs	r1, r1, r0
 8001782:	e4d2      	b.n	800112a <__aeabi_dsub+0xfa>
 8001784:	2f00      	cmp	r7, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dsub+0x75a>
 8001788:	e713      	b.n	80015b2 <__aeabi_dsub+0x582>
 800178a:	465c      	mov	r4, fp
 800178c:	0017      	movs	r7, r2
 800178e:	2500      	movs	r5, #0
 8001790:	e5f6      	b.n	8001380 <__aeabi_dsub+0x350>
 8001792:	08d7      	lsrs	r7, r2, #3
 8001794:	0749      	lsls	r1, r1, #29
 8001796:	2302      	movs	r3, #2
 8001798:	430f      	orrs	r7, r1
 800179a:	092d      	lsrs	r5, r5, #4
 800179c:	e6a0      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 800179e:	0007      	movs	r7, r0
 80017a0:	e542      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80017a2:	465b      	mov	r3, fp
 80017a4:	2601      	movs	r6, #1
 80017a6:	075f      	lsls	r7, r3, #29
 80017a8:	08dd      	lsrs	r5, r3, #3
 80017aa:	4663      	mov	r3, ip
 80017ac:	08d2      	lsrs	r2, r2, #3
 80017ae:	4317      	orrs	r7, r2
 80017b0:	401e      	ands	r6, r3
 80017b2:	e539      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80017b4:	465b      	mov	r3, fp
 80017b6:	08d2      	lsrs	r2, r2, #3
 80017b8:	075f      	lsls	r7, r3, #29
 80017ba:	4317      	orrs	r7, r2
 80017bc:	08dd      	lsrs	r5, r3, #3
 80017be:	e533      	b.n	8001228 <__aeabi_dsub+0x1f8>
 80017c0:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <__aeabi_dsub+0x80c>)
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	4022      	ands	r2, r4
 80017c6:	0757      	lsls	r7, r2, #29
 80017c8:	0252      	lsls	r2, r2, #9
 80017ca:	2501      	movs	r5, #1
 80017cc:	431f      	orrs	r7, r3
 80017ce:	0b14      	lsrs	r4, r2, #12
 80017d0:	e5c2      	b.n	8001358 <__aeabi_dsub+0x328>
 80017d2:	000e      	movs	r6, r1
 80017d4:	2001      	movs	r0, #1
 80017d6:	e65f      	b.n	8001498 <__aeabi_dsub+0x468>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00d      	beq.n	80017f8 <__aeabi_dsub+0x7c8>
 80017dc:	464b      	mov	r3, r9
 80017de:	1b5b      	subs	r3, r3, r5
 80017e0:	469c      	mov	ip, r3
 80017e2:	2d00      	cmp	r5, #0
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dsub+0x7b8>
 80017e6:	e548      	b.n	800127a <__aeabi_dsub+0x24a>
 80017e8:	2701      	movs	r7, #1
 80017ea:	2b38      	cmp	r3, #56	@ 0x38
 80017ec:	dd00      	ble.n	80017f0 <__aeabi_dsub+0x7c0>
 80017ee:	e566      	b.n	80012be <__aeabi_dsub+0x28e>
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	431c      	orrs	r4, r3
 80017f6:	e550      	b.n	800129a <__aeabi_dsub+0x26a>
 80017f8:	1c6b      	adds	r3, r5, #1
 80017fa:	4d11      	ldr	r5, [pc, #68]	@ (8001840 <__aeabi_dsub+0x810>)
 80017fc:	422b      	tst	r3, r5
 80017fe:	d000      	beq.n	8001802 <__aeabi_dsub+0x7d2>
 8001800:	e673      	b.n	80014ea <__aeabi_dsub+0x4ba>
 8001802:	4659      	mov	r1, fp
 8001804:	0023      	movs	r3, r4
 8001806:	4311      	orrs	r1, r2
 8001808:	468a      	mov	sl, r1
 800180a:	4303      	orrs	r3, r0
 800180c:	e600      	b.n	8001410 <__aeabi_dsub+0x3e0>
 800180e:	0767      	lsls	r7, r4, #29
 8001810:	08c0      	lsrs	r0, r0, #3
 8001812:	2300      	movs	r3, #0
 8001814:	4307      	orrs	r7, r0
 8001816:	08e5      	lsrs	r5, r4, #3
 8001818:	e662      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 800181a:	0764      	lsls	r4, r4, #29
 800181c:	08ff      	lsrs	r7, r7, #3
 800181e:	4327      	orrs	r7, r4
 8001820:	0905      	lsrs	r5, r0, #4
 8001822:	e65d      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 8001824:	08d2      	lsrs	r2, r2, #3
 8001826:	0749      	lsls	r1, r1, #29
 8001828:	4311      	orrs	r1, r2
 800182a:	000f      	movs	r7, r1
 800182c:	2302      	movs	r3, #2
 800182e:	092d      	lsrs	r5, r5, #4
 8001830:	e656      	b.n	80014e0 <__aeabi_dsub+0x4b0>
 8001832:	0007      	movs	r7, r0
 8001834:	e5a4      	b.n	8001380 <__aeabi_dsub+0x350>
 8001836:	0038      	movs	r0, r7
 8001838:	e48f      	b.n	800115a <__aeabi_dsub+0x12a>
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	ff7fffff 	.word	0xff7fffff
 8001840:	000007fe 	.word	0x000007fe

08001844 <__aeabi_d2iz>:
 8001844:	000b      	movs	r3, r1
 8001846:	0002      	movs	r2, r0
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4d16      	ldr	r5, [pc, #88]	@ (80018a4 <__aeabi_d2iz+0x60>)
 800184c:	030c      	lsls	r4, r1, #12
 800184e:	b082      	sub	sp, #8
 8001850:	0049      	lsls	r1, r1, #1
 8001852:	2000      	movs	r0, #0
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	0b24      	lsrs	r4, r4, #12
 800185a:	0d49      	lsrs	r1, r1, #21
 800185c:	0fde      	lsrs	r6, r3, #31
 800185e:	42a9      	cmp	r1, r5
 8001860:	dd04      	ble.n	800186c <__aeabi_d2iz+0x28>
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <__aeabi_d2iz+0x64>)
 8001864:	4281      	cmp	r1, r0
 8001866:	dd03      	ble.n	8001870 <__aeabi_d2iz+0x2c>
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <__aeabi_d2iz+0x68>)
 800186a:	18f0      	adds	r0, r6, r3
 800186c:	b002      	add	sp, #8
 800186e:	bd70      	pop	{r4, r5, r6, pc}
 8001870:	2080      	movs	r0, #128	@ 0x80
 8001872:	0340      	lsls	r0, r0, #13
 8001874:	4320      	orrs	r0, r4
 8001876:	4c0e      	ldr	r4, [pc, #56]	@ (80018b0 <__aeabi_d2iz+0x6c>)
 8001878:	1a64      	subs	r4, r4, r1
 800187a:	2c1f      	cmp	r4, #31
 800187c:	dd08      	ble.n	8001890 <__aeabi_d2iz+0x4c>
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <__aeabi_d2iz+0x70>)
 8001880:	1a5b      	subs	r3, r3, r1
 8001882:	40d8      	lsrs	r0, r3
 8001884:	0003      	movs	r3, r0
 8001886:	4258      	negs	r0, r3
 8001888:	2e00      	cmp	r6, #0
 800188a:	d1ef      	bne.n	800186c <__aeabi_d2iz+0x28>
 800188c:	0018      	movs	r0, r3
 800188e:	e7ed      	b.n	800186c <__aeabi_d2iz+0x28>
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <__aeabi_d2iz+0x74>)
 8001892:	9a00      	ldr	r2, [sp, #0]
 8001894:	469c      	mov	ip, r3
 8001896:	0003      	movs	r3, r0
 8001898:	4461      	add	r1, ip
 800189a:	408b      	lsls	r3, r1
 800189c:	40e2      	lsrs	r2, r4
 800189e:	4313      	orrs	r3, r2
 80018a0:	e7f1      	b.n	8001886 <__aeabi_d2iz+0x42>
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	000003fe 	.word	0x000003fe
 80018a8:	0000041d 	.word	0x0000041d
 80018ac:	7fffffff 	.word	0x7fffffff
 80018b0:	00000433 	.word	0x00000433
 80018b4:	00000413 	.word	0x00000413
 80018b8:	fffffbed 	.word	0xfffffbed

080018bc <__aeabi_ui2d>:
 80018bc:	b510      	push	{r4, lr}
 80018be:	1e04      	subs	r4, r0, #0
 80018c0:	d010      	beq.n	80018e4 <__aeabi_ui2d+0x28>
 80018c2:	f000 f85d 	bl	8001980 <__clzsi2>
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <__aeabi_ui2d+0x44>)
 80018c8:	1a1b      	subs	r3, r3, r0
 80018ca:	055b      	lsls	r3, r3, #21
 80018cc:	0d5b      	lsrs	r3, r3, #21
 80018ce:	280a      	cmp	r0, #10
 80018d0:	dc0f      	bgt.n	80018f2 <__aeabi_ui2d+0x36>
 80018d2:	220b      	movs	r2, #11
 80018d4:	0021      	movs	r1, r4
 80018d6:	1a12      	subs	r2, r2, r0
 80018d8:	40d1      	lsrs	r1, r2
 80018da:	3015      	adds	r0, #21
 80018dc:	030a      	lsls	r2, r1, #12
 80018de:	4084      	lsls	r4, r0
 80018e0:	0b12      	lsrs	r2, r2, #12
 80018e2:	e001      	b.n	80018e8 <__aeabi_ui2d+0x2c>
 80018e4:	2300      	movs	r3, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	051b      	lsls	r3, r3, #20
 80018ea:	4313      	orrs	r3, r2
 80018ec:	0020      	movs	r0, r4
 80018ee:	0019      	movs	r1, r3
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	0022      	movs	r2, r4
 80018f4:	380b      	subs	r0, #11
 80018f6:	4082      	lsls	r2, r0
 80018f8:	0312      	lsls	r2, r2, #12
 80018fa:	2400      	movs	r4, #0
 80018fc:	0b12      	lsrs	r2, r2, #12
 80018fe:	e7f3      	b.n	80018e8 <__aeabi_ui2d+0x2c>
 8001900:	0000041e 	.word	0x0000041e

08001904 <__aeabi_cdrcmple>:
 8001904:	4684      	mov	ip, r0
 8001906:	0010      	movs	r0, r2
 8001908:	4662      	mov	r2, ip
 800190a:	468c      	mov	ip, r1
 800190c:	0019      	movs	r1, r3
 800190e:	4663      	mov	r3, ip
 8001910:	e000      	b.n	8001914 <__aeabi_cdcmpeq>
 8001912:	46c0      	nop			@ (mov r8, r8)

08001914 <__aeabi_cdcmpeq>:
 8001914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001916:	f000 f911 	bl	8001b3c <__ledf2>
 800191a:	2800      	cmp	r0, #0
 800191c:	d401      	bmi.n	8001922 <__aeabi_cdcmpeq+0xe>
 800191e:	2100      	movs	r1, #0
 8001920:	42c8      	cmn	r0, r1
 8001922:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001924 <__aeabi_dcmpeq>:
 8001924:	b510      	push	{r4, lr}
 8001926:	f000 f855 	bl	80019d4 <__eqdf2>
 800192a:	4240      	negs	r0, r0
 800192c:	3001      	adds	r0, #1
 800192e:	bd10      	pop	{r4, pc}

08001930 <__aeabi_dcmplt>:
 8001930:	b510      	push	{r4, lr}
 8001932:	f000 f903 	bl	8001b3c <__ledf2>
 8001936:	2800      	cmp	r0, #0
 8001938:	db01      	blt.n	800193e <__aeabi_dcmplt+0xe>
 800193a:	2000      	movs	r0, #0
 800193c:	bd10      	pop	{r4, pc}
 800193e:	2001      	movs	r0, #1
 8001940:	bd10      	pop	{r4, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)

08001944 <__aeabi_dcmple>:
 8001944:	b510      	push	{r4, lr}
 8001946:	f000 f8f9 	bl	8001b3c <__ledf2>
 800194a:	2800      	cmp	r0, #0
 800194c:	dd01      	ble.n	8001952 <__aeabi_dcmple+0xe>
 800194e:	2000      	movs	r0, #0
 8001950:	bd10      	pop	{r4, pc}
 8001952:	2001      	movs	r0, #1
 8001954:	bd10      	pop	{r4, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)

08001958 <__aeabi_dcmpgt>:
 8001958:	b510      	push	{r4, lr}
 800195a:	f000 f87f 	bl	8001a5c <__gedf2>
 800195e:	2800      	cmp	r0, #0
 8001960:	dc01      	bgt.n	8001966 <__aeabi_dcmpgt+0xe>
 8001962:	2000      	movs	r0, #0
 8001964:	bd10      	pop	{r4, pc}
 8001966:	2001      	movs	r0, #1
 8001968:	bd10      	pop	{r4, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)

0800196c <__aeabi_dcmpge>:
 800196c:	b510      	push	{r4, lr}
 800196e:	f000 f875 	bl	8001a5c <__gedf2>
 8001972:	2800      	cmp	r0, #0
 8001974:	da01      	bge.n	800197a <__aeabi_dcmpge+0xe>
 8001976:	2000      	movs	r0, #0
 8001978:	bd10      	pop	{r4, pc}
 800197a:	2001      	movs	r0, #1
 800197c:	bd10      	pop	{r4, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)

08001980 <__clzsi2>:
 8001980:	211c      	movs	r1, #28
 8001982:	2301      	movs	r3, #1
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	4298      	cmp	r0, r3
 8001988:	d301      	bcc.n	800198e <__clzsi2+0xe>
 800198a:	0c00      	lsrs	r0, r0, #16
 800198c:	3910      	subs	r1, #16
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	4298      	cmp	r0, r3
 8001992:	d301      	bcc.n	8001998 <__clzsi2+0x18>
 8001994:	0a00      	lsrs	r0, r0, #8
 8001996:	3908      	subs	r1, #8
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	4298      	cmp	r0, r3
 800199c:	d301      	bcc.n	80019a2 <__clzsi2+0x22>
 800199e:	0900      	lsrs	r0, r0, #4
 80019a0:	3904      	subs	r1, #4
 80019a2:	a202      	add	r2, pc, #8	@ (adr r2, 80019ac <__clzsi2+0x2c>)
 80019a4:	5c10      	ldrb	r0, [r2, r0]
 80019a6:	1840      	adds	r0, r0, r1
 80019a8:	4770      	bx	lr
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	02020304 	.word	0x02020304
 80019b0:	01010101 	.word	0x01010101
	...

080019bc <__clzdi2>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	2900      	cmp	r1, #0
 80019c0:	d103      	bne.n	80019ca <__clzdi2+0xe>
 80019c2:	f7ff ffdd 	bl	8001980 <__clzsi2>
 80019c6:	3020      	adds	r0, #32
 80019c8:	e002      	b.n	80019d0 <__clzdi2+0x14>
 80019ca:	0008      	movs	r0, r1
 80019cc:	f7ff ffd8 	bl	8001980 <__clzsi2>
 80019d0:	bd10      	pop	{r4, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)

080019d4 <__eqdf2>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	46de      	mov	lr, fp
 80019da:	464e      	mov	r6, r9
 80019dc:	4645      	mov	r5, r8
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	000d      	movs	r5, r1
 80019e2:	0004      	movs	r4, r0
 80019e4:	0fe8      	lsrs	r0, r5, #31
 80019e6:	4683      	mov	fp, r0
 80019e8:	0309      	lsls	r1, r1, #12
 80019ea:	0fd8      	lsrs	r0, r3, #31
 80019ec:	0b09      	lsrs	r1, r1, #12
 80019ee:	4682      	mov	sl, r0
 80019f0:	4819      	ldr	r0, [pc, #100]	@ (8001a58 <__eqdf2+0x84>)
 80019f2:	468c      	mov	ip, r1
 80019f4:	031f      	lsls	r7, r3, #12
 80019f6:	0069      	lsls	r1, r5, #1
 80019f8:	005e      	lsls	r6, r3, #1
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0b3f      	lsrs	r7, r7, #12
 80019fe:	0d76      	lsrs	r6, r6, #21
 8001a00:	4281      	cmp	r1, r0
 8001a02:	d018      	beq.n	8001a36 <__eqdf2+0x62>
 8001a04:	4286      	cmp	r6, r0
 8001a06:	d00f      	beq.n	8001a28 <__eqdf2+0x54>
 8001a08:	2001      	movs	r0, #1
 8001a0a:	42b1      	cmp	r1, r6
 8001a0c:	d10d      	bne.n	8001a2a <__eqdf2+0x56>
 8001a0e:	45bc      	cmp	ip, r7
 8001a10:	d10b      	bne.n	8001a2a <__eqdf2+0x56>
 8001a12:	4294      	cmp	r4, r2
 8001a14:	d109      	bne.n	8001a2a <__eqdf2+0x56>
 8001a16:	45d3      	cmp	fp, sl
 8001a18:	d01c      	beq.n	8001a54 <__eqdf2+0x80>
 8001a1a:	2900      	cmp	r1, #0
 8001a1c:	d105      	bne.n	8001a2a <__eqdf2+0x56>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	4320      	orrs	r0, r4
 8001a22:	1e43      	subs	r3, r0, #1
 8001a24:	4198      	sbcs	r0, r3
 8001a26:	e000      	b.n	8001a2a <__eqdf2+0x56>
 8001a28:	2001      	movs	r0, #1
 8001a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2c:	46bb      	mov	fp, r7
 8001a2e:	46b2      	mov	sl, r6
 8001a30:	46a9      	mov	r9, r5
 8001a32:	46a0      	mov	r8, r4
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	2001      	movs	r0, #1
 8001a38:	428e      	cmp	r6, r1
 8001a3a:	d1f6      	bne.n	8001a2a <__eqdf2+0x56>
 8001a3c:	4661      	mov	r1, ip
 8001a3e:	4339      	orrs	r1, r7
 8001a40:	000f      	movs	r7, r1
 8001a42:	4317      	orrs	r7, r2
 8001a44:	4327      	orrs	r7, r4
 8001a46:	d1f0      	bne.n	8001a2a <__eqdf2+0x56>
 8001a48:	465b      	mov	r3, fp
 8001a4a:	4652      	mov	r2, sl
 8001a4c:	1a98      	subs	r0, r3, r2
 8001a4e:	1e43      	subs	r3, r0, #1
 8001a50:	4198      	sbcs	r0, r3
 8001a52:	e7ea      	b.n	8001a2a <__eqdf2+0x56>
 8001a54:	2000      	movs	r0, #0
 8001a56:	e7e8      	b.n	8001a2a <__eqdf2+0x56>
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__gedf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	4657      	mov	r7, sl
 8001a60:	464e      	mov	r6, r9
 8001a62:	4645      	mov	r5, r8
 8001a64:	46de      	mov	lr, fp
 8001a66:	b5e0      	push	{r5, r6, r7, lr}
 8001a68:	000d      	movs	r5, r1
 8001a6a:	030e      	lsls	r6, r1, #12
 8001a6c:	0049      	lsls	r1, r1, #1
 8001a6e:	0d49      	lsrs	r1, r1, #21
 8001a70:	468a      	mov	sl, r1
 8001a72:	0fdf      	lsrs	r7, r3, #31
 8001a74:	0fe9      	lsrs	r1, r5, #31
 8001a76:	46bc      	mov	ip, r7
 8001a78:	b083      	sub	sp, #12
 8001a7a:	4f2f      	ldr	r7, [pc, #188]	@ (8001b38 <__gedf2+0xdc>)
 8001a7c:	0004      	movs	r4, r0
 8001a7e:	4680      	mov	r8, r0
 8001a80:	9101      	str	r1, [sp, #4]
 8001a82:	0058      	lsls	r0, r3, #1
 8001a84:	0319      	lsls	r1, r3, #12
 8001a86:	4691      	mov	r9, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	0b09      	lsrs	r1, r1, #12
 8001a8c:	0d40      	lsrs	r0, r0, #21
 8001a8e:	45ba      	cmp	sl, r7
 8001a90:	d01d      	beq.n	8001ace <__gedf2+0x72>
 8001a92:	42b8      	cmp	r0, r7
 8001a94:	d00d      	beq.n	8001ab2 <__gedf2+0x56>
 8001a96:	4657      	mov	r7, sl
 8001a98:	2f00      	cmp	r7, #0
 8001a9a:	d12a      	bne.n	8001af2 <__gedf2+0x96>
 8001a9c:	4334      	orrs	r4, r6
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d124      	bne.n	8001aec <__gedf2+0x90>
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	d036      	beq.n	8001b14 <__gedf2+0xb8>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d141      	bne.n	8001b2e <__gedf2+0xd2>
 8001aaa:	4663      	mov	r3, ip
 8001aac:	0058      	lsls	r0, r3, #1
 8001aae:	3801      	subs	r0, #1
 8001ab0:	e015      	b.n	8001ade <__gedf2+0x82>
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	d138      	bne.n	8001b28 <__gedf2+0xcc>
 8001ab6:	4653      	mov	r3, sl
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <__gedf2+0x64>
 8001abc:	4326      	orrs	r6, r4
 8001abe:	d0f4      	beq.n	8001aaa <__gedf2+0x4e>
 8001ac0:	9b01      	ldr	r3, [sp, #4]
 8001ac2:	4563      	cmp	r3, ip
 8001ac4:	d107      	bne.n	8001ad6 <__gedf2+0x7a>
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	0058      	lsls	r0, r3, #1
 8001aca:	3801      	subs	r0, #1
 8001acc:	e007      	b.n	8001ade <__gedf2+0x82>
 8001ace:	4326      	orrs	r6, r4
 8001ad0:	d12a      	bne.n	8001b28 <__gedf2+0xcc>
 8001ad2:	4550      	cmp	r0, sl
 8001ad4:	d021      	beq.n	8001b1a <__gedf2+0xbe>
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	425f      	negs	r7, r3
 8001adc:	4338      	orrs	r0, r7
 8001ade:	b003      	add	sp, #12
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	46bb      	mov	fp, r7
 8001ae4:	46b2      	mov	sl, r6
 8001ae6:	46a9      	mov	r9, r5
 8001ae8:	46a0      	mov	r8, r4
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	2c00      	cmp	r4, #0
 8001aee:	d0dc      	beq.n	8001aaa <__gedf2+0x4e>
 8001af0:	e7e6      	b.n	8001ac0 <__gedf2+0x64>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d0ef      	beq.n	8001ad6 <__gedf2+0x7a>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	4563      	cmp	r3, ip
 8001afa:	d1ec      	bne.n	8001ad6 <__gedf2+0x7a>
 8001afc:	4582      	cmp	sl, r0
 8001afe:	dcea      	bgt.n	8001ad6 <__gedf2+0x7a>
 8001b00:	dbe1      	blt.n	8001ac6 <__gedf2+0x6a>
 8001b02:	428e      	cmp	r6, r1
 8001b04:	d8e7      	bhi.n	8001ad6 <__gedf2+0x7a>
 8001b06:	d1de      	bne.n	8001ac6 <__gedf2+0x6a>
 8001b08:	45c8      	cmp	r8, r9
 8001b0a:	d8e4      	bhi.n	8001ad6 <__gedf2+0x7a>
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	45c8      	cmp	r8, r9
 8001b10:	d2e5      	bcs.n	8001ade <__gedf2+0x82>
 8001b12:	e7d8      	b.n	8001ac6 <__gedf2+0x6a>
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	d0e2      	beq.n	8001ade <__gedf2+0x82>
 8001b18:	e7dd      	b.n	8001ad6 <__gedf2+0x7a>
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	d104      	bne.n	8001b28 <__gedf2+0xcc>
 8001b1e:	9b01      	ldr	r3, [sp, #4]
 8001b20:	4563      	cmp	r3, ip
 8001b22:	d1d8      	bne.n	8001ad6 <__gedf2+0x7a>
 8001b24:	2000      	movs	r0, #0
 8001b26:	e7da      	b.n	8001ade <__gedf2+0x82>
 8001b28:	2002      	movs	r0, #2
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	e7d7      	b.n	8001ade <__gedf2+0x82>
 8001b2e:	9b01      	ldr	r3, [sp, #4]
 8001b30:	4563      	cmp	r3, ip
 8001b32:	d0e6      	beq.n	8001b02 <__gedf2+0xa6>
 8001b34:	e7cf      	b.n	8001ad6 <__gedf2+0x7a>
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	000007ff 	.word	0x000007ff

08001b3c <__ledf2>:
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	4657      	mov	r7, sl
 8001b40:	464e      	mov	r6, r9
 8001b42:	4645      	mov	r5, r8
 8001b44:	46de      	mov	lr, fp
 8001b46:	b5e0      	push	{r5, r6, r7, lr}
 8001b48:	000d      	movs	r5, r1
 8001b4a:	030e      	lsls	r6, r1, #12
 8001b4c:	0049      	lsls	r1, r1, #1
 8001b4e:	0d49      	lsrs	r1, r1, #21
 8001b50:	468a      	mov	sl, r1
 8001b52:	0fdf      	lsrs	r7, r3, #31
 8001b54:	0fe9      	lsrs	r1, r5, #31
 8001b56:	46bc      	mov	ip, r7
 8001b58:	b083      	sub	sp, #12
 8001b5a:	4f2e      	ldr	r7, [pc, #184]	@ (8001c14 <__ledf2+0xd8>)
 8001b5c:	0004      	movs	r4, r0
 8001b5e:	4680      	mov	r8, r0
 8001b60:	9101      	str	r1, [sp, #4]
 8001b62:	0058      	lsls	r0, r3, #1
 8001b64:	0319      	lsls	r1, r3, #12
 8001b66:	4691      	mov	r9, r2
 8001b68:	0b36      	lsrs	r6, r6, #12
 8001b6a:	0b09      	lsrs	r1, r1, #12
 8001b6c:	0d40      	lsrs	r0, r0, #21
 8001b6e:	45ba      	cmp	sl, r7
 8001b70:	d01e      	beq.n	8001bb0 <__ledf2+0x74>
 8001b72:	42b8      	cmp	r0, r7
 8001b74:	d00d      	beq.n	8001b92 <__ledf2+0x56>
 8001b76:	4657      	mov	r7, sl
 8001b78:	2f00      	cmp	r7, #0
 8001b7a:	d127      	bne.n	8001bcc <__ledf2+0x90>
 8001b7c:	4334      	orrs	r4, r6
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d133      	bne.n	8001bea <__ledf2+0xae>
 8001b82:	430a      	orrs	r2, r1
 8001b84:	d034      	beq.n	8001bf0 <__ledf2+0xb4>
 8001b86:	2c00      	cmp	r4, #0
 8001b88:	d140      	bne.n	8001c0c <__ledf2+0xd0>
 8001b8a:	4663      	mov	r3, ip
 8001b8c:	0058      	lsls	r0, r3, #1
 8001b8e:	3801      	subs	r0, #1
 8001b90:	e015      	b.n	8001bbe <__ledf2+0x82>
 8001b92:	4311      	orrs	r1, r2
 8001b94:	d112      	bne.n	8001bbc <__ledf2+0x80>
 8001b96:	4653      	mov	r3, sl
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <__ledf2+0x64>
 8001b9c:	4326      	orrs	r6, r4
 8001b9e:	d0f4      	beq.n	8001b8a <__ledf2+0x4e>
 8001ba0:	9b01      	ldr	r3, [sp, #4]
 8001ba2:	4563      	cmp	r3, ip
 8001ba4:	d01d      	beq.n	8001be2 <__ledf2+0xa6>
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	425f      	negs	r7, r3
 8001bac:	4338      	orrs	r0, r7
 8001bae:	e006      	b.n	8001bbe <__ledf2+0x82>
 8001bb0:	4326      	orrs	r6, r4
 8001bb2:	d103      	bne.n	8001bbc <__ledf2+0x80>
 8001bb4:	4550      	cmp	r0, sl
 8001bb6:	d1f6      	bne.n	8001ba6 <__ledf2+0x6a>
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	d01c      	beq.n	8001bf6 <__ledf2+0xba>
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	b003      	add	sp, #12
 8001bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc2:	46bb      	mov	fp, r7
 8001bc4:	46b2      	mov	sl, r6
 8001bc6:	46a9      	mov	r9, r5
 8001bc8:	46a0      	mov	r8, r4
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d0ea      	beq.n	8001ba6 <__ledf2+0x6a>
 8001bd0:	9b01      	ldr	r3, [sp, #4]
 8001bd2:	4563      	cmp	r3, ip
 8001bd4:	d1e7      	bne.n	8001ba6 <__ledf2+0x6a>
 8001bd6:	4582      	cmp	sl, r0
 8001bd8:	dce5      	bgt.n	8001ba6 <__ledf2+0x6a>
 8001bda:	db02      	blt.n	8001be2 <__ledf2+0xa6>
 8001bdc:	428e      	cmp	r6, r1
 8001bde:	d8e2      	bhi.n	8001ba6 <__ledf2+0x6a>
 8001be0:	d00e      	beq.n	8001c00 <__ledf2+0xc4>
 8001be2:	9b01      	ldr	r3, [sp, #4]
 8001be4:	0058      	lsls	r0, r3, #1
 8001be6:	3801      	subs	r0, #1
 8001be8:	e7e9      	b.n	8001bbe <__ledf2+0x82>
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	d0cd      	beq.n	8001b8a <__ledf2+0x4e>
 8001bee:	e7d7      	b.n	8001ba0 <__ledf2+0x64>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d0e4      	beq.n	8001bbe <__ledf2+0x82>
 8001bf4:	e7d7      	b.n	8001ba6 <__ledf2+0x6a>
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	4563      	cmp	r3, ip
 8001bfc:	d0df      	beq.n	8001bbe <__ledf2+0x82>
 8001bfe:	e7d2      	b.n	8001ba6 <__ledf2+0x6a>
 8001c00:	45c8      	cmp	r8, r9
 8001c02:	d8d0      	bhi.n	8001ba6 <__ledf2+0x6a>
 8001c04:	2000      	movs	r0, #0
 8001c06:	45c8      	cmp	r8, r9
 8001c08:	d2d9      	bcs.n	8001bbe <__ledf2+0x82>
 8001c0a:	e7ea      	b.n	8001be2 <__ledf2+0xa6>
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	4563      	cmp	r3, ip
 8001c10:	d0e4      	beq.n	8001bdc <__ledf2+0xa0>
 8001c12:	e7c8      	b.n	8001ba6 <__ledf2+0x6a>
 8001c14:	000007ff 	.word	0x000007ff

08001c18 <main>:
#include "ADF4351.h"
#include "AD9959.h"
#include "RFFC5071.h"
#include "MAX5712.h"

int main(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    // 1) Core & system clocks
    SystemInit();
 8001c1c:	f000 f86e 	bl	8001cfc <SystemInit>
    SystemCoreClockUpdate();
 8001c20:	f000 f878 	bl	8001d14 <SystemCoreClockUpdate>

    // 2) Peripherals: GPIO, delay, buses, chip-select, UART
    GPIO_LowLevel_Init();        // configure PA5 LED, PAx… for SWD, etc.
 8001c24:	f000 f948 	bl	8001eb8 <GPIO_LowLevel_Init>
    delay_init();                // SysTick → ms ticks
 8001c28:	f000 f90e 	bl	8001e48 <delay_init>
    I2C_LowLevel_Init();         // PB6=SCL, PB7=SDA
 8001c2c:	f000 f952 	bl	8001ed4 <I2C_LowLevel_Init>
    NSS_LowLevel_Init();                  // all SPI‐CS pins
 8001c30:	f000 fde0 	bl	80027f4 <NSS_LowLevel_Init>
    SPI_LowLevel_Init();         // PA5=SCK, PA6=MISO, PA7=MOSI, PA4=NSS
 8001c34:	f000 ff0a 	bl	8002a4c <SPI_LowLevel_Init>
    USARTx_LowLevel_Init(115200);// PA9=TX, PA10=RX, 115200 bps
 8001c38:	23e1      	movs	r3, #225	@ 0xe1
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 ffab 	bl	8002b98 <USARTx_LowLevel_Init>

    // 3) Initialize each device
    AXP209_Init();
 8001c42:	f000 fbbe 	bl	80023c2 <AXP209_Init>
    SI5351_Init();
 8001c46:	f000 fd12 	bl	800266e <SI5351_Init>
    SI4735_PowerUpFM();
 8001c4a:	f000 fc91 	bl	8002570 <SI4735_PowerUpFM>
    AD9834_Init();
 8001c4e:	f000 fa3f 	bl	80020d0 <AD9834_Init>
    ADF4351_Init();
 8001c52:	f000 fb73 	bl	800233c <ADF4351_Init>
    AD9959_Init();
 8001c56:	f000 fb22 	bl	800229e <AD9959_Init>
    RFFC5071_Init();
 8001c5a:	f000 fc2f 	bl	80024bc <RFFC5071_Init>
    MAX5712_Init();
 8001c5e:	f000 fbe4 	bl	800242a <MAX5712_Init>

    // 4) Example: configure each in turn
    AXP209_WriteReg(0x10, 0x01);         // turn on LDO1
 8001c62:	2101      	movs	r1, #1
 8001c64:	2010      	movs	r0, #16
 8001c66:	f000 fbb6 	bl	80023d6 <AXP209_WriteReg>
    SI5351_EnableOutput(0, true);        // enable CLK0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 fd41 	bl	80026f4 <SI5351_EnableOutput>
    SI4735_TuneFM(10110);               // tune to 101.100 MHz
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <main+0x94>)
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 fc9f 	bl	80025b8 <SI4735_TuneFM>
    AD9834_SetFrequency(1000000);             // 1 MHz sine
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <main+0x98>)
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 fa8b 	bl	8002198 <AD9834_SetFrequency>
    ADF4351_WriteReg(ADF4351_REG0, 0x1234567);
 8001c82:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <main+0x9c>)
 8001c84:	0019      	movs	r1, r3
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 fb68 	bl	800235c <ADF4351_WriteReg>
    AD9959_SetFreq(0, 10000000);         // 10 MHz DDS on channel 0
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <main+0xa0>)
 8001c8e:	0019      	movs	r1, r3
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 fb0f 	bl	80022b4 <AD9959_SetFreq>
    RFFC5071_SetLO(100000000U);          // 100 MHz LO
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <main+0xa4>)
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 fc4b 	bl	8002534 <RFFC5071_SetLO>
    MAX5712_SetValue(0x800);             // mid-scale DAC
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fbc9 	bl	800243a <MAX5712_SetValue>

    // 5) Main loop: here you could parse commands over USART,
    //    or cycle through devices, or idle.
    while (1) {
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	e7fd      	b.n	8001ca8 <main+0x90>
 8001cac:	0000277e 	.word	0x0000277e
 8001cb0:	000f4240 	.word	0x000f4240
 8001cb4:	01234567 	.word	0x01234567
 8001cb8:	00989680 	.word	0x00989680
 8001cbc:	05f5e100 	.word	0x05f5e100

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	46c0      	nop			@ (mov r8, r8)
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
extern __IO uint32_t uwTick;
void SysTick_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0


 /* USER CODE BEGIN SysTick_IRQn 1 */


uwTick++;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <SysTick_Handler+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	4b02      	ldr	r3, [pc, #8]	@ (8001cf8 <SysTick_Handler+0x14>)
 8001cf0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000020 	.word	0x20000020

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <SystemInit+0x14>)
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	0512      	lsls	r2, r2, #20
 8001d06:	609a      	str	r2, [r3, #8]
#endif
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t hsidiv;
  uint32_t sysdiv;
#if defined(RCC_CR_SYSDIV)
  sysdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001d1a:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <SystemCoreClockUpdate+0xd0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
#else
  sysdiv = 1U;
#endif /* RCC_CR_SYSDIV */

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <SystemCoreClockUpdate+0xd0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2238      	movs	r2, #56	@ 0x38
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d023      	beq.n	8001d7c <SystemCoreClockUpdate+0x68>
 8001d34:	d82c      	bhi.n	8001d90 <SystemCoreClockUpdate+0x7c>
 8001d36:	2b18      	cmp	r3, #24
 8001d38:	d016      	beq.n	8001d68 <SystemCoreClockUpdate+0x54>
 8001d3a:	d829      	bhi.n	8001d90 <SystemCoreClockUpdate+0x7c>
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d00a      	beq.n	8001d56 <SystemCoreClockUpdate+0x42>
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d125      	bne.n	8001d90 <SystemCoreClockUpdate+0x7c>
  {
    case RCC_CFGR_SWS_0:                /* HSE used as system clock */
      SystemCoreClock = (HSE_VALUE / sysdiv);
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4828      	ldr	r0, [pc, #160]	@ (8001de8 <SystemCoreClockUpdate+0xd4>)
 8001d48:	f7fe f9de 	bl	8000108 <__udivsi3>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	001a      	movs	r2, r3
 8001d50:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001d52:	601a      	str	r2, [r3, #0]
      break;
 8001d54:	e033      	b.n	8001dbe <SystemCoreClockUpdate+0xaa>

#if defined(RCC_HSI48_SUPPORT)
    case RCC_CFGR_SW_1:                 /* HSI48 used as system clock */
      SystemCoreClock = (HSI48_VALUE / sysdiv);
 8001d56:	68f9      	ldr	r1, [r7, #12]
 8001d58:	4823      	ldr	r0, [pc, #140]	@ (8001de8 <SystemCoreClockUpdate+0xd4>)
 8001d5a:	f7fe f9d5 	bl	8000108 <__udivsi3>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	001a      	movs	r2, r3
 8001d62:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001d64:	601a      	str	r2, [r3, #0]
      break;
 8001d66:	e02a      	b.n	8001dbe <SystemCoreClockUpdate+0xaa>
#endif /* RCC_HSI48_SUPPORT */

    case (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0):  /* LSI used as system clock */
      SystemCoreClock = (LSI_VALUE / sysdiv);
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	23fa      	movs	r3, #250	@ 0xfa
 8001d6c:	01d8      	lsls	r0, r3, #7
 8001d6e:	f7fe f9cb 	bl	8000108 <__udivsi3>
 8001d72:	0003      	movs	r3, r0
 8001d74:	001a      	movs	r2, r3
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001d78:	601a      	str	r2, [r3, #0]
      break;
 8001d7a:	e020      	b.n	8001dbe <SystemCoreClockUpdate+0xaa>

    case RCC_CFGR_SWS_2:                /* LSE used as system clock */
      SystemCoreClock = (LSE_VALUE / sysdiv);
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	0218      	lsls	r0, r3, #8
 8001d82:	f7fe f9c1 	bl	8000108 <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	001a      	movs	r2, r3
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001d8c:	601a      	str	r2, [r3, #0]
      break;
 8001d8e:	e016      	b.n	8001dbe <SystemCoreClockUpdate+0xaa>

    case 0x00000000U:                   /* HSI used as system clock */
    default:                            /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <SystemCoreClockUpdate+0xd0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0adb      	lsrs	r3, r3, #11
 8001d96:	2207      	movs	r2, #7
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = ((HSI_VALUE / sysdiv) / hsidiv);
 8001da2:	68f9      	ldr	r1, [r7, #12]
 8001da4:	4810      	ldr	r0, [pc, #64]	@ (8001de8 <SystemCoreClockUpdate+0xd4>)
 8001da6:	f7fe f9af 	bl	8000108 <__udivsi3>
 8001daa:	0003      	movs	r3, r0
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7fe f9aa 	bl	8000108 <__udivsi3>
 8001db4:	0003      	movs	r3, r0
 8001db6:	001a      	movs	r2, r3
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001dba:	601a      	str	r2, [r3, #0]
      break;
 8001dbc:	46c0      	nop			@ (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <SystemCoreClockUpdate+0xd0>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <SystemCoreClockUpdate+0xdc>)
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	58d3      	ldr	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <SystemCoreClockUpdate+0xd8>)
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	46c0      	nop			@ (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	02dc6c00 	.word	0x02dc6c00
 8001dec:	20000000 	.word	0x20000000
 8001df0:	08002cd8 	.word	0x08002cd8

08001df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df8:	f7ff ff80 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dfe:	e003      	b.n	8001e08 <LoopCopyDataInit>

08001e00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001e02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e06:	3104      	adds	r1, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e08:	480a      	ldr	r0, [pc, #40]	@ (8001e34 <LoopForever+0xa>)
  ldr r3, =_edata
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <LoopForever+0xe>)
  adds r2, r0, r1
 8001e0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e10:	d3f6      	bcc.n	8001e00 <CopyDataInit>
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopForever+0x12>)
  b LoopFillZerobss
 8001e14:	e002      	b.n	8001e1c <LoopFillZerobss>

08001e16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  str  r3, [r2]
 8001e18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1a:	3204      	adds	r2, #4

08001e1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <LoopForever+0x16>)
  cmp r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e20:	d3f9      	bcc.n	8001e16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001e22:	f000 ff09 	bl	8002c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7ff fef7 	bl	8001c18 <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   r0, =_estack
 8001e2c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001e30:	08002d28 	.word	0x08002d28
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e38:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001e3c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001e40:	20000024 	.word	0x20000024

08001e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_IRQHandler>
	...

08001e48 <delay_init>:

/*void SysTick_Handler(void) {
    uwTick++;
}*/

void delay_init(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    // SystemCoreClock =  48 MHz

    uwTick = 0;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <delay_init+0x34>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    SysTick->LOAD  = (SystemCoreClock / 1000) - 1;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <delay_init+0x38>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	22fa      	movs	r2, #250	@ 0xfa
 8001e58:	0091      	lsls	r1, r2, #2
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f954 	bl	8000108 <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	001a      	movs	r2, r3
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <delay_init+0x3c>)
 8001e66:	3a01      	subs	r2, #1
 8001e68:	605a      	str	r2, [r3, #4]
    SysTick->VAL   = 0;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <delay_init+0x3c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <delay_init+0x3c>)
 8001e72:	2207      	movs	r2, #7
 8001e74:	601a      	str	r2, [r3, #0]
                   | SysTick_CTRL_TICKINT_Msk
                   | SysTick_CTRL_ENABLE_Msk;
}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000020 	.word	0x20000020
 8001e80:	20000000 	.word	0x20000000
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <delay_ms>:

void delay_ms(uint32_t ms) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    uint32_t start = uwTick;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <delay_ms+0x2c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
    while ((uwTick - start) < ms) {
 8001e96:	e000      	b.n	8001e9a <delay_ms+0x12>
        __WFE();  // wait for next tick
 8001e98:	bf20      	wfe
    while ((uwTick - start) < ms) {
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <delay_ms+0x2c>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <delay_ms+0x10>
    }
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	20000020 	.word	0x20000020

08001eb8 <GPIO_LowLevel_Init>:
#include "GPIO.h"
#include "stm32c0xx.h"
#include <stdbool.h>
#include <stdint.h>

void GPIO_LowLevel_Init(void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA, GPIOB
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN ;
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <GPIO_LowLevel_Init+0x18>)
 8001ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <GPIO_LowLevel_Init+0x18>)
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	635a      	str	r2, [r3, #52]	@ 0x34


}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <I2C_LowLevel_Init>:
#include "stm32c0xx.h"
#include "I2C.h"

#define I2C_PORT I2C1

void I2C_LowLevel_Init(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    RCC->IOPENR   |= RCC_IOPENR_GPIOBEN;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <I2C_LowLevel_Init+0x90>)
 8001eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <I2C_LowLevel_Init+0x90>)
 8001ede:	2102      	movs	r1, #2
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->APBENR1  |= RCC_APBENR1_I2C1EN;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <I2C_LowLevel_Init+0x90>)
 8001ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <I2C_LowLevel_Init+0x90>)
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	0389      	lsls	r1, r1, #14
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Configure PB6 (SCL) and PB7 (SDA) as alternate function AF6
    GPIOB->MODER   &= ~((3U << (6 * 2)) | (3U << (7 * 2)));
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001ef8:	491c      	ldr	r1, [pc, #112]	@ (8001f6c <I2C_LowLevel_Init+0x98>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
    GPIOB->MODER   |=  ((2U << (6 * 2)) | (2U << (7 * 2)));  // AF mode
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f04:	21a0      	movs	r1, #160	@ 0xa0
 8001f06:	0209      	lsls	r1, r1, #8
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
    GPIOB->AFR[0]  &= ~((0xFU << (6 * 4)) | (0xFU << (7 * 4)));
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f12:	0212      	lsls	r2, r2, #8
 8001f14:	0a12      	lsrs	r2, r2, #8
 8001f16:	621a      	str	r2, [r3, #32]
    GPIOB->AFR[0]  |=  ((6U << (6 * 4)) | (6U << (7 * 4)));  // AF6 = I2C1
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f1e:	21cc      	movs	r1, #204	@ 0xcc
 8001f20:	05c9      	lsls	r1, r1, #23
 8001f22:	430a      	orrs	r2, r1
 8001f24:	621a      	str	r2, [r3, #32]
    GPIOB->OTYPER  |=  (1U << 6) | (1U << 7);               // Open-drain
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f2c:	21c0      	movs	r1, #192	@ 0xc0
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
    GPIOB->PUPDR   |=  (1U << (6 * 2)) | (1U << (7 * 2));   // Pull-up
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <I2C_LowLevel_Init+0x94>)
 8001f38:	21a0      	movs	r1, #160	@ 0xa0
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]

    I2C_PORT->CR1   &= ~I2C_CR1_PE;  // Disable before config
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <I2C_LowLevel_Init+0x9c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <I2C_LowLevel_Init+0x9c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
    I2C_PORT->TIMINGR = 0x00303D5B;  // 400 kHz (example)
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <I2C_LowLevel_Init+0x9c>)
 8001f4e:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <I2C_LowLevel_Init+0xa0>)
 8001f50:	611a      	str	r2, [r3, #16]
    I2C_PORT->CR1   |= I2C_CR1_PE;   // Enable I2C
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <I2C_LowLevel_Init+0x9c>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <I2C_LowLevel_Init+0x9c>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	50000400 	.word	0x50000400
 8001f6c:	ffff0fff 	.word	0xffff0fff
 8001f70:	40005400 	.word	0x40005400
 8001f74:	00303d5b 	.word	0x00303d5b

08001f78 <I2C_Start>:

bool I2C_Start(uint8_t address, bool read) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	0002      	movs	r2, r0
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	1dbb      	adds	r3, r7, #6
 8001f86:	1c0a      	adds	r2, r1, #0
 8001f88:	701a      	strb	r2, [r3, #0]
    I2C_PORT->CR2 = (address << 1) |
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	005a      	lsls	r2, r3, #1
                    (read ? I2C_CR2_RD_WRN : 0) |
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <I2C_Start+0x26>
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	e000      	b.n	8001fa0 <I2C_Start+0x28>
 8001f9e:	2300      	movs	r3, #0
    I2C_PORT->CR2 = (address << 1) |
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <I2C_Start+0x7c>)
                    (read ? I2C_CR2_RD_WRN : 0) |
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	0249      	lsls	r1, r1, #9
 8001fa8:	430a      	orrs	r2, r1
    I2C_PORT->CR2 = (address << 1) |
 8001faa:	605a      	str	r2, [r3, #4]
                    (1U << 16);  // 1 byte
    I2C_PORT->CR2 |= I2C_CR2_START;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <I2C_Start+0x7c>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <I2C_Start+0x7c>)
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

    while (!(I2C_PORT->ISR & (read ? I2C_ISR_RXNE : I2C_ISR_TXIS)) &&
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <I2C_Start+0x7c>)
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	1dbb      	adds	r3, r7, #6
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <I2C_Start+0x54>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e000      	b.n	8001fce <I2C_Start+0x56>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d104      	bne.n	8001fdc <I2C_Start+0x64>
           !(I2C_PORT->ISR & I2C_ISR_NACKF));
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <I2C_Start+0x7c>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	4013      	ands	r3, r2
    while (!(I2C_PORT->ISR & (read ? I2C_ISR_RXNE : I2C_ISR_TXIS)) &&
 8001fda:	d0ef      	beq.n	8001fbc <I2C_Start+0x44>

    return !(I2C_PORT->ISR & I2C_ISR_NACKF);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <I2C_Start+0x7c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	425a      	negs	r2, r3
 8001fe6:	4153      	adcs	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	40005400 	.word	0x40005400

08001ff8 <I2C_Write>:

bool I2C_Write(uint8_t data) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	0002      	movs	r2, r0
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	701a      	strb	r2, [r3, #0]
    I2C_PORT->TXDR = data;
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <I2C_Write+0x2c>)
 8002006:	1dfa      	adds	r2, r7, #7
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
    while (!(I2C_PORT->ISR & I2C_ISR_TXE));
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <I2C_Write+0x2c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d0fa      	beq.n	800200e <I2C_Write+0x16>
    return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	40005400 	.word	0x40005400

08002028 <I2C_Read>:

uint8_t I2C_Read(bool ack) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	701a      	strb	r2, [r3, #0]
    if (ack)
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <I2C_Read+0x22>
        I2C_PORT->CR2 &= ~I2C_CR2_NACK;
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <I2C_Read+0x4c>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <I2C_Read+0x4c>)
 8002042:	490d      	ldr	r1, [pc, #52]	@ (8002078 <I2C_Read+0x50>)
 8002044:	400a      	ands	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e006      	b.n	8002058 <I2C_Read+0x30>
    else
        I2C_PORT->CR2 |= I2C_CR2_NACK;
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <I2C_Read+0x4c>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <I2C_Read+0x4c>)
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	0209      	lsls	r1, r1, #8
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

    while (!(I2C_PORT->ISR & I2C_ISR_RXNE));
 8002058:	46c0      	nop			@ (mov r8, r8)
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <I2C_Read+0x4c>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d0fa      	beq.n	800205a <I2C_Read+0x32>
    return (uint8_t)I2C_PORT->RXDR;
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <I2C_Read+0x4c>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	b2db      	uxtb	r3, r3
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	40005400 	.word	0x40005400
 8002078:	ffff7fff 	.word	0xffff7fff

0800207c <I2C_Stop>:

void I2C_Stop(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    I2C_PORT->CR2 |= I2C_CR2_STOP;
 8002080:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <I2C_Stop+0x28>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <I2C_Stop+0x28>)
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	01c9      	lsls	r1, r1, #7
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
    while (I2C_PORT->CR2 & I2C_CR2_STOP);  // Wait for stop to clear
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <I2C_Stop+0x28>)
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	01db      	lsls	r3, r3, #7
 8002098:	4013      	ands	r3, r2
 800209a:	d1f9      	bne.n	8002090 <I2C_Stop+0x14>
}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40005400 	.word	0x40005400

080020a8 <AD9834_Delay>:
// Define SPI1 and NSS pin
#define AD9834_SPI SPI1
#define AD9834_NSS_PORT GPIOA
#define AD9834_NSS_PIN  4

void AD9834_Delay(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 1000; i++) __NOP();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	e003      	b.n	80020bc <AD9834_Delay+0x14>
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3301      	adds	r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	23fa      	movs	r3, #250	@ 0xfa
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf6      	blt.n	80020b4 <AD9834_Delay+0xc>
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <AD9834_Init>:

void AD9834_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    // NSS pin high
    AD9834_NSS_PORT->BSRR = AD9834_NSS_PIN;
 80020d4:	23a0      	movs	r3, #160	@ 0xa0
 80020d6:	05db      	lsls	r3, r3, #23
 80020d8:	2204      	movs	r2, #4
 80020da:	619a      	str	r2, [r3, #24]
    AD9834_Delay();
 80020dc:	f7ff ffe4 	bl	80020a8 <AD9834_Delay>

    // Reset AD9834
    AD9834_WriteRegister(0x2100); // Control reg: RESET + SINE wave
 80020e0:	2384      	movs	r3, #132	@ 0x84
 80020e2:	019b      	lsls	r3, r3, #6
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f817 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(0x4000); // FREQ0 LSB
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	01db      	lsls	r3, r3, #7
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f812 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(0x4000); // FREQ0 MSB
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	01db      	lsls	r3, r3, #7
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f80d 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(0xC000); // PHASE0
 80020fe:	23c0      	movs	r3, #192	@ 0xc0
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f808 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(0x2000); // Clear RESET bit
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	0018      	movs	r0, r3
 800210e:	f000 f803 	bl	8002118 <AD9834_WriteRegister>
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <AD9834_WriteRegister>:

void AD9834_WriteRegister(uint16_t data) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	0002      	movs	r2, r0
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	801a      	strh	r2, [r3, #0]
    // NSS low
    AD9834_NSS_PORT->BRR = AD9834_NSS_PIN;
 8002124:	23a0      	movs	r3, #160	@ 0xa0
 8002126:	05db      	lsls	r3, r3, #23
 8002128:	2204      	movs	r2, #4
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28

    // Wait for TXE
    while (!(AD9834_SPI->SR & SPI_SR_TXE));
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0fa      	beq.n	800212e <AD9834_WriteRegister+0x16>
    AD9834_SPI->DR = (data >> 8) & 0xFF;
 8002138:	1dbb      	adds	r3, r7, #6
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29b      	uxth	r3, r3
 8002140:	0019      	movs	r1, r3
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 8002144:	22ff      	movs	r2, #255	@ 0xff
 8002146:	400a      	ands	r2, r1
 8002148:	60da      	str	r2, [r3, #12]

    while (!(AD9834_SPI->SR & SPI_SR_TXE));
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d0fa      	beq.n	800214c <AD9834_WriteRegister+0x34>
    AD9834_SPI->DR = data & 0xFF;
 8002156:	1dbb      	adds	r3, r7, #6
 8002158:	881a      	ldrh	r2, [r3, #0]
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 800215c:	21ff      	movs	r1, #255	@ 0xff
 800215e:	400a      	ands	r2, r1
 8002160:	60da      	str	r2, [r3, #12]

    while (!(AD9834_SPI->SR & SPI_SR_RXNE));
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d0fa      	beq.n	8002164 <AD9834_WriteRegister+0x4c>
    (void)AD9834_SPI->DR;
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 8002170:	68db      	ldr	r3, [r3, #12]

    // NSS high
    while (AD9834_SPI->SR & SPI_SR_BSY);
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <AD9834_WriteRegister+0x7c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	4013      	ands	r3, r2
 800217c:	d1fa      	bne.n	8002174 <AD9834_WriteRegister+0x5c>
    AD9834_NSS_PORT->BSRR = AD9834_NSS_PIN;
 800217e:	23a0      	movs	r3, #160	@ 0xa0
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	2204      	movs	r2, #4
 8002184:	619a      	str	r2, [r3, #24]

    AD9834_Delay();
 8002186:	f7ff ff8f 	bl	80020a8 <AD9834_Delay>
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40013000 	.word	0x40013000

08002198 <AD9834_SetFrequency>:

void AD9834_SetFrequency(uint32_t frequency) {
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    uint32_t freq_word = (uint32_t)((frequency * 268435456.0) / 25000000.0); // assuming 25 MHz MCLK
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fb8b 	bl	80018bc <__aeabi_ui2d>
 80021a6:	2200      	movs	r2, #0
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <AD9834_SetFrequency+0x94>)
 80021aa:	f7fe fc5b 	bl	8000a64 <__aeabi_dmul>
 80021ae:	0002      	movs	r2, r0
 80021b0:	000b      	movs	r3, r1
 80021b2:	0010      	movs	r0, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	2200      	movs	r2, #0
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <AD9834_SetFrequency+0x98>)
 80021ba:	f7fe f93b 	bl	8000434 <__aeabi_ddiv>
 80021be:	0002      	movs	r2, r0
 80021c0:	000b      	movs	r3, r1
 80021c2:	0010      	movs	r0, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	f7fe f84b 	bl	8000260 <__aeabi_d2uiz>
 80021ca:	0003      	movs	r3, r0
 80021cc:	60fb      	str	r3, [r7, #12]

    uint16_t lsb = 0x4000 | (freq_word & 0x3FFF);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	049b      	lsls	r3, r3, #18
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	240a      	movs	r4, #10
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	01c9      	lsls	r1, r1, #7
 80021e0:	430a      	orrs	r2, r1
 80021e2:	801a      	strh	r2, [r3, #0]
    uint16_t msb = 0x4000 | ((freq_word >> 14) & 0x3FFF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0b9b      	lsrs	r3, r3, #14
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	049b      	lsls	r3, r3, #18
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	2508      	movs	r5, #8
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	01c9      	lsls	r1, r1, #7
 80021f8:	430a      	orrs	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]

    AD9834_WriteRegister(0x2100); // RESET enabled
 80021fc:	2384      	movs	r3, #132	@ 0x84
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff ff89 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(lsb);
 8002206:	193b      	adds	r3, r7, r4
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff84 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(msb);
 8002210:	197b      	adds	r3, r7, r5
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff ff7f 	bl	8002118 <AD9834_WriteRegister>
    AD9834_WriteRegister(0x2000); // Clear RESET
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ff7a 	bl	8002118 <AD9834_WriteRegister>
}
 8002224:	46c0      	nop			@ (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	41b00000 	.word	0x41b00000
 8002230:	4177d784 	.word	0x4177d784

08002234 <AD9959_WriteRaw>:
#include "SPI.h"
#include "NSS.h"
#include "delay.h"

// send raw SPI command: [7-bit addr<<1 | write = 0], then 32-bit data MSB first
static bool AD9959_WriteRaw(uint8_t addr, uint32_t data) {
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	701a      	strb	r2, [r3, #0]
    uint8_t instr = (addr << 1) & 0xFE;  // write mode
 8002242:	240f      	movs	r4, #15
 8002244:	193a      	adds	r2, r7, r4
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	18db      	adds	r3, r3, r3
 800224c:	7013      	strb	r3, [r2, #0]
    AD9959_Select();
 800224e:	f000 fbd3 	bl	80029f8 <AD9959_Select>
    SPI_TransmitByte(instr);
 8002252:	193b      	adds	r3, r7, r4
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fc68 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((data >> 24) & 0xFF);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0e1b      	lsrs	r3, r3, #24
 8002260:	b2db      	uxtb	r3, r3
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fc62 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((data >> 16) & 0xFF);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	b2db      	uxtb	r3, r3
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fc5c 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((data >>  8) & 0xFF);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b2db      	uxtb	r3, r3
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fc56 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((data      ) & 0xFF);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fc51 	bl	8002b2c <SPI_TransmitByte>
    AD9959_Deselect();
 800228a:	f000 fbbf 	bl	8002a0c <AD9959_Deselect>
    delay_ms(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff fdfa 	bl	8001e88 <delay_ms>
    return true;
 8002294:	2301      	movs	r3, #1
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b005      	add	sp, #20
 800229c:	bd90      	pop	{r4, r7, pc}

0800229e <AD9959_Init>:
// Initialize AD9959: reset and enable I/O update, profile control
bool AD9959_Init(void) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	af00      	add	r7, sp, #0
    // CFR0: bit0 = IO_UPDATE enable , bit1 = profile enable
    return AD9959_WriteRaw(AD9959_REG_CFR0, 0x00000003);
 80022a2:	2103      	movs	r1, #3
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff ffc5 	bl	8002234 <AD9959_WriteRaw>
 80022aa:	0003      	movs	r3, r0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <AD9959_SetFreq>:
bool AD9959_WriteReg(uint8_t addr, uint32_t data) {
    if (addr > 7) return false;
    return AD9959_WriteRaw(addr, data);
}
// set output frequency for channel (0..3) via FIW caculation
bool AD9959_SetFreq(uint8_t channel, uint32_t freq_Hz) {
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6039      	str	r1, [r7, #0]
 80022bc:	1df9      	adds	r1, r7, #7
 80022be:	7008      	strb	r0, [r1, #0]
    if (channel > 3) return false;
 80022c0:	1df9      	adds	r1, r7, #7
 80022c2:	7809      	ldrb	r1, [r1, #0]
 80022c4:	2903      	cmp	r1, #3
 80022c6:	d901      	bls.n	80022cc <AD9959_SetFreq+0x18>
 80022c8:	2300      	movs	r3, #0
 80022ca:	e01e      	b.n	800230a <AD9959_SetFreq+0x56>
    //FIW = freq_hz * 2^32 / SYCLK(e.g,500 MHZ)
    uint64_t ftw = ((uint64_t)freq_Hz << 32) / 500000000ULL;
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	000a      	movs	r2, r1
 80022d0:	2100      	movs	r1, #0
 80022d2:	000b      	movs	r3, r1
 80022d4:	0015      	movs	r5, r2
 80022d6:	2300      	movs	r3, #0
 80022d8:	001c      	movs	r4, r3
 80022da:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <AD9959_SetFreq+0x60>)
 80022dc:	2300      	movs	r3, #0
 80022de:	0020      	movs	r0, r4
 80022e0:	0029      	movs	r1, r5
 80022e2:	f7fd ff9d 	bl	8000220 <__aeabi_uldivmod>
 80022e6:	0002      	movs	r2, r0
 80022e8:	000b      	movs	r3, r1
 80022ea:	613a      	str	r2, [r7, #16]
 80022ec:	617b      	str	r3, [r7, #20]
    uint8_t reg = 8 + channel; // FTWO starts at reg 8
 80022ee:	210f      	movs	r1, #15
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	1dfa      	adds	r2, r7, #7
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	3208      	adds	r2, #8
 80022f8:	701a      	strb	r2, [r3, #0]
    return AD9959_WriteRaw(reg, (uint32_t)ftw);
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	0011      	movs	r1, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff ff96 	bl	8002234 <AD9959_WriteRaw>
 8002308:	0003      	movs	r3, r0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b006      	add	sp, #24
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	1dcd6500 	.word	0x1dcd6500

08002318 <pack_reg>:


#include "ADF4351.h"

// Helper: بسته‌بندی رجیستر 4 بایته
static uint32_t pack_reg(uint8_t reg, uint32_t data) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	0002      	movs	r2, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
    // هر رجیستر ADF4351: 28-bit داده <<4 | شماره رجیستر (4-bit)
    return ((data & 0x0FFFFFFF) << 4) | (reg & 0xF);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	011a      	lsls	r2, r3, #4
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	210f      	movs	r1, #15
 8002330:	400b      	ands	r3, r1
 8002332:	4313      	orrs	r3, r2
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <ADF4351_Init>:

void ADF4351_Init(void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
    // به عنوان مثال، فقط Reg5 را با default value 0x00580005 مقداردهی می‌کنیم
    // (بسته به نیازتان مقدار صحیح را انتخاب کنید)
    ADF4351_WriteReg(ADF4351_REG5, 0x00580005);
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <ADF4351_Init+0x1c>)
 8002342:	0019      	movs	r1, r3
 8002344:	2005      	movs	r0, #5
 8002346:	f000 f809 	bl	800235c <ADF4351_WriteReg>
    delay_ms(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fd9c 	bl	8001e88 <delay_ms>
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	00580005 	.word	0x00580005

0800235c <ADF4351_WriteReg>:

bool ADF4351_WriteReg(uint8_t reg, uint32_t data) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	0002      	movs	r2, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	701a      	strb	r2, [r3, #0]
    uint32_t w = pack_reg(reg, data);
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff ffd0 	bl	8002318 <pack_reg>
 8002378:	0003      	movs	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]
    ADF4351_Select();
 800237c:	f000 fb26 	bl	80029cc <ADF4351_Select>
    // ارسال 4 بایت MSB-first
    SPI_TransmitByte((w >> 24) & 0xFF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	0e1b      	lsrs	r3, r3, #24
 8002384:	b2db      	uxtb	r3, r3
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fbd0 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((w >> 16) & 0xFF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	b2db      	uxtb	r3, r3
 8002392:	0018      	movs	r0, r3
 8002394:	f000 fbca 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((w >>  8) & 0xFF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b2db      	uxtb	r3, r3
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fbc4 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((w      ) & 0xFF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 fbbf 	bl	8002b2c <SPI_TransmitByte>
    ADF4351_Deselect();
 80023ae:	f000 fb19 	bl	80029e4 <ADF4351_Deselect>
    delay_ms(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff fd68 	bl	8001e88 <delay_ms>
    return true;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <AXP209_Init>:
 *      Author: IrBO25
 */

#include "AXP209.h"

bool AXP209_Init(void) {
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
    // Example init :turn on LDO1 (register 0x10, bit 0)
    return AXP209_WriteReg(0x10, 0x01);
 80023c6:	2101      	movs	r1, #1
 80023c8:	2010      	movs	r0, #16
 80023ca:	f000 f804 	bl	80023d6 <AXP209_WriteReg>
 80023ce:	0003      	movs	r3, r0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <AXP209_WriteReg>:

bool AXP209_WriteReg(uint8_t reg, uint8_t data) {
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	0002      	movs	r2, r0
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	1dbb      	adds	r3, r7, #6
 80023e4:	1c0a      	adds	r2, r1, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    if (!I2C_Start(AXP209_I2C_ADDR, false)) return false;
 80023e8:	2100      	movs	r1, #0
 80023ea:	2034      	movs	r0, #52	@ 0x34
 80023ec:	f7ff fdc4 	bl	8001f78 <I2C_Start>
 80023f0:	0003      	movs	r3, r0
 80023f2:	001a      	movs	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	4053      	eors	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <AXP209_WriteReg+0x2c>
 80023fe:	2300      	movs	r3, #0
 8002400:	e00f      	b.n	8002422 <AXP209_WriteReg+0x4c>
    I2C_Write(reg);
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	0018      	movs	r0, r3
 8002408:	f7ff fdf6 	bl	8001ff8 <I2C_Write>
    I2C_Write(data);
 800240c:	1dbb      	adds	r3, r7, #6
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fdf1 	bl	8001ff8 <I2C_Write>
    I2C_Stop();
 8002416:	f7ff fe31 	bl	800207c <I2C_Stop>
    delay_ms(10);
 800241a:	200a      	movs	r0, #10
 800241c:	f7ff fd34 	bl	8001e88 <delay_ms>
    return true;
 8002420:	2301      	movs	r3, #1
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}

0800242a <MAX5712_Init>:
 */

#include "MAX5712.h"

// optional init give the DAC time to power up
void MAX5712_Init(void) {
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
    delay_ms(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff fd2a 	bl	8001e88 <delay_ms>
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <MAX5712_SetValue>:

// write a 12-bit value to the DAC via SPI

bool MAX5712_SetValue(uint16_t value) {
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	0002      	movs	r2, r0
 8002442:	1dbb      	adds	r3, r7, #6
 8002444:	801a      	strh	r2, [r3, #0]
    uint16_t word = MAX5712_CMD_WRITE_DAC | (value & 0x0FFF);
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	051b      	lsls	r3, r3, #20
 800244c:	0d1b      	lsrs	r3, r3, #20
 800244e:	b29a      	uxth	r2, r3
 8002450:	240e      	movs	r4, #14
 8002452:	193b      	adds	r3, r7, r4
 8002454:	21c0      	movs	r1, #192	@ 0xc0
 8002456:	0189      	lsls	r1, r1, #6
 8002458:	430a      	orrs	r2, r1
 800245a:	801a      	strh	r2, [r3, #0]
    MAX5712_Select(); //Assert CS
 800245c:	f000 fa9e 	bl	800299c <MAX5712_Select>
    SPI_Transmit16(word); //send 16-bit command
 8002460:	193b      	adds	r3, r7, r4
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fb7f 	bl	8002b68 <SPI_Transmit16>
    MAX5712_Deselect(); // Deassert CS
 800246a:	f000 faa3 	bl	80029b4 <MAX5712_Deselect>
    delay_ms(1); // small settle delay
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff fd0a 	bl	8001e88 <delay_ms>
    return true;
 8002474:	2301      	movs	r3, #1
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b005      	add	sp, #20
 800247c:	bd90      	pop	{r4, r7, pc}
	...

08002480 <pack_write>:
#include "SPI.h"
#include "NSS.h"
#include "delay.h"

// Build a 16-bit write packet: 1 | addr[5:0] | data [9:0]
static uint16_t pack_write(uint8_t addr, uint16_t data) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	0002      	movs	r2, r0
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	1c0a      	adds	r2, r1, #0
 8002490:	801a      	strh	r2, [r3, #0]
    return (uint16_t)(0x8000U | ((addr & 0x3F) << 10) | (data & 0x03FF));
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	b29a      	uxth	r2, r3
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	059b      	lsls	r3, r3, #22
 80024a2:	0d9b      	lsrs	r3, r3, #22
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4a03      	ldr	r2, [pc, #12]	@ (80024b8 <pack_write+0x38>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29b      	uxth	r3, r3
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	ffff8000 	.word	0xffff8000

080024bc <RFFC5071_Init>:
// Build a 16-bit read packet: 0|addr[5:0]|0
static uint16_t pack_read(uint8_t addr) {
    return (uint16_t)(((addr & 0x3F) << 10));
}

void RFFC5071_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    // optional startup delay
    delay_ms(10);
 80024c0:	200a      	movs	r0, #10
 80024c2:	f7ff fce1 	bl	8001e88 <delay_ms>
    // Example default register writes
    RFFC5071_WriteReg(0x05, 0x03FF);
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <RFFC5071_Init+0x28>)
 80024c8:	0019      	movs	r1, r3
 80024ca:	2005      	movs	r0, #5
 80024cc:	f000 f80c 	bl	80024e8 <RFFC5071_WriteReg>
    RFFC5071_WriteReg(0x07, 0x0100);
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	0019      	movs	r1, r3
 80024d6:	2007      	movs	r0, #7
 80024d8:	f000 f806 	bl	80024e8 <RFFC5071_WriteReg>
}
 80024dc:	46c0      	nop			@ (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	000003ff 	.word	0x000003ff

080024e8 <RFFC5071_WriteReg>:

bool RFFC5071_WriteReg(uint8_t addr, uint16_t data) {
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	1c0a      	adds	r2, r1, #0
 80024f8:	801a      	strh	r2, [r3, #0]
    uint16_t pkt = pack_write(addr, data);
 80024fa:	250e      	movs	r5, #14
 80024fc:	197c      	adds	r4, r7, r5
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	0011      	movs	r1, r2
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ffb9 	bl	8002480 <pack_write>
 800250e:	0003      	movs	r3, r0
 8002510:	8023      	strh	r3, [r4, #0]
    RFFC5071_Select();
 8002512:	f000 fa85 	bl	8002a20 <RFFC5071_Select>
    SPI_Transmit16(pkt);
 8002516:	197b      	adds	r3, r7, r5
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fb24 	bl	8002b68 <SPI_Transmit16>
    RFFC5071_Deselect();
 8002520:	f000 fa8a 	bl	8002a38 <RFFC5071_Deselect>
    delay_ms(1);
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fcaf 	bl	8001e88 <delay_ms>
    return true;
 800252a:	2301      	movs	r3, #1
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bdb0      	pop	{r4, r5, r7, pc}

08002534 <RFFC5071_SetLO>:
    resp = SPI_Receive16();
    RFFC5071_Deselect();
    return (uint16_t)(resp & 0x03FF);
}

bool RFFC5071_SetLO(uint32_t freq_hz) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    // placeholder caculation : user should implement VCO & divider math
	//Here we simply pack the MHZ value in to register 0x0B as an example
    uint16_t word = (uint16_t)((freq_hz / 1000000U) & 0x03FF);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	490b      	ldr	r1, [pc, #44]	@ (800256c <RFFC5071_SetLO+0x38>)
 8002540:	0018      	movs	r0, r3
 8002542:	f7fd fde1 	bl	8000108 <__udivsi3>
 8002546:	0003      	movs	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	210e      	movs	r1, #14
 800254c:	187b      	adds	r3, r7, r1
 800254e:	0592      	lsls	r2, r2, #22
 8002550:	0d92      	lsrs	r2, r2, #22
 8002552:	801a      	strh	r2, [r3, #0]
    return RFFC5071_WriteReg(0x0B, word);
 8002554:	187b      	adds	r3, r7, r1
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	0019      	movs	r1, r3
 800255a:	200b      	movs	r0, #11
 800255c:	f7ff ffc4 	bl	80024e8 <RFFC5071_WriteReg>
 8002560:	0003      	movs	r3, r0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	000f4240 	.word	0x000f4240

08002570 <SI4735_PowerUpFM>:

#include "SI4735.h"



bool SI4735_PowerUpFM(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
    // PowerUp: دستور 0x01 + ARG1, ARG2, ARG3
    if (!I2C_Start(SI4735_I2C_ADDR, false)) return false;
 8002574:	2100      	movs	r1, #0
 8002576:	2011      	movs	r0, #17
 8002578:	f7ff fcfe 	bl	8001f78 <I2C_Start>
 800257c:	0003      	movs	r3, r0
 800257e:	001a      	movs	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	4053      	eors	r3, r2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SI4735_PowerUpFM+0x1e>
 800258a:	2300      	movs	r3, #0
 800258c:	e011      	b.n	80025b2 <SI4735_PowerUpFM+0x42>
    I2C_Write(SI_CMD_POWER_UP);
 800258e:	2001      	movs	r0, #1
 8002590:	f7ff fd32 	bl	8001ff8 <I2C_Write>
    I2C_Write(SI_POWERUP_ARG1_FM);   // ARG1 = FM receiver
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff fd2f 	bl	8001ff8 <I2C_Write>
    I2C_Write(0x00);                 // ARG2 = no soft mute, no analog audio
 800259a:	2000      	movs	r0, #0
 800259c:	f7ff fd2c 	bl	8001ff8 <I2C_Write>
    I2C_Write(SI_POWERUP_GPO2_HIGH);// ARG3 = GPO2 hi (optional)
 80025a0:	2008      	movs	r0, #8
 80025a2:	f7ff fd29 	bl	8001ff8 <I2C_Write>
    I2C_Stop();
 80025a6:	f7ff fd69 	bl	800207c <I2C_Stop>

    // Datasheet: up to 110 ms startup
    delay_ms(120);
 80025aa:	2078      	movs	r0, #120	@ 0x78
 80025ac:	f7ff fc6c 	bl	8001e88 <delay_ms>
    return true;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <SI4735_TuneFM>:
    I2C_Stop();
    delay_ms(10);
    return true;
}

bool SI4735_TuneFM(uint16_t freq_khz) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	801a      	strh	r2, [r3, #0]

    // ARG1–2: frequency (16-bit, MSB first)
    // ARG3: space for future (0)
    // ARG4: GPO2 drive (0)
    if (!I2C_Start(SI4735_I2C_ADDR, false)) return false;
 80025c4:	2100      	movs	r1, #0
 80025c6:	2011      	movs	r0, #17
 80025c8:	f7ff fcd6 	bl	8001f78 <I2C_Start>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	2301      	movs	r3, #1
 80025d2:	4053      	eors	r3, r2
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SI4735_TuneFM+0x26>
 80025da:	2300      	movs	r3, #0
 80025dc:	e01c      	b.n	8002618 <SI4735_TuneFM+0x60>
    I2C_Write(SI_CMD_FM_TUNE_FREQ);
 80025de:	2020      	movs	r0, #32
 80025e0:	f7ff fd0a 	bl	8001ff8 <I2C_Write>
    I2C_Write((uint8_t)(freq_khz >> 8));
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff fd02 	bl	8001ff8 <I2C_Write>
    I2C_Write((uint8_t)(freq_khz & 0xFF));
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff fcfc 	bl	8001ff8 <I2C_Write>
    I2C_Write(0x00);
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff fcf9 	bl	8001ff8 <I2C_Write>
    I2C_Write(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fcf6 	bl	8001ff8 <I2C_Write>
    I2C_Stop();
 800260c:	f7ff fd36 	bl	800207c <I2C_Stop>

    // Datasheet : up to 60 ms to complete tune
    delay_ms(70);
 8002610:	2046      	movs	r0, #70	@ 0x46
 8002612:	f7ff fc39 	bl	8001e88 <delay_ms>
    return true;
 8002616:	2301      	movs	r3, #1
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <SI_WriteReg>:
#define SI_REG_OUTPUT_ENABLE    3
#define SI_REG_CLK0_CTRL        16
#define SI_REG_PLLA             26
#define SI_REG_MULTISYNTH0      42

static bool SI_WriteReg(uint8_t reg, uint8_t val) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	0002      	movs	r2, r0
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	1c0a      	adds	r2, r1, #0
 8002630:	701a      	strb	r2, [r3, #0]
    if (!I2C_Start(SI5351_I2C_ADDR, false)) return false;
 8002632:	2100      	movs	r1, #0
 8002634:	2060      	movs	r0, #96	@ 0x60
 8002636:	f7ff fc9f 	bl	8001f78 <I2C_Start>
 800263a:	0003      	movs	r3, r0
 800263c:	001a      	movs	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	4053      	eors	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <SI_WriteReg+0x2c>
 8002648:	2300      	movs	r3, #0
 800264a:	e00c      	b.n	8002666 <SI_WriteReg+0x46>
    I2C_Write(reg);
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff fcd1 	bl	8001ff8 <I2C_Write>
    I2C_Write(val);
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fccc 	bl	8001ff8 <I2C_Write>
    I2C_Stop();
 8002660:	f7ff fd0c 	bl	800207c <I2C_Stop>
    return true;
 8002664:	2301      	movs	r3, #1
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}

0800266e <SI5351_Init>:

bool SI5351_Init(void) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0

    if (!SI_WriteReg(SI_REG_CRYSTAL_LOAD, 0b11010010)) return false;
 8002674:	21d2      	movs	r1, #210	@ 0xd2
 8002676:	20b7      	movs	r0, #183	@ 0xb7
 8002678:	f7ff ffd2 	bl	8002620 <SI_WriteReg>
 800267c:	0003      	movs	r3, r0
 800267e:	001a      	movs	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	4053      	eors	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SI5351_Init+0x20>
 800268a:	2300      	movs	r3, #0
 800268c:	e02e      	b.n	80026ec <SI5351_Init+0x7e>

    if (!SI_WriteReg(SI_REG_OUTPUT_ENABLE, 0xFF)) return false;
 800268e:	21ff      	movs	r1, #255	@ 0xff
 8002690:	2003      	movs	r0, #3
 8002692:	f7ff ffc5 	bl	8002620 <SI_WriteReg>
 8002696:	0003      	movs	r3, r0
 8002698:	001a      	movs	r2, r3
 800269a:	2301      	movs	r3, #1
 800269c:	4053      	eors	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SI5351_Init+0x3a>
 80026a4:	2300      	movs	r3, #0
 80026a6:	e021      	b.n	80026ec <SI5351_Init+0x7e>


    for (uint8_t n = 0; n < 3; n++) {
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e015      	b.n	80026dc <SI5351_Init+0x6e>

        if (!SI_WriteReg(SI_REG_CLK0_CTRL + n, (1 << 7))) return false;
 80026b0:	1dfb      	adds	r3, r7, #7
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	3310      	adds	r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff ffb0 	bl	8002620 <SI_WriteReg>
 80026c0:	0003      	movs	r3, r0
 80026c2:	001a      	movs	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	4053      	eors	r3, r2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <SI5351_Init+0x64>
 80026ce:	2300      	movs	r3, #0
 80026d0:	e00c      	b.n	80026ec <SI5351_Init+0x7e>
    for (uint8_t n = 0; n < 3; n++) {
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	3201      	adds	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d9e5      	bls.n	80026b0 <SI5351_Init+0x42>
    }

    delay_ms(10);
 80026e4:	200a      	movs	r0, #10
 80026e6:	f7ff fbcf 	bl	8001e88 <delay_ms>
    return true;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <SI5351_EnableOutput>:

    uint8_t val = (0 << 7);
    return SI_WriteReg(reg, val);
}

bool SI5351_EnableOutput(uint8_t output_n, bool enable) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	0002      	movs	r2, r0
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	1dbb      	adds	r3, r7, #6
 8002702:	1c0a      	adds	r2, r1, #0
 8002704:	701a      	strb	r2, [r3, #0]
    uint8_t mask = (1 << output_n);
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	230f      	movs	r3, #15
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	701a      	strb	r2, [r3, #0]

    uint8_t cur = 0;
 8002714:	210e      	movs	r1, #14
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    if (!SI5351_ReadReg(SI_REG_OUTPUT_ENABLE, &cur)) return false;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	0019      	movs	r1, r3
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f833 	bl	800278c <SI5351_ReadReg>
 8002726:	0003      	movs	r3, r0
 8002728:	001a      	movs	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	4053      	eors	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <SI5351_EnableOutput+0x44>
 8002734:	2300      	movs	r3, #0
 8002736:	e025      	b.n	8002784 <SI5351_EnableOutput+0x90>
    if (enable) cur &= ~mask;
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <SI5351_EnableOutput+0x6c>
 8002740:	230f      	movs	r3, #15
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b25b      	sxtb	r3, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	b25b      	sxtb	r3, r3
 800274c:	210e      	movs	r1, #14
 800274e:	187a      	adds	r2, r7, r1
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	b252      	sxtb	r2, r2
 8002754:	4013      	ands	r3, r2
 8002756:	b25b      	sxtb	r3, r3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	187b      	adds	r3, r7, r1
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e009      	b.n	8002774 <SI5351_EnableOutput+0x80>
    else        cur |= mask;
 8002760:	210e      	movs	r1, #14
 8002762:	187b      	adds	r3, r7, r1
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	230f      	movs	r3, #15
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	187b      	adds	r3, r7, r1
 8002772:	701a      	strb	r2, [r3, #0]
    return SI_WriteReg(SI_REG_OUTPUT_ENABLE, cur);
 8002774:	230e      	movs	r3, #14
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	0019      	movs	r1, r3
 800277c:	2003      	movs	r0, #3
 800277e:	f7ff ff4f 	bl	8002620 <SI_WriteReg>
 8002782:	0003      	movs	r3, r0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <SI5351_ReadReg>:


bool SI5351_ReadReg(uint8_t reg, uint8_t *data) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	701a      	strb	r2, [r3, #0]
    if (!I2C_Start(SI5351_I2C_ADDR, false)) return false;
 800279a:	2100      	movs	r1, #0
 800279c:	2060      	movs	r0, #96	@ 0x60
 800279e:	f7ff fbeb 	bl	8001f78 <I2C_Start>
 80027a2:	0003      	movs	r3, r0
 80027a4:	001a      	movs	r2, r3
 80027a6:	2301      	movs	r3, #1
 80027a8:	4053      	eors	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SI5351_ReadReg+0x28>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e01b      	b.n	80027ec <SI5351_ReadReg+0x60>
    I2C_Write(reg);
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fc1d 	bl	8001ff8 <I2C_Write>
    if (!I2C_Start(SI5351_I2C_ADDR, true)) return false;
 80027be:	2101      	movs	r1, #1
 80027c0:	2060      	movs	r0, #96	@ 0x60
 80027c2:	f7ff fbd9 	bl	8001f78 <I2C_Start>
 80027c6:	0003      	movs	r3, r0
 80027c8:	001a      	movs	r2, r3
 80027ca:	2301      	movs	r3, #1
 80027cc:	4053      	eors	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SI5351_ReadReg+0x4c>
 80027d4:	2300      	movs	r3, #0
 80027d6:	e009      	b.n	80027ec <SI5351_ReadReg+0x60>
    *data = I2C_Read(false);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff fc25 	bl	8002028 <I2C_Read>
 80027de:	0003      	movs	r3, r0
 80027e0:	001a      	movs	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
    I2C_Stop();
 80027e6:	f7ff fc49 	bl	800207c <I2C_Stop>
    return true;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <NSS_LowLevel_Init>:
 *      Author: IrBO25
 */

#include "NSS.h"

void NSS_LowLevel_Init(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
    // 1) active clock for GPIOA, GPIOB و GPIOC
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN
 80027f8:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <NSS_LowLevel_Init+0x18c>)
 80027fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027fc:	4b60      	ldr	r3, [pc, #384]	@ (8002980 <NSS_LowLevel_Init+0x18c>)
 80027fe:	2107      	movs	r1, #7
 8002800:	430a      	orrs	r2, r1
 8002802:	635a      	str	r2, [r3, #52]	@ 0x34
                 | RCC_IOPENR_GPIOBEN
                 | RCC_IOPENR_GPIOCEN;

    // 2) Initialize all NSS pins one by one
    INIT_NSS_PIN(MAX5712_NSS_PORT, MAX5712_NSS_PIN);
 8002804:	4b5f      	ldr	r3, [pc, #380]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b5e      	ldr	r3, [pc, #376]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800280a:	495f      	ldr	r1, [pc, #380]	@ (8002988 <NSS_LowLevel_Init+0x194>)
 800280c:	400a      	ands	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4b5c      	ldr	r3, [pc, #368]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b5b      	ldr	r3, [pc, #364]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	02c9      	lsls	r1, r1, #11
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4b58      	ldr	r3, [pc, #352]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002824:	4959      	ldr	r1, [pc, #356]	@ (800298c <NSS_LowLevel_Init+0x198>)
 8002826:	400a      	ands	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	4b56      	ldr	r3, [pc, #344]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b55      	ldr	r3, [pc, #340]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002830:	21c0      	movs	r1, #192	@ 0xc0
 8002832:	0309      	lsls	r1, r1, #12
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	4b52      	ldr	r3, [pc, #328]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4b51      	ldr	r3, [pc, #324]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800283e:	4952      	ldr	r1, [pc, #328]	@ (8002988 <NSS_LowLevel_Init+0x194>)
 8002840:	400a      	ands	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	4b4f      	ldr	r3, [pc, #316]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	619a      	str	r2, [r3, #24]
    INIT_NSS_PIN(AD9834_NSS_PORT,  AD9834_NSS_PIN);
 800284c:	4b4d      	ldr	r3, [pc, #308]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002852:	494f      	ldr	r1, [pc, #316]	@ (8002990 <NSS_LowLevel_Init+0x19c>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b49      	ldr	r3, [pc, #292]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	0249      	lsls	r1, r1, #9
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4b46      	ldr	r3, [pc, #280]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800286c:	4949      	ldr	r1, [pc, #292]	@ (8002994 <NSS_LowLevel_Init+0x1a0>)
 800286e:	400a      	ands	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002878:	21c0      	movs	r1, #192	@ 0xc0
 800287a:	0289      	lsls	r1, r1, #10
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	4b40      	ldr	r3, [pc, #256]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002886:	4942      	ldr	r1, [pc, #264]	@ (8002990 <NSS_LowLevel_Init+0x19c>)
 8002888:	400a      	ands	r2, r1
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0052      	lsls	r2, r2, #1
 8002892:	619a      	str	r2, [r3, #24]
    INIT_NSS_PIN(ADF4351_NSS_PORT, ADF4351_NSS_PIN);
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800289a:	493f      	ldr	r1, [pc, #252]	@ (8002998 <NSS_LowLevel_Init+0x1a4>)
 800289c:	400a      	ands	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b38      	ldr	r3, [pc, #224]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b37      	ldr	r3, [pc, #220]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028a6:	2180      	movs	r1, #128	@ 0x80
 80028a8:	0049      	lsls	r1, r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028b4:	2110      	movs	r1, #16
 80028b6:	438a      	bics	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028c0:	21c0      	movs	r1, #192	@ 0xc0
 80028c2:	0089      	lsls	r1, r1, #2
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028ce:	4932      	ldr	r1, [pc, #200]	@ (8002998 <NSS_LowLevel_Init+0x1a4>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 80028d6:	2210      	movs	r2, #16
 80028d8:	619a      	str	r2, [r3, #24]
    INIT_NSS_PIN(AD9959_NSS_PORT,  AD9959_NSS_PIN);
 80028da:	23a0      	movs	r3, #160	@ 0xa0
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	23a0      	movs	r3, #160	@ 0xa0
 80028e2:	05db      	lsls	r3, r3, #23
 80028e4:	492c      	ldr	r1, [pc, #176]	@ (8002998 <NSS_LowLevel_Init+0x1a4>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	23a0      	movs	r3, #160	@ 0xa0
 80028ec:	05db      	lsls	r3, r3, #23
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	23a0      	movs	r3, #160	@ 0xa0
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	0049      	lsls	r1, r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	23a0      	movs	r3, #160	@ 0xa0
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	23a0      	movs	r3, #160	@ 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	2110      	movs	r1, #16
 8002908:	438a      	bics	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	23a0      	movs	r3, #160	@ 0xa0
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	23a0      	movs	r3, #160	@ 0xa0
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	21c0      	movs	r1, #192	@ 0xc0
 8002918:	0089      	lsls	r1, r1, #2
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	23a0      	movs	r3, #160	@ 0xa0
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	23a0      	movs	r3, #160	@ 0xa0
 8002926:	05db      	lsls	r3, r3, #23
 8002928:	491b      	ldr	r1, [pc, #108]	@ (8002998 <NSS_LowLevel_Init+0x1a4>)
 800292a:	400a      	ands	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	23a0      	movs	r3, #160	@ 0xa0
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	2210      	movs	r2, #16
 8002934:	619a      	str	r2, [r3, #24]
    INIT_NSS_PIN(RFFC5071_NSS_PORT,RFFC5071_NSS_PIN);
 8002936:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800293c:	2103      	movs	r1, #3
 800293e:	438a      	bics	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b0f      	ldr	r3, [pc, #60]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002960:	2103      	movs	r1, #3
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 800296c:	2103      	movs	r1, #3
 800296e:	438a      	bics	r2, r1
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <NSS_LowLevel_Init+0x190>)
 8002974:	2201      	movs	r2, #1
 8002976:	619a      	str	r2, [r3, #24]
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40021000 	.word	0x40021000
 8002984:	50000400 	.word	0x50000400
 8002988:	fff3ffff 	.word	0xfff3ffff
 800298c:	fffffdff 	.word	0xfffffdff
 8002990:	fffcffff 	.word	0xfffcffff
 8002994:	fffffeff 	.word	0xfffffeff
 8002998:	fffffcff 	.word	0xfffffcff

0800299c <MAX5712_Select>:

//Assert (drive low) or deassert (drive high) each chip-select
void MAX5712_Select(void)   { MAX5712_NSS_PORT->BSRR = (1U << (MAX5712_NSS_PIN + 16)); }
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <MAX5712_Select+0x14>)
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	0492      	lsls	r2, r2, #18
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	50000400 	.word	0x50000400

080029b4 <MAX5712_Deselect>:
void MAX5712_Deselect(void) { MAX5712_NSS_PORT->BSRR = (1U <<  MAX5712_NSS_PIN   ); }
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <MAX5712_Deselect+0x14>)
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	619a      	str	r2, [r3, #24]
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	50000400 	.word	0x50000400

080029cc <ADF4351_Select>:

void AD9834_Select(void)    { AD9834_NSS_PORT->BSRR  = (1U << (AD9834_NSS_PIN + 16)); }
void AD9834_Deselect(void)  { AD9834_NSS_PORT->BSRR  = (1U <<  AD9834_NSS_PIN   ); }

void ADF4351_Select(void)   { ADF4351_NSS_PORT->BSRR = (1U << (ADF4351_NSS_PIN + 16)); }
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <ADF4351_Select+0x14>)
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	0352      	lsls	r2, r2, #13
 80029d6:	619a      	str	r2, [r3, #24]
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	50000400 	.word	0x50000400

080029e4 <ADF4351_Deselect>:
void ADF4351_Deselect(void) { ADF4351_NSS_PORT->BSRR = (1U <<  ADF4351_NSS_PIN  ); }
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4b02      	ldr	r3, [pc, #8]	@ (80029f4 <ADF4351_Deselect+0x10>)
 80029ea:	2210      	movs	r2, #16
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	50000400 	.word	0x50000400

080029f8 <AD9959_Select>:

void AD9959_Select(void)    { AD9959_NSS_PORT->BSRR  = (1U << (AD9959_NSS_PIN + 16)); }
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	23a0      	movs	r3, #160	@ 0xa0
 80029fe:	05db      	lsls	r3, r3, #23
 8002a00:	2280      	movs	r2, #128	@ 0x80
 8002a02:	0352      	lsls	r2, r2, #13
 8002a04:	619a      	str	r2, [r3, #24]
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <AD9959_Deselect>:
void AD9959_Deselect(void)  { AD9959_NSS_PORT->BSRR  = (1U <<  AD9959_NSS_PIN   ); }
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	23a0      	movs	r3, #160	@ 0xa0
 8002a12:	05db      	lsls	r3, r3, #23
 8002a14:	2210      	movs	r2, #16
 8002a16:	619a      	str	r2, [r3, #24]
 8002a18:	46c0      	nop			@ (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <RFFC5071_Select>:

void RFFC5071_Select(void)  { RFFC5071_NSS_PORT->BSRR= (1U << (RFFC5071_NSS_PIN + 16)); }
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <RFFC5071_Select+0x14>)
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	0252      	lsls	r2, r2, #9
 8002a2a:	619a      	str	r2, [r3, #24]
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	50000400 	.word	0x50000400

08002a38 <RFFC5071_Deselect>:
void RFFC5071_Deselect(void){ RFFC5071_NSS_PORT->BSRR= (1U <<  RFFC5071_NSS_PIN);    }
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4b02      	ldr	r3, [pc, #8]	@ (8002a48 <RFFC5071_Deselect+0x10>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	619a      	str	r2, [r3, #24]
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	50000400 	.word	0x50000400

08002a4c <SPI_LowLevel_Init>:
#define PIN_SCK      5
#define PIN_MISO     6
#define PIN_MOSI     7
#define PIN_NSS      4

void SPI_LowLevel_Init(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0

    GPIOA_CLK();
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <SPI_LowLevel_Init+0xd0>)
 8002a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a54:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <SPI_LowLevel_Init+0xd0>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	635a      	str	r2, [r3, #52]	@ 0x34
    SPI_CLK();
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <SPI_LowLevel_Init+0xd0>)
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a60:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <SPI_LowLevel_Init+0xd0>)
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	0149      	lsls	r1, r1, #5
 8002a66:	430a      	orrs	r2, r1
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40


    // PA5, PA6, PA7 → AF mode
    GPIOA->MODER &= ~((3U<<(PIN_SCK*2)) | (3U<<(PIN_MISO*2)) | (3U<<(PIN_MOSI*2)));
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	05db      	lsls	r3, r3, #23
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	23a0      	movs	r3, #160	@ 0xa0
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	492a      	ldr	r1, [pc, #168]	@ (8002b20 <SPI_LowLevel_Init+0xd4>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ((2U<<(PIN_SCK*2)) | (2U<<(PIN_MISO*2)) | (2U<<(PIN_MOSI*2)));
 8002a7a:	23a0      	movs	r3, #160	@ 0xa0
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	23a0      	movs	r3, #160	@ 0xa0
 8002a82:	05db      	lsls	r3, r3, #23
 8002a84:	21a8      	movs	r1, #168	@ 0xa8
 8002a86:	0209      	lsls	r1, r1, #8
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
    // AFR0
    GPIOA->AFR[0] &= ~((0xFU<<(PIN_SCK*4)) | (0xFU<<(PIN_MISO*4)) | (0xFU<<(PIN_MOSI*4)));
 8002a8c:	23a0      	movs	r3, #160	@ 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	23a0      	movs	r3, #160	@ 0xa0
 8002a94:	05db      	lsls	r3, r3, #23
 8002a96:	0312      	lsls	r2, r2, #12
 8002a98:	0b12      	lsrs	r2, r2, #12
 8002a9a:	621a      	str	r2, [r3, #32]
    // AF0 = SPI1


    // 3) Configure PA4 as general-purpose output for software NSS

    GPIOA->MODER &= ~(3U<<(PIN_NSS*2));
 8002a9c:	23a0      	movs	r3, #160	@ 0xa0
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	23a0      	movs	r3, #160	@ 0xa0
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	491f      	ldr	r1, [pc, #124]	@ (8002b24 <SPI_LowLevel_Init+0xd8>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  (1U<<(PIN_NSS*2));      // General purpose output
 8002aac:	23a0      	movs	r3, #160	@ 0xa0
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	23a0      	movs	r3, #160	@ 0xa0
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	2180      	movs	r1, #128	@ 0x80
 8002ab8:	0049      	lsls	r1, r1, #1
 8002aba:	430a      	orrs	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER &= ~(1U<<PIN_NSS);         // Push-pull
 8002abe:	23a0      	movs	r3, #160	@ 0xa0
 8002ac0:	05db      	lsls	r3, r3, #23
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	23a0      	movs	r3, #160	@ 0xa0
 8002ac6:	05db      	lsls	r3, r3, #23
 8002ac8:	2110      	movs	r1, #16
 8002aca:	438a      	bics	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
    GPIOA->OSPEEDR |=  (3U<<(PIN_NSS*2));    // High speed
 8002ace:	23a0      	movs	r3, #160	@ 0xa0
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	23a0      	movs	r3, #160	@ 0xa0
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	21c0      	movs	r1, #192	@ 0xc0
 8002ada:	0089      	lsls	r1, r1, #2
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
    GPIOA->PUPDR &= ~(3U<<(PIN_NSS*2));      // No pull
 8002ae0:	23a0      	movs	r3, #160	@ 0xa0
 8002ae2:	05db      	lsls	r3, r3, #23
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	23a0      	movs	r3, #160	@ 0xa0
 8002ae8:	05db      	lsls	r3, r3, #23
 8002aea:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <SPI_LowLevel_Init+0xd8>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]
    GPIOA->ODR |=   (1U<<PIN_NSS);           // NSS = HIGH (inactive)
 8002af0:	23a0      	movs	r3, #160	@ 0xa0
 8002af2:	05db      	lsls	r3, r3, #23
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	23a0      	movs	r3, #160	@ 0xa0
 8002af8:	05db      	lsls	r3, r3, #23
 8002afa:	2110      	movs	r1, #16
 8002afc:	430a      	orrs	r2, r1
 8002afe:	615a      	str	r2, [r3, #20]

    // 4) Configure and enable SPI1 :
    // Master mode , Baudrate PCLK/8, CPOL=0, CPHA=0, 8-bit, SSI/SSM
    SPIx->CR1 = SPI_CR1_MSTR |
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <SPI_LowLevel_Init+0xdc>)
 8002b02:	22c5      	movs	r2, #197	@ 0xc5
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	601a      	str	r2, [r3, #0]
                SPI_CR1_SSI |
                SPI_CR1_SSM |
                (2U << SPI_CR1_BR_Pos);  // BR = 2 → fPCLK/8
    SPIx->CR1 |= SPI_CR1_SPE;              // Enable SPI
 8002b08:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <SPI_LowLevel_Init+0xdc>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <SPI_LowLevel_Init+0xdc>)
 8002b0e:	2140      	movs	r1, #64	@ 0x40
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	ffff03ff 	.word	0xffff03ff
 8002b24:	fffffcff 	.word	0xfffffcff
 8002b28:	40013000 	.word	0x40013000

08002b2c <SPI_TransmitByte>:
// Deassert NSS (chip-select high)
void SPI_CS_Disable(void) {
    GPIOA->ODR |=  (1U<<PIN_NSS);  // NSS = 1
}
// Transmit one byte over SPI (blocking)
void SPI_TransmitByte(uint8_t data) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	0002      	movs	r2, r0
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	701a      	strb	r2, [r3, #0]
    while (!(SPIx->SR & SPI_SR_TXE)); // wait until TX buffer is empty
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <SPI_TransmitByte+0x38>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0fa      	beq.n	8002b3a <SPI_TransmitByte+0xe>
    SPIx->DR = data;
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <SPI_TransmitByte+0x38>)
 8002b46:	1dfa      	adds	r2, r7, #7
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
    while (!(SPIx->SR & SPI_SR_RXNE)); // wait until RX buffer has data
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <SPI_TransmitByte+0x38>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0fa      	beq.n	8002b4e <SPI_TransmitByte+0x22>
    (void)SPIx->DR;  // Clear RX
 8002b58:	4b02      	ldr	r3, [pc, #8]	@ (8002b64 <SPI_TransmitByte+0x38>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013000 	.word	0x40013000

08002b68 <SPI_Transmit16>:
    SPIx->DR = 0xFF;  //  send Dummy byte
    while (!(SPIx->SR & SPI_SR_RXNE)); // wait until data arrives
    return (uint8_t)SPIx->DR;
}
// Trnsmit 16 bits (MSB first)
void SPI_Transmit16(uint16_t data) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	0002      	movs	r2, r0
 8002b70:	1dbb      	adds	r3, r7, #6
 8002b72:	801a      	strh	r2, [r3, #0]
    SPI_TransmitByte((uint8_t)(data >> 8));
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ffd4 	bl	8002b2c <SPI_TransmitByte>
    SPI_TransmitByte((uint8_t)(data & 0xFF));
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7ff ffce 	bl	8002b2c <SPI_TransmitByte>
}
 8002b90:	46c0      	nop			@ (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <USARTx_LowLevel_Init>:

// --------------------------------------------------
// Assign PA9 (TX) and PA10 (RX) to USART1 peripheral
// --------------------------------------------------
void USARTx_LowLevel_Init(uint32_t baudrate)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    // 1) Enable clocks for GPIOA and USART1
    USARTx_GPIO_CLK_EN();
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <USARTx_LowLevel_Init+0x8c>)
 8002ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <USARTx_LowLevel_Init+0x8c>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	635a      	str	r2, [r3, #52]	@ 0x34
    USARTx_CLK_EN();
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <USARTx_LowLevel_Init+0x8c>)
 8002bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <USARTx_LowLevel_Init+0x8c>)
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	01c9      	lsls	r1, r1, #7
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    // 2)configure PA9 and PA10 to alternate function 1 (USART1)
    // set mode to AF
    USARTx_GPIO_PORT->MODER &= ~((3 << (USARTx_TX_PIN * 2)) | (3 << (USARTx_RX_PIN * 2)));
 8002bba:	23a0      	movs	r3, #160	@ 0xa0
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	23a0      	movs	r3, #160	@ 0xa0
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	4918      	ldr	r1, [pc, #96]	@ (8002c28 <USARTx_LowLevel_Init+0x90>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
    USARTx_GPIO_PORT->MODER |=  ((2 << (USARTx_TX_PIN * 2)) | (2 << (USARTx_RX_PIN * 2)));
 8002bca:	23a0      	movs	r3, #160	@ 0xa0
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	23a0      	movs	r3, #160	@ 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	21a0      	movs	r1, #160	@ 0xa0
 8002bd6:	0389      	lsls	r1, r1, #14
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
    // select AF1
    USARTx_GPIO_PORT->AFR[0] &= ~((0xF << ((USARTx_TX_PIN & 7)*4)) | (0xF << ((USARTx_RX_PIN & 7)*4)));
 8002bdc:	23a0      	movs	r3, #160	@ 0xa0
 8002bde:	05db      	lsls	r3, r3, #23
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	23a0      	movs	r3, #160	@ 0xa0
 8002be4:	05db      	lsls	r3, r3, #23
 8002be6:	4911      	ldr	r1, [pc, #68]	@ (8002c2c <USARTx_LowLevel_Init+0x94>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	621a      	str	r2, [r3, #32]
    USARTx_GPIO_PORT->AFR[0] |=  ((1 << ((USARTx_TX_PIN & 7)*4)) | (1 << ((USARTx_RX_PIN & 7)*4)));
 8002bec:	23a0      	movs	r3, #160	@ 0xa0
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	23a0      	movs	r3, #160	@ 0xa0
 8002bf4:	05db      	lsls	r3, r3, #23
 8002bf6:	2188      	movs	r1, #136	@ 0x88
 8002bf8:	0049      	lsls	r1, r1, #1
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	621a      	str	r2, [r3, #32]

    // 3) Disable USART while configuring
    USARTx->CR1 = 0;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <USARTx_LowLevel_Init+0x98>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

    // 4) Set baud rate: BRR = FCLK / baudrate ( assume FCLK = 48 MHZ)
    USARTx->BRR = SystemCoreClock / baudrate;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <USARTx_LowLevel_Init+0x9c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4c09      	ldr	r4, [pc, #36]	@ (8002c30 <USARTx_LowLevel_Init+0x98>)
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fd fa7b 	bl	8000108 <__udivsi3>
 8002c12:	0003      	movs	r3, r0
 8002c14:	60e3      	str	r3, [r4, #12]

    // 5) Enable USART1 transmitter, receiver , and the peripheral
    USARTx->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <USARTx_LowLevel_Init+0x98>)
 8002c18:	220d      	movs	r2, #13
 8002c1a:	601a      	str	r2, [r3, #0]

    // 6) we don't wait for flags here-only clock and baud setup
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b003      	add	sp, #12
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	ffc3ffff 	.word	0xffc3ffff
 8002c2c:	fffff00f 	.word	0xfffff00f
 8002c30:	40013800 	.word	0x40013800
 8002c34:	20000000 	.word	0x20000000

08002c38 <__libc_init_array>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	4c0c      	ldr	r4, [pc, #48]	@ (8002c70 <__libc_init_array+0x38>)
 8002c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c74 <__libc_init_array+0x3c>)
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	d109      	bne.n	8002c5c <__libc_init_array+0x24>
 8002c48:	2600      	movs	r6, #0
 8002c4a:	f000 f819 	bl	8002c80 <_init>
 8002c4e:	4c0a      	ldr	r4, [pc, #40]	@ (8002c78 <__libc_init_array+0x40>)
 8002c50:	4d0a      	ldr	r5, [pc, #40]	@ (8002c7c <__libc_init_array+0x44>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d105      	bne.n	8002c66 <__libc_init_array+0x2e>
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	00b3      	lsls	r3, r6, #2
 8002c5e:	58eb      	ldr	r3, [r5, r3]
 8002c60:	4798      	blx	r3
 8002c62:	3601      	adds	r6, #1
 8002c64:	e7ee      	b.n	8002c44 <__libc_init_array+0xc>
 8002c66:	00b3      	lsls	r3, r6, #2
 8002c68:	58eb      	ldr	r3, [r5, r3]
 8002c6a:	4798      	blx	r3
 8002c6c:	3601      	adds	r6, #1
 8002c6e:	e7f2      	b.n	8002c56 <__libc_init_array+0x1e>
 8002c70:	08002d20 	.word	0x08002d20
 8002c74:	08002d20 	.word	0x08002d20
 8002c78:	08002d24 	.word	0x08002d24
 8002c7c:	08002d20 	.word	0x08002d20

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
